=head1 Tie

Z<tie>

Mentre l'overloading (L<overloading>) vi permette di personalizzare il comportamento di
classi e oggetti per tipi specifici di coercizione, un meccanismo detto I<tying> (legatura, NdT)
ci permette di personalizzare il comportamento dei tipi nativi (scalari, array,
hash e filehandle). Qualunque operazione effettuate su una variabile legata
si traduce in una specifica chiamata di metodo.

X<builtin; C<tie>>
X<C<Tie::File>>

La funzione nativa C<tie> (lega, NdT) permetteva originariamente di usare spazio su disco come memoria di supporto
degli hash, in modo che Perl potesse accedere a file più grandi di quanto potesse essere ospitato
in memoria. Il modulo C<Tie::File> distribuito con Perl fornisce un sistema simile e vi permette
di trattare i file come se fossero array.

X<C<Tie::StdScalar>>
X<C<Tie::StdArray>>
X<C<Tie::StdHash>>

La classe a cui fate il C<tie> di una variabile deve rispettare una interfaccia predefinita
per ogni tipo di dato. Vedete C<perldoc perltie> per una panoramica, prima di consultare
i moduli C<Tie::StdScalar>, C<Tie::StdArray> e C<Tie::StdHash> della distribuzione Perl per
i dettagli più specifici. Iniziate ereditando da una di tali classi, e sovrascrivete
i metodi che dovete modificare.

=begin tip Collisioni tra Nomi di Classe e di Package

Come se C<tie> non creasse già abbastanza confusione, C<Tie::Scalar>, C<Tie::Array> e
C<Tie::Hash> definiscono le interfacce necessarie per legare scalari, array e
hash, mentre C<Tie::StdScalar>, C<Tie::StdArray> e C<Tie::StdHash> forniscono
le implementazioni di default.

=end tip

=head2 Legare Variabili

per legare una variabile:

=begin programlisting

    use Tie::File;
    tie my @file, 'Tie::File', @arg;

=end programlisting

Il primo argomento è la variabile da legare, il secondo è il nome della classe a cui
legarla e C<@args> è una lista opzionale di argomenti richiesti
dalla funzione di legatura. Nel caso di C<Tie::File>, il parametro richiesto è un nome valido di file.

X<builtin; C<tie>>
X<builtin; C<tied>>

Le funzioni di legatora sono simili a costruttori: C<TIESCALAR>, C<TIEARRAY()>,
C<TIEHASH()> e C<TIEHANDLE()> rispettivamente per gli scalari, gli array, gli hash e i
filehandle. Ciascuna funzione restituisce un nuovo oggetto che rappresenta la variabile
legata. Entrambe le funzioni native C<tie> e C<tied> restituiscono tale oggetto. La maggior parte
delle persone, tuttavia, usa C<tied> in contesto booleano.

=head2 Implementazione di Variabili Legate

Per implementare la classe di una variabile legata, ereditate anzitutto da uno dei moduli distribuiti con Perl come
C<Tie::StdScalar>N<C<Tie::StdScalar> non ha un proprio file F<.pm> associato, perciò dovete usare
C<Tie::Scalar> per renderlo disponibile.>, quindi sovrascrivete i metodi specifici relativi alle
operazioni che volete modificare.  Nel caso di uno scalare legato, è probabile che essi
includano C<FETCH> e C<STORE>, forse anche C<TIESCALAR()>, ma probabilmente non
C<DESTROY()>.

Con poco codice, otete creare una classe che tiene traccia di tutte le letture
e le scritture su uno scalare:

=begin programlisting

    package Tie::Scalar::Registra
    {
        use Modern::Perl;

        use Tie::Scalar;
        use parent -norequire => 'Tie::StdScalar';

        sub STORE
        {
            my ($self, $valore) = @_;
            Registro->scrivi("Memorizzo <$valore> (prima era [$$self])", 1);
            $$self = $valore;
        }

        sub FETCH
        {
            my $self = shift;
            Registro->scrivi("Leggo <$$self>", 1);
            return $$self;
        }
    }

    1;

=end programlisting

Assumete che il metodo C<scrivi()> della classe C<Registro> riceva una stringa e il numero
di contesti di chiamata nello stack di cui riportare il numero di linea.

I metodi C<STORE()> e C<FETCH()> trattano C<$self> come uno scalare
blessed.  Assegnare un valore a tale riferimento a scalare cambia il valore dello scalare e
leggere da esso restituisce il valore dello scalare.

Analogamente, i metodi di C<Tie::StdArray> e C<Tie::StdHash> operano rispettivamente su dei riferimenti
blessed ad array e hash.  La documentazione contenuta in C<perldoc perltie>
spiega i numerosi metodi supportati da queste classi, ad esempio per leggere e scrivere valori
multipli.

=begin tip Vero che C<tie> è Divertente?

Grazie all'opzione C<-norequire> la direttiva C<parent> evita di tentare di caricare
un file per C<Tie::StdScalar>, dato che tale modulo è contenuto in una parte del file
F<Tie/Scalar.pm>.

=end tip

=head2 Quando usare le Variabili Legate

Le variabili legate possono sembrare delle divertenti occasioni per mostrare la propria brillantezza, ma spesso producono
interfacce confuse. A meno che abbiate delle ragioni molto valide per volere che certi oggetti
si comportino come se fossero tipi di dati nativi, evitate di creare le vostre legature.
Usare C<tie> è anche molto più lento che usare i tipi nativi a causa di vari aspetti
implementativi.

Tra le ragioni valide ci sono quella di facilitare il debugging (ad esempio usare lo scalare tracciato per aiutarvi
a capire dove cambia il suo valore) e quella di rendere possibili certe operazioni altrimenti
impossibili (ad esempio accedere a file di grandi dimensioni con un uso efficiente della memoria). Le variabili legate sono
invece difficilmente utili come interfacce primarie agli oggetti; spesso è troppo difficile e
vincolante tentare di uniformare l'intera interfaccia a quella supportata da C<tie()>.

Un ultimo avvertimento poco piacevole ma convinente; troppo codice devia dai suoi obiettivi
al fine di I<prevenire> l'uso di variabili legate, spesso accidentalmente. Questo è sicuramente
un problema, ma la violazione delle aspettative del codice di una libreria rivela normalmente
dei bug che non è in vostro potere risolvere.
