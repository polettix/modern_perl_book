=head1 Valori

Z<values>

X<variabili>
X<valori>

La struttura di un proramma è fortemente influenzata dal modo in cui modellate i vostri dati
con le variabili appropriate.

Mentre le variabili permettono la manipolazione astratta dei dati, i valori che esse contengono
rendono i programmi utili e concreti. Più questi valori sono accurati, migliori sono i
vostri programmi. I valori rappresentano dati--il nome e l'indirizzo di vostra zia, la
distanza tra il vostro ufficio e un campo da golf sulla Luna, o il peso di
tutti i biscotti che avete mangiato lo scorso anno. All'interno del vostro programma, le
regole sul formato di tali dati sono spesso rigide. Dei programmi efficaci
necessitano di modi efficaci (ovvero semplici, veloci, compatti, efficienti) per
rappresentare i propri dati.

=head2 Stringhe

X<stringhe>

Una I<stringa> è un dato testuale o binario senza particolari restrizioni di formato o
contenuto. Potrebbe essere il vostro nome, il contenuto di un file immagine o lo stesso
vostro programma. Una stringa ha un significato nel programma solo quando gliene attribuite uno.

X<stringhe; delimitatori>

Per rappresentare una stringa nel vostro programma, racchiudetela tra una coppia di caratteri di
quotatura. I I<delimitatori di stringa> più comuni sono i singoli e doppi apici:

=begin programlisting

    my $nome      = B<'Donner Odinson, Portatore di Disperazione'>;
    my $indirizzo = B<"Stanza 539, Bilskirnir, Valhalla">;

=end programlisting

X<stringhe; singola quotatura>

I caratteri in una I<stringa a singola quotatura> rappresentano se stessi letteralmente, con due
eccezioni. Per inserire un apice singolo in una stringa a singola quotatura fatelo precedere da un carattere backslash di escape:

=begin programlisting

    my $ricorda = 'LB<\'>apice va preceduto '
                . 'da un carattere di escape!';

=end programlisting

Dovete precedere con l'escape anche un backslash alla fine della stringa per evitare che esso faccia da escape all'apice finale
producendo un errore di sintassi:

=begin programlisting

    my $eccezione = 'Questa stringa termina con un '
                  . 'escape, non con un apice: B<\\>';

=end programlisting

Tutti gli altri backslash vengono interpretati letteralmente, a meno che ve ne siano due
in sequenza, nel qual caso il primo fa da escape al secondo:

=begin programlisting

    is('Modern B<\> Perl', 'Modern B<\\> Perl',
        'escape del backslash tra apici singoli');

=end programlisting

X<stringhe; doppia quotatura>

Una I<stringa a doppia quotatura> ha molti più caratteri speciali a disposizione. Per
esempio, potete codificare nella stringa dei caratteri di spaziatura altrimenti invisibili:

=begin programlisting

    my $tab       = "B<\t>";
    my $newline   = "B<\n>";
    my $carriage  = "B<\r>";
    my $formfeed  = "B<\f>";
    my $backspace = "B<\b>";

=end programlisting

Questo esempio mostra un principio utile: la sintassi usata per dichiarare una stringa può
variare. Potete rappresentare un tab all'interno di una stringa sia con l'escape C<\t> che digitando
direttamente un tab. Per ciò che riguarda il Perl, le due stringhe funzionano allo stesso modo,
anche se le rappresentazioni specifiche della stringa differiscono nel codice sorgente.

La dichiarazione di una stringa può contenere diverse linee di testo delimitate da newline; queste due dichiarazioni sono
equivalenti:

=begin programlisting

    my $con_escape = "due\nlinee";
    my $letterale  = "due
    linee";
    is $con_escape, $letterale, 'equivalenza \n e newline';

=end programlisting

Le sequenze di escape sono spesso più facili da leggere della spaziatura equivalente.

X<concatenazione>
X<stringhe; concatenazione>
X<operatori; C<.>>

Le stringhe Perl hanno lunghezza variabile. Quando le manipolate e modificate, il Perl
cambia la loro dimensione in modo appropriato. Per esempio, potete combinare diverse
stringhe in una stringa più grande con l'operatore C<.> di I<concatenazione>:

=begin programlisting

    my $gattino = 'Micio' . ' ' . 'Miao';

=end programlisting

A tutti gli effetti, è come se aveste inizializzato la stringa tutta insieme.

X<interpolazione>
X<stringhe; interpolazione>

In una stringa a doppia quotatura potete anche I<interpolare> il valore di una variabile scalare o i valori di un
array, in modo tale che il contenuto I<attuale> della variabile 
diventi parte della stringa come se le aveste concatenate:

=begin programlisting

    my $fatto = "B<$nome> vive a B<$indirizzo>!";

    # equivalente a
    my $fatto = $nome . ' vive a ' . $indirizzo . '!';

=end programlisting

X<escape>

Per inserire un doppio apice in una stringa a doppia quotatura fatelo precedere da un carattere di I<escape>
(ovvero, un backslash):

=begin programlisting

    my $citazione = "\"Ahia,\", gridò.  \"Fa I<male>!\"";

=end programlisting

X<operatori; quotatura>
X<C<q>; operatore di quotatura singola>
X<operatori; C<q>>
X<C<qq>; operatore di quotatura doppia>
X<operatori; C<qq>>

Quando troppi backslash creano confusione, usate un I<operatore di quotatura> alternativo 
con cui potete scegliere un diverso delimitatore di stringa. L'operatore C<q>
indica singola quotatura, mentre l'operatore C<qq> si comporta come
una doppia quotatura. Il carattere che segue l'operatore determina
quali sono i caratteri che delimitano la stringa. Se tale carattere è il primo di una coppia
di caratteri bilanciati--come aperta e chiusa graffa--il corrispondente carattere di chiusura
sarà il delimitatore di fine stringa. Altrimenti, lo stesso carattere fungerà da delimitatore 
sia di inizio che di fine stringa.

=begin programlisting

    my $citazione = B<qq{>"Ahia", disse.  "Fa I<male>!"B<}>;
    my $ricorda   =  B<q^>L'apice singolo non va quotato!B<^>;
    my $reclamo   =  B<q{>È un po' troppo presto per svegliarsi.B<}>;

=end programlisting

X<heredoc>
X<stringhe; heredoc>

Quando dichiarare una stringa complessa con molti caratteri di escape diventa noioso,
usate la sintassi I<heredoc> per assegnare una o più linee a una stringa:

=begin programlisting

    my $estratto =<<'FINE_ESTRATTO';

    Egli alzò lo sguardo. "Il tempo non è mai dalla nostra parte, figlio mio.
    Non ne vedi l'ironia? Tutto ciò che essi conoscono è il cambiamento.
    Il cambiamento è la sola costante su cui tutti loro concordano.
    Noi, invece, nati fuori dal tempo, restiamo perfetti e
    perfettamente auto-coscienti. E possiamo accettare il cambiamento solo
    quando noi stessi lo perseguiamo. È contro la nostra natura: ci ribelliamo
    contro il cambiamento. Dobbiamo forse considerarli
    superiori per questo?"
    FINE_ESTRATTO

=end programlisting

La sintassi di C<< <<'FINE_ESTRATTO' >> ha tre parti. Le doppie parentesi angolari
introducono l'heredoc. Gli apici determinamo se l'heredoc si comporta come una stringa a singola
o doppia quotatura. Il comportamento di default è quello della doppia quotatura con la relativa interpolazione.
C<FINE_ESTRATTO> è un identificatore arbitrario che il parser Perl 5 usa come
delimitatore finale.

Fate attenzione; indipendentemente dall'indentazione della dichiarazione dell'heredoc,
il delimitatore finale I<deve> essere all'inizio della linea:

=begin programlisting

    sub una_funzione {
        my $ingredienti =<<'FINE_INGREDIENTI';
        Due uova
        Una tazza di farina
        Due etti di burro
        Un quarto di cucchiaino di sale
        Una tazza di latte
        Un pizzico di vaniglia
        Condimento a piacere
    FINE_INGREDIENTI
    }

=end programlisting

=begin sidebar

Se l'identificatore inizia con una spaziatura, la stessa spaziatura dev'essere presente
prima del delimitatore finale. Tuttavia, se indentate l'identificatore, Perl 5
I<non> rimuoverà una spaziatura equivalente dall'inizio di ogni linea dell'heredoc.

=end sidebar

Usare una stringa in un contesto diverso da quello stringa causa una coercizione (L<coercion>).

=head2 Stringhe e Unicode

Z<unicode>
X<Unicode>

I<Unicode> è un sistema per rappresentare tutti i caratteri delle lingue scritte del mondo.
Mentre gran parte dei testi in inglese usano un insieme di soli 127 caratteri
(che richiedono sette bit di memoria e stanno comodamente negli otto bit di un byte),
sarebbe naE<iuml>ve pensare che non vi possa servire un giorno o l'altro una dieresi.

Le stringhe in Perl 5 possono rappresentare due tipi di dati distinti anche se correlati:

X<codepoint>

=over 4

=item Sequenze di caratteri Unicode

Ogni carattere ha un suo I<codepoint>, un numero univoco che lo identifica nell'insieme
di caratteri Unicode.

=item Sequenze di ottetti

X<ottetto>

I dati binari sono sequenze di I<ottetti>--numeri di 8 bit, ognuno dei quali può
rappresentare un numero tra 0 e 255.

=back

=begin tip Le Parole Contano

Perché I<ottetti> e non I<byte>? L'assunzione che un carattere possa stare dentro un byte può essere causa
di problemi senza fine con Unicode. Separate quindi l'idea di spazio in memoria da quella della
rappresentazione dei caratteri.

=end tip

Le stringhe Unicode e binarie sono simili. Ciascuna ha una C<length()>.  Ciascuna
supporta le operazioni standard sulle stringhe come la concatenazione, lo splicing e
l'applicazione di espressioni regolari. Ogni stringa che non contenga dati binari puri contiene
dati testuali, e dovrebbe quindi essere una sequenza di caratteri Unicode.

Tuttavia, dato che il vostro sistema operativo reppresenta i dati su disco (o in input dall'utente
o dalla rete) come sequenze di ottetti, Perl non può sapere se i dati che leggete
costituiscono un file immagine o un documento di testo o qualunque altra cosa. Per default, Perl
tratta tutti i dati in input come sequenze di ottetti. Tocca a voi assegnare un significato specifico
a tali dati.

=head3 Codifica dei Caratteri

X<codifica>
X<Unicode; codifica>
X<UTF-8>
X<ASCII>
X<Latin-1>

Una stringa Unicode è una sequenza di ottetti che rappresenta una sequenza di
caratteri. Una I<codifica Unicode> mappa sequenze di ottetti in sequenze di caratteri. Alcune
codifiche, come UTF-8, possono codificare tutti i caratteri dell'insieme di caratteri
Unicode. Altre codifiche rappresentano un sottoinsieme dei caratteri Unicode. Per
esempio, l'ASCII codifica un testo in inglese comune senza caratteri accentati, mentre
Latin-1 può rappresentare testo nella maggior parte delle lingue che usano l'alfabeto latino.

Per evitare problemi con Unicode, decodificate e codificate sempre dalla/alla codifica appropriata
durante l'input e l'output del vostro programma.

=begin tip Uno Standard in Evoluzione

Perl 5.12 supporta lo standard Unicode 5.2, mentre Perl 5.14 supporta Unicode
6.0. Se avete bisogno di tenere conto delle differenze tra le versioni di Unicode,
probabilmente conoscete già il sito U<http://unicode.org/versions/>.

=end tip

=head3 Unicode nei Vostri Filehandle

X<C<open>>
X<predefinite; funzioni; C<open>>
X<layer di IO>

Quando comunicate al Perl che uno specifico filehandle (L<files>) lavora con testo codificato,
Perl convertirà automaticamente gli ottetti in input in stringhe Unicode.
Per ottenere questo, aggiungete un layer di IO al modo della funzione nativa C<open>. Un I<layer di IO>
si interpone tra il programma e l'input o l'output convertendo i dati. Nel seguente esempio, il layer C<:utf8>
decodifica dei dati UTF-8:

=begin programlisting

    use autodie;

    open my $fh, '<:utf8', $file_di_testo;

    my $stringa_unicode = <$fh>;

=end programlisting

X<C<binmode>>
X<predefinite; funzioni; C<binmode>>

Con C<binmode>, potete anche modificare un filehandle esistente, sia per l'input
che per l'output:

=begin programlisting

    binmode $fh, ':utf8';
    my $stringa_unicode = <$fh>;

    binmode STDOUT, ':utf8';
    say $stringa_unicode;

=end programlisting

Senza il modo C<utf8>, stampare delle stringhe Unicode su un filehandle provoca un
warning (C<Wide character in %s>), perché il file contiene ottetti, e non
caratteri Unicode.

=head3 Unicode nei Vostri Dati

X<C<Encode>>
X<C<decode()>>
X<C<encode()>>

Il modulo core C<Encode> fornisce una funzione di nome C<decode()> per convertire uno
scalare contenente dei dati in una stringa Unicode. La corrispondente funzione C<encode()>
converte dalla codifica interna del Perl alla codifica di output desiderata:

=begin programlisting

    my $da_utf8  = decode('utf8', $dati);
    my $a_latin1 = encode('iso-8859-1', $stringa);

=end programlisting

=head3 Unicode nei Vostri Programmi

X<direttive; C<utf8>>
X<direttiva C<utf8>>
X<codifica>

Potete includere caratteri Unicode nei vostri programmi in tre modi. Il modo più semplice
è quello di usare la direttiva C<utf8> (L<pragmas>), che indica al parser Perl di
interpretare il resto del file di codice sorgente con la codifica UTF-8. Ciò vi permette
di usare caratteri Unicode nelle stringhe e negli identificatori:

=begin programlisting

    use utf8;

    sub da_E<pound>_a_E<yen> { ... }

    my $yen = da_E<pound>_a_E<yen>('1000E<pound>');

=end programlisting

Per poter I<scrivere> questo codice, il vostro editor di testo deve supportare UTF-8 e dovete salvare
il file con la codifica appropriata.

X<stringhe; C<\x{}>>
X<C<\x{}>; sequenza di escape per la codifica dei caratteri>

All'interno di stringhe a doppia quotatura, potete usare la sequenza di escape Unicode per
rappresentare la codifica dei caratteri. La sintassi C<\x{}> rappresenta un carattere
singolo; mettete il codice Unicode del carattere in esadecimale dentro alle
parentesi graffe:

=begin programlisting

    my $thorn_con_escape = "\x{00FE}";

=end programlisting

X<direttiva C<charnames>>
X<direttive; C<charnames>>
X<stringhe; C<\N{}>>
X<C<\N{}>; sequenza di escape per le codifiche di caratteri con nome>

Alcuni caratteri Unicode hanno dei nomi, che spesso sono più facili da leggere
dei codici Unicode. Usate la direttiva C<charnames> per attivarli e la sequenza di escape
C<\N{}> per riferirvi ad essi:

=begin programlisting

    use charnames ':full';
    use Test::More tests => 1;

    my $thorn_con_escape = "\x{00FE}";
    my $thorn_per_nome   = "\N{LATIN SMALL LETTER THORN}";

    is $thorn_con_escape, $thorn_per_nome,
        'controllo di equivalenza carattere thorn';

=end programlisting

Potete usare C<\x{}> e C<\N{}> all'interno di espressioni regolari e in ogni altro punto
dove potete legittimamente inserire una stringa o un carattere.

=head3 Conversione Implicita

Molti dei problemi con Unicode in Perl nascono dal fatto che una stringa può essere sia
una sequenza di ottetti che una sequenza di caratteri. Perl vi permette di combinare
questi due tipi attraverso l'uso delle conversioni implicite. Quando queste conversioni sono
sbagliate, raramente lo sono in modo I<ovvio>.

Quando Perl concatena una sequenza di ottetti con una sequenza di caratteri Unicode,
decodifica implicitamente la sequenza di ottetti usando la codifica Latin-1.
La stringa risultante conterrà caratteri Unicode. Quando stampate
dei caratteri Unicode, Perl codifica la stringa usando UTF-8, perché Latin-1
non può rappresentare l'intero insieme di caratteri Unicode--Latin-1 è un sottoinsieme di
UTF-8.

Questa asimmetria può dar luogo a stringhe Unicode codificate con UTF-8 in output e
decodificate con Latin-1 in input.

Peggio ancora, quando il testo contiene solo caratteri dell'inglese senza accento, il
bug rimane nascosto--dato che entrambe le codifiche hanno la stessa rappresentazione di ogni
carattere.

=begin programlisting

    my $ciao     = "Ciao, ";
    my $saluto   = $ciao . $nome;

=end programlisting

Se C<$nome> contiene un nome in alfabeto inglese come I<Alice> non si riscontra nessun problema,
dato che la rappresentazione Latin-1 è uguale alla rappresentazione UTF-8.
Se invece C<$name> contiene un nome come I<JosE<eacute>>, ci sono diverse possibilità:

=over 4

=item *

C<$nome> contiene quattro caratteri Unicode.

=item *

C<$nome> contiene quattro ottetti Latin-1 che rappresentano quattro caratteri Unicode.

=item *

C<$nome> contiene cinque ottetti UTF-8 che rappresentano quattro caratteri Unicode.

=back

Ci sono diversi scenari anche per il letterale stringa:

=over 4

=item * È una stringa ASCII e contiene ottetti.

=begin programlisting

    my $ciao = "Ciao, ";

=end programlisting

=item * È una stringa Latin-1 senza codifica esplicita e contiene ottetti.

=begin programlisting

    my $ciao = "E<iexcl>Hola, ";

=end programlisting

=item * È una stringa non-ASCII e contiene caratteri Unicode
perché è attiva la direttiva C<utf8> o C<encoding>.

=begin programlisting

    use utf8;
    my $ciao = "KuirabE<aacute>, ";

=end programlisting

=back

Se sia C<$ciao> che C<$nome> sono stringhe Unicode, la loro concatenazione produce
un'altra stringa Unicode.

Se entrambe le stringhe sono sequenze di ottetti, Perl le concatenerà in una nuova sequenza
di ottetti. Se entrambi i valori contengono ottetti di una stessa codifica--per esempio, Latin-1--
la concatenazione funzionerà correttamente. Se invece gli ottetti appartengono a diverse codifiche,
per esempio una concatenazione di dati UTF-8 a dati Latin-1, la sequenza di ottetti
risultante è priva di senso per I<entrambe> le codifiche. Questo potrebbe succedere
se l'utente avesse immesso un nome come stringa UTF-8 e il saluto fosse una costante stringa in Latin-1,
ma il programma non avesse decodificato nessuna delle due.

Se solo uno dei valori è una stringa Unicode, Perl decodificherà l'altro come un dato
Latin-1. Se questa non è la codifica corretta, i caratteri Unicode risultanti
saranno errati. Per esempio, se l'input dell'utente fosse un dato UTF-8 e
la costante stringa fosse Unicode, il nome verrebbe decodificato erroneamente
come i cinque caratteri Unicode I<JosE<Atilde>E<copy>> (I<sic>) invece di
I<JosE<eacute>> perché i dati UTF-8 hanno un altro significato quando sono decodificati come
dati Latin-1.

Vedete C<perldoc perluniintro> per una spiegazione molto più dettagliata di Unicode,
delle codifiche e di come gestire i dati in ingresso e in uscita in un mondo UnicodeN<Per avere
I<molti> più dettagli su una gestione efficace di Unicode in ogni parte dei vostri programmi,
vedete la risposta di Tom Christiansen a "Why does Modern Perl avoid UTF-8 by default?"
U<http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129>>.

=begin sidebar

X<C<unicode_strings>>
X<direttive; C<feature>>

Perl 5.12 ha aggiunto una funzionalità, C<unicode_strings>, che attiva la semantica Unicode
per tutte le operazioni su stringa all'interno del suo scope. Perl 5.14 ha ulteriormente migliorato questa
funzionalità; se lavorate con Unicode in Perl, vale la pena di fare un aggiornamento almeno a Perl 5.14.

=end sidebar

=head2 Numeri

X<numeri>
X<interi>
X<valori a virgola mobile>

Perl supporta i numeri sia come valori interi che a virgola mobile. Potete rappresentarli
anche con la notazione scientifica e in forma binaria, ottale ed
esadecimale:

=begin programlisting

    my $intero      = 42;
    my $float       = 0.007;
    my $float_sci   = 1.02e14;
    my $binario     = B<0b>101010;
    my $ottale      = B<0>52;
    my $esadecimale = B<0x>20;

=end programlisting

X<numeri; prefissi delle rappresentazioni>
X<C<0b>>
X<C<0>>
X<C<0x>>

I caratteri in grassetto sono i prefissi numerici rispettivamente per le notazioni binaria, ottale
ed esadecimale. Ricordate che uno zero iniziale in un intero indica I<sempre>
la forma ottale.

X<numeri; separatore underscore>
X<underscore>

=begin tip Quando 1.99 + 1.99 fa 4

Anche se in Perl 5 potete scrivere esplicitamente valori a virgola mobile
perfettamente accurati, Perl 5 li memorizza internamente in forma binaria. Questa
rappresentazione a volte è causa di specifiche imprecisioni; consultate C<perldoc
perlnumber> per maggiori dettagli.

=end tip

Non potete usare delle virgole per separare le migliaia nei letterali numerici, dato che
il parser interpreta le virgole come operatori. Usate invece gli underscore.
Il parser li tratterà come caratteri invisibili; per chi legge il codice
invece non lo sono. Queste istruzioni sono equivalenti:

=begin programlisting

    my $miliardo = 1000000000;
    my $miliardo = 1_000_000_000;
    my $miliardo = 10_0_00_00_0_0_0;

=end programlisting

Considerate qual è l'alternativa più leggibile.

X<C<Scalar::Util>>
X<C<looks_like_number()>>

Grazie alla coercizione (L<coercion>), raramente i programmatori Perl devono preoccuparsi di
convertire in numeri un testo letto dall'esterno del programma. Perl tratta
tutto ciò che sembra un numero I<come> un numero in contesto numerico. Nelle
rare occasioni in cui volete sapere se qualcosa sembra un numero al
Perl, usate la funzione C<looks_like_number> del modulo core
C<Scalar::Util>. Questa funzione restituisce il valore vero se Perl considera
come numerico l'argomento passato.

X<C<Regexp::Common>>

Il modulo CPAN C<Regexp::Common> fornisce molte espressioni regolari ben testate
per identificare I<tipi> validi più specifici di valori numerici (numero naturale, intero,
a virgola mobile).

=head2 Undef

X<C<undef>>

Il valore C<undef> del Perl 5 rappresenta un valore non assegnato, indefinito e sconosciuto.
Le variabili scalari dichiarate ma non definite contengono C<undef>:

=begin programlisting

    my $nome = undef;   # assegnamento superfluo
    my $rango;          # contiene anche undef

=end programlisting

X<C<undef>; coercizioni>

In contesto booleano, C<undef> viene valutato come falso. Valutare C<undef> in contesto stringa
--ad esempio interpolarlo in una stringa--causa un warning di C<uninitialized value>:

=begin programlisting

    my $non_definito;
    my $definito = $non_definito . '... e così via';

=end programlisting

... produce:

=begin screen

    Use of uninitialized value $non_definito in
    concatenation (.) or string...

=end screen

X<predefinite; funzioni; C<defined>>

La funzione nativa C<defined> restituisce vero se il suo operando viene valutato come valore
definito (ovvero qualunque cosa tranne C<undef>):

=begin programlisting

    my $stato = 'ho il raffreddore';

    say B<defined> $stato;  # 1, che rappresenta il valore vero
    say B<defined> undef;   # stringa vuota; un valore falso

=end programlisting

=head2 La Lista Vuota

X<lista vuota>
X<C<()>; lista vuota>

Quando compare a destra in un assegnamento, il costrutto C<()>
rappresenta una lista vuota. In contesto scalare, viene valutato come C<undef>. In
contesto lista, è semplicemente una lista vuota. Quando invece compare a sinistra in un assegnamento,
il costrutto C<()> impone il contesto lista. Per contare il numero di
elementi restituiti da una espressione in contesto lista senza usare una variabile
temporanea, usate l'idioma (L<idioms>):

=begin programlisting

    my $conteggio = B<()> = tutti_i_miei_cappelli();

=end programlisting

Dato che l'operatore di assegnamento è associativo a destra (L<associativity>),
Perl valuta per primo il secondo assegnamento chiamando
C<tutti_i_miei_cappelli()> in contesto lista. Questa chiamata restituisce una lista.

L'assegnamento alla lista vuota fa perdere tutti i valori della lista, ma
tale assegnamento ha luogo in contesto scalare, che valuta il numero di
elementi nella parte destra dell'assegnamento. Di conseguenza, C<$conteggio> contiene
il numero di elementi nella lista restituita da C<tutti_i_miei_cappelli()>.

Se per il momento trovate questo concetto un po' confuso, non preoccupatevi. Man mano che capirete come
le funzionalità di progetto fondamentali del Perl si incastrano tra loro nella pratica, tutto diventerà
più chiaro.

=head2 Liste

X<liste>

Una lista è un gruppo di una o più espressioni separate dalla virgola. Le liste possono comparire
letteralmente nel codice sorgente come valori:

=begin programlisting

    my @primi_fib = (1, 1, 2, 3, 5, 8, 13, 21);

=end programlisting

... come target di un assegnamento:

=begin programlisting

    my ($package, $nomefile, $linea) = chiamante();

=end programlisting

... o come liste di espressioni:

=begin programlisting

    say nome(), ' => ', anni();

=end programlisting

Non sono le parentesi tonde che I<creano> una lista. È la virgola che la crea. Dove
sono presenti in questi esempi, le parentesi raggruppano espressioni per modificarne la
I<precedenza> (L<precedence>).

X<operatori; intervallo>
X<operatori; C<..>>
X<C<..>; operatore di intervallo>

Usate l'operatore di intervallo per creare liste di letterali in forma compatta:

=begin programlisting

    my @caratteri = 'a' .. 'z';
    my @contatore = 13 .. 27;

=end programlisting

X<operatori; C<qw()>>
X<C<qw()>; operatore di quotatura parole>

Usate l'operatore C<qw()> per spezzare un letterale stringa con i caratteri di spaziatura e produrre una
lista di stringhe:

=begin programlisting

    my @stooges = qw( Larry Curly Moe Shemp Joey Kenny );

=end programlisting

=begin tip Nessun Commento per Favore

Perl genera un warning se C<qw()> contiene una virgola o il carattere di commento
(C<#>), perché non solo tali caratteri sono rari in un C<qw()>, ma la loro presenza
indica normalmente una svista.

=end tip

Le liste possono occorrere (e spesso lo fanno) come risultati di espressioni, ma queste liste
non compaiono letteralmente nel codice sorgente.

Le liste e gli array non sono interscambiabili in Perl. Le liste sono valori. Gli array sono
contenitori. Potete memorizzare una lista in un array e potete forzare la conversione di un array in una
lista, ma essi restano entità separate. Per esempio, l'indicizzazione di una lista occorre sempre
in contesto lista. L'indicizzazione di un array può occorrere sia in contesto scalare (per
un singolo elemento) che in contesto lista (per una slice):

=begin programlisting

    # non preoccupatevi dei dettagli per ora
    sub contesto
    {
        my $contesto = wantarray();

        say defined $contesto
             ? $contesto
                 ? 'lista'
                 : 'scalare'
             : 'void';
        return 0;
    }

    my @slice_di_lista  = (1, 2, 3)[contesto()];
    my @slice_di_array  = @slice_di_lista[contesto()];
    my $indice_di_array = $slice_di_array[contesto()];

    say contesto(); # contesto lista
    contesto();     # contesto void

=end programlisting
