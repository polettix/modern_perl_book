=head1 Direttive

Z<pragmas>

X<direttive>
X<moduli; direttive>

Molte delle estensioni di Perl 5 sono moduli che forniscono nuove funzioni o definiscono
classi (L<moose>). Alcuni moduli, invece, come C<strict> e C<warnings>, influenzano il comportamento
del linguaggio stesso. Tali moduli sono detti I<direttive>. Per
convenzione, le direttive hanno nomi con soli caratteri minuscoli per differenziarli dagli altri
moduli.

=head2 Direttive e Scope

X<direttive; scope>

Il funzionamento delle direttive consiste nell'esportare comportamenti o informazioni specifiche nello scope lessicale
dei loro chiamanti. Così come dichiarare una variabile lessicale rende disponibile in uno scope
il nome di un simbolo, usare una direttiva attiva il suo comportamento in un certo scope:

=begin programlisting

    {
        # $lessicale B<non> e` visibile; strict B<non> e` attiva
        {
            use strict;
            my $lessicale = 'disponibile qui';
            # $lessicale B<e`> visibile; strict B<e`> attiva
            ...
        }
        # $lessicale e` di nuovo invisible; strict B<non> e` attiva
    }

=end programlisting

Inoltre, così come le dichiarazioni lessicali interessano anche gli scope più interni, le dichiarazioni rimangono attive
in tali scope:

=begin programlisting

    # scope di file
    use strict;

    {
        # scope interno, dove strict continua a essere attivo
        my $interno = 'un altro lessicale';
        ...
    }

=end programlisting

=head2 Uso delle Direttive

X<direttive; attivazione>

Fate la C<use> di una direttiva come fareste con qualunque altro modulo. Le direttive possono ricevere argomenti, ad esempio
un numero minimo di versione accettabile e una lista di argomenti per modificarne il comportamento:

=begin programlisting

    # richiede la dichiarazione delle variabili e proibisce le bareword
    use strict qw( subs vars );

=end programlisting

X<direttive; disattivazione>
X<predefinite; funzioni; C<no>>

Talvolta vi servirà I<disattivare> del tutto o in parte gli effetti di una direttiva in uno
scope lessicale annidato. L'istruzione predefinita C<no> annulla un'importazione (L<importing>),
il che disattiva gli effetti di una direttiva se essa si conforma alle regole. Per esempio, se volete disattivare la
protezione di C<strict> quando dovete manipolare direttamente dei simboli:

=begin programlisting

    use Modern::Perl;
    # oppure use strict;

    {
        no strict 'refs';
        # manipolazione della tabella dei simboli
    }

=end programlisting

=head2 Direttive Utili

X<predefinite; variabili globali; C<$^H>>
X<direttive; scrittura>

In Perl 5.10.0 è stata aggiunta la possibilità di scrivere le proprie direttive lessicali in puro codice Perl.
C<perldoc perlpragma> vi spiega come fare e la descrizione di
C<$^H> in C<perldoc perlvar> vi spiega il suo funzionamento.

X<direttive; direttive predefinite utili>

Già prima della versione 5.10, Perl 5 includeva svariate direttive predefinite utili:

X<direttive; C<strict>>

=over 4

=item * la direttiva C<strict> attiva il controllo durante la compilazione dei riferimenti simbolici, dell'uso di bareword e
della dichiarazione di variabili.

X<direttive; C<warnings>>

=item * la direttiva C<warnings> attiva l'emissione di warning per comportamenti deprecati,
inappropriati o confusi del codice.

X<direttive; C<utf8>>

=item * la direttiva C<utf8> forza il parser a interpretare il codice sorgente con la codifica
UTF-8.

X<direttive; C<autodie>>

=item * la direttiva C<autodie> attiva il controllo automatico degli errori nelle chiamate alle funzioni di sistema e
predefinite.

X<direttive; C<constant>>

=item * la direttiva C<constant> vi permette di creare valori costanti durante la
compilazione (vedete il modulo CPAN C<Const::Fast> per un'alternativa).

X<direttive; C<vars>>

=item * la direttiva C<vars> vi permette di dichiarare variabili globali di package, come
C<$VERSION> e C<@ISA> (L<blessed_references>).

X<direttive; C<feature>>

=item * la direttiva C<feature> vi permette di attivare e disattivare singolarmente le 
funzionalità post-5.10. La direttiva C<use feature ':5.14';> è equivalente a C<use 5.14;>, ovvero attiva tutte le funzionalità di Perl
5.14 più la direttiva C<strict>. Questa direttiva è più utile per I<disattivare> singolarmente delle funzionalità in uno scope
lessicale.

X<direttive; C<less>>

=item * la direttiva C<less> illustra come scrivere una direttiva.

=back

CPAN ha iniziato a raccogliere delle direttive non predefinite:

X<CPAN; C<autobox>>
X<CPAN; C<perl5i>>
X<CPAN; C<autovivification>>
X<CPAN; C<indirect>>

=over 4

=item * C<autobox> attiva un comportamento ad oggetti per i tipi predefiniti di Perl 5
(scalari, riferimenti, array e hash).

=item * C<perl5i> combina e attiva numerose estensioni sperimentali del linguaggio
in un tutto coerente.

=item * C<autovivification> disattiva l'autovivificazione (L<autovivification>)

=item * C<indirect> previene l'uso dell'invocazione indiretta
(L<indirect_objects>)

=back

Attualmente, questi strumenti non sono molto usati. Gli ultimi due vi aiutano a scrivere codice
più corretto, mentre coi primi due vale la pena di fare degli esperimenti all'interno di piccoli
progetti. Essi rappresentano delle interessanti potenzialità di Perl 5.
