=head1 Eccezioni

Z<exceptions>
X<eccezioni>

Programmare bene significa anticipare le situazioni impreviste. File che dovrebbero esistere
e non ci sono. Un hard disk enorme che non dovrebbe mai riempirsi ma lo fa. La connessione di rete che
dovrebbe sempre essere disponibile ma non lo è. Un database infallibile che fallisce. Le cose eccezionali succedono e un software robusto
dovrebbe saperle gestire. Se potete ripristinare il funzionamento, è un'ottima cosa! Ma se non potete, fate almeno il logging delle
informazioni rilevanti e riprovate.

Perl 5 gestisce le situazioni eccezionali attraverso le I<eccezioni>: un
meccanismo di controllo di flusso con scope dinamico progettato per segnalare e gestire gli errori.

=head2 Sollevare Eccezioni

Z<throwing_exceptions>

Supponete di voler scrivere su un file di log. Se non riuscite ad aprire tale file, qualcosa sta andando
storto. Usate C<die> per sollevare un'eccezione:

=begin programlisting

    sub apri_file_log
    {
        my $nome = shift;
        open my $fh, '>>', $nome
            B<or die "Apertura del file di log '$nome' non riuscita: $!";>
        return $fh;
    }

=end programlisting

X<predefinite; funzioni; C<die>>
X<eccezioni; sollevare>
X<eccezioni; sollevare con stringhe>
X<eccezioni; C<die>>
X<C<$@>>
X<eccezioni; C<$@>>

C<die()> imposta il valore della variabile globale C<$@> a quello del proprio operando ed esce immediatamente
dalla funzione corrente I<senza restituire nulla>. L'eccezione sollevata continua
il suo percorso nello stack di chiamate (L<controlled_execution>) finchè incontra del codice che la
cattura. Se nessuna chiamata cattura l'eccezione, il programma termina con un errore.

La gestione delle eccezioni adotta lo scope dinamico (L<dynamic_scope>) come i simboli C<local>.

=head2 Catturare Eccezioni

Z<catching_exceptions>

X<eccezioni; cattura>

Talvolta è utile che un'eccezione faccia terminare il programma. Un programma eseguito come processo
temporizzato potrebbe sollevare un'eccezione quando i log di errore sono pieni, in modo che venga
inviato un SMS agli amministratori. Tuttavia non tutte le eccezioni dovrebbero essere fatali. I programmi
ben scritti talvolta riescono a ripristinare il funzionamento o almeno a salvare il proprio stato e terminare in modo controllato.

X<predefinite; funzioni; C<eval>>
X<C<eval>; blocco>

Usate la forma a blocco dell'operatore C<eval> per catturare un'eccezione:

=begin programlisting

    # l'apertura del file di log potrebbe fallire
    my $fh = eval { apri_file_log( 'paperopoli.log' ) };

=end programlisting

Se l'apertura del file ha successo, C<$fh> conterrà il filehandle. Se fallisce,
C<$fh> resta non definito, e il flusso del programma continua.

Il blocco passato come argomento a C<eval> introduce un nuovo scope, sia lessicale che dinamico.
Se C<apri_file_log()> chiamasse altre funzioni e una di queste lanciasse
un'eccezione, questo C<eval> la catturerebbe.

X<predefinite; variabili globali; C<$@>>

Un gestore di eccezioni dev'essere uno strumento generico, dato che potrebbe catturare tutte le eccezioni nel
suo scope dinamico. Per capire quale eccezione è stata catturata (e anzitutto se c'è stata un'eccezione)
controllate il valore di C<$@>. Ricordatevi di C<local>izzare C<$@>
prima di tentare di catturare un'eccezione, dato che C<$@> è una variabile
globale:

=begin programlisting

    B<local $@;>

    # l'apertura del file di log potrebbe fallire
    my $fh = eval { apri_file_log( 'paperopoli.log' ) };

    # eccezione catturata
    B<if (my $eccezione = $@) { ... }>

=end programlisting

X<eccezioni; rilanciare>

Copiate immediatamente C<$@> in una variabile lessicale per evitare che il codice eseguito
successivamente possa sovrascrivere la variabile globale C<$@>. Non potete sapere se da qualche parte c'è un blocco C<eval>
che può reimpostare C<$@>.

Solitamente C<$@> contiene una stringa che descrive l'eccezione. Ispezionatene il contenuto
per capire se potete gestire l'eccezione:

=begin programlisting

    if (my $eccezione = $@)
    {
        die $eccezione
            unless $eccezione =~ /^Il file di log non puo' essere aperto/;
        $fh = log_su_syslog();
    }

=end programlisting

Rilanciate un'eccezione chiamando di nuovo C<die()>. Passatele l'eccezione corrente oppure
una nuova eccezione a seconda delle vostre esigenze.

X<eccezioni; sollevare con oggetti>

Applicare delle espressioni regolari a eccezioni stringa è poco robusto, dato che i messaggi
d'errore possono cambiare nel tempo. Questo vale anche per le eccezioni predefinite sollevate dallo
stesso Perl. Per fortuna, potete anche passare a C<die> un riferimento--e perfino un riferimento
blessed. Ciò vi permette di fornire molte più informazioni nella vostra
eccezione: numeri di linea, file e altre informazioni di debug. Ottenere
queste informazioni da un'entità strutturata è molto più facile che estrarle interpretando
una stringa. Catturate queste eccezioni come fareste con qualunque altra eccezione.

X<eccezioni; classi personalizzate con C<Exception::Class>>
X<C<Exception::Class>>

La distribuzione CPAN C<Exception::Class> facilita la creazione e l'uso di oggetti eccezione:

=begin programlisting

    package Zoo::Eccezioni
    {
        use Exception::Class
            'Zoo::AnimaleFuggito',
            'Zoo::GestoreFuggito';
    }

    sub gabbia_aperta
    {
        my $self = shift;
        Zoo::AnimaleFuggito->throw
            unless $self->contiene_animale;
        ...
    }

    sub ufficio_aperto
    {
        my $self = shift;
        Zoo::GestoreFuggito->throw
            unless $self->contiene_gestore;
        ...
    }

=end programlisting

=head2 Avvertenze sulle Eccezioni

Z<exception_caveats>

X<eccezioni; avvertenze>

Mentre sollevare eccezioni è relativamente semplice, catturarle lo è di meno.
Usare C<$@> correttamente vi richiede di scansare svariati rischi piuttosto insidiosi:

=over 4

=item * Un uso non C<local>izzato della variabile C<$@> all'interno dello scope dinamico potrebbe modificarla

=item * C<$@> potrebbe contenere un oggetto che sovrascrive il proprio valore booleano in modo da restituire falso

=item * Un gestore di segnali (specialmente il gestore del segnale C<DIE>) potrebbe modificare C<$@>

=item * La distruzione di un oggetto durante l'uscita da uno scope potrebbe chiamare C<eval> e
cambiare C<$@>

=back

X<eccezioni; gestione sicura con C<Try::Tiny>>
X<C<Try::Tiny>>

Alcuni di questi problemi sono stati risolti in Perl 5.14. Se da una parte essi si presentano molto raramente, dall'altra
sono spesso difficili da diagnosticare e risolvere. La distribuzione CPAN C<Try::Tiny>
migliora l'affidabilità I<e> la sintassi della gestione di eccezioni N<In effetti,
C<Try::Tiny> è stato di ispirazione per le migliorie alla gestione delle eccezioni
in Perl 5.14.>.

C<Try::Tiny> è facile da usare:

=begin programlisting

    use Try::Tiny;

    my $fh = try   { apri_file_log( 'paperopoli.log' ) }
             catch { log_eccezione( $_ ) };

=end programlisting

C<try> sostituisce C<eval>. Il blocco opzionale C<catch> viene eseguito solo quando C<try>
cattura un'eccezione. C<catch> riceve l'espressione catturata nella variabile
topic C<$_>.

=head2 Eccezioni Predefinite

Z<builtin_exceptions>

X<eccezioni; predefinite>

Perl 5 può sollevare svariate eccezioni. C<perldoc perldiag> elenca
numerosi "errori fatali intercettabili". Mentre alcuni di essi sono errori di sintassi sollevati durante
il processo di compilazione, altri possono essere catturati durante l'esecuzione. Quelli di
maggiore interesse sono:

=over 4

=item * Usare una chiave non permessa in un hash bloccato (L<locked_hashes>)

=item * Fare il bless di un'entità che non sia un riferimento (L<blessed_references>)

=item * Chiamare un metodo su un invocante non valido (L<moose>)

=item * Non riuscire a trovare un metodo con un certo nome nell'invocante

=item * Usare un valore tainted in modo scorretto (L<taint>)

=item * Modificare un valore di sola lettura

=item * Effettuare un'operazione non valida su un riferimento (L<references>)

=back

X<C<autodie>>

Naturalmente, potete anche catturare le eccezioni prodotte da C<autodie> (L<autodie>) e
i warning lessicali promossi a eccezioni (L<registering_warnings>).
