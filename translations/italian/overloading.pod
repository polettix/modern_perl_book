=head1 Overloading

Z<overloading>
X<overloading>

Perl 5 non è un linguaggio orientato agli oggetti in modo pervasivo. I suoi tipi di dati predefiniti
(scalari, array e hash) non sono oggetti con metodi di cui si può fare l'overload, ma
I<potete> controllare il comportamento delle vostre classi e oggetti, specialmente
quando ne fate la coercizione o la valutazione contestuale, con l'I<overloading>.

L'utilità dell'overloading è sottile, ma potente.  Un esempio interessante è l'overloading
del comportamento di un oggetto in contesto booleano, specialmente quando usate una tecnica come
il pattern dell'Oggetto Nullo (U<http://www.c2.com/cgi/wiki?NullObject>). In contesto booleano
, un oggetto valuta a vero, a meno che facciate l'overload
della sua conversione a booleano.

Potete fare l'overload del comportamento dell'oggetto per quasi tutte le operazioni e le coercizioni:
conversione a stringa, numero e booeano, iterazione, invocazione, accesso ad array,
accesso ad hash, operazioni aritmetiche, operatori di confronto, match intelligente,
operazioni bit-a-bit e persino assignmenti. La conversione a stringa, numero e booeano
sono i casi più importanti e di uso più comune.

=head2 Overloading di Operazioni Comuni

X<overloading; booleano>
X<overloading; numerico>
X<overloading; stringa>
X<direttiva C<overload>>
X<direttive; C<overload>>

La direttiva C<overload> vi permette di associare una funzione a un'operazione di
cui potete fare l'overload passando delle coppie di argomenti, in cui la chiave è il tipo di
overload e il valore è un riferimento alla funzione da chiamare per effettuare l'operazione. Una
classe C<Nullo> che fa l'overload della valutazione booleana in modo che restituisca sempre
un valore falso potrebbe essere definita come segue:

=begin programlisting

    package Nullo
    {
        use overload 'bool' => sub { 0 };

        ...
    }

=end programlisting

A questo punto è facile aggiungere la conversione a stringa:

=begin programlisting

    package Nullo
    {
        use overload
            'bool' => sub { 0 },
            B<< '""'   => sub { '(null)' }; >>
    }

=end programlisting

Fare l'overload della conversione a numero è più complesso, perché gli operatori binari sono genralmente
binari (L<arity>). Dati due operandi di cui si è fatto l'overload dei metodi per l'addizione,
quale dei due ha la precedenza? La risposta deve essere coerente, facile da
illustrare e comprensibile anche alle persone che non hanno letto il codice sorgente
dell'implementazione.

C<perldoc overload> tenta di spiegare questo aspetto nelle sezioni I<Calling
Conventions for Binary Operations> e I<MAGIC AUTOGENERATION>, ma la soluzione
più semplice consiste nel fare l'overload della conversione a numero (denotata con C<'0+'>) e specificare a C<overload> di
usare altri overload come ripiego ogni volta che è possibile:

=begin programlisting

    package Nullo
    {
        use overload
            'bool'   => sub { 0 },
            '""'     => sub { '(null)' },
            B<< '0+'     => sub { 0 }, >>
            B<< fallback => 1; >>
    }

=end programlisting

QUando impostate C<fallback> a un valore vero, Perl utilizzerà, se possibile, un qualunque altro overload definito
per comporre l'operazione richiesta.  Se non è possibile, Perl
si comporterà come se non ci fossero degli overload attivi, il che è spesso ciò che desiderate.

Senza C<fallback>, Perl userà soltanto gli overload specifici che avete
fornito.  Se qualcuno tenta di eseguire un'operazione di cui non avete fatto l'overload
viene sollevata un'eccezione.

=head2 Overload e Ereditarietà

X<overloading; ereditarietà>

Le classi derivate ereditano gli overload dalle proprie superclassi. Possono ridefinire questo
comportamento in due modi.  Se la superclasse usa l'overloading come illustrato sopra,
fornendo direttamente dei riferimenti a funzione, la classe derivata I<deve> ridefinire il comportamento
di overload della superclasse usando direttamente C<overload>.

Le superclassi possono fornire alle classi discendenti maggiore flessibilità specificando il
I<nome> di un metodo da chiamare per implementare l'overloading, anziché
condificare direttamente un riferimento a funzione:

=begin programlisting

    package Nullo
    {
        use overload
            'bool'   => 'conv_bool',
            '""'     => 'conv_stringa',
            '0+'     => 'conv_num',
            fallback => 1;
    }

=end programlisting

In questo caso, ciascuna classe derivata può effettuare in modo diverso le operazioni coinvolte nell'overload
sovrascrivendo i metodi con nome appropriati.

=head2 Usi dell'Overloading

X<CPAN; C<IO::All>>

Potete essere tentati di usare l'overloading come strumento per definire delle abbreviazioni simboliche
per nuove operazioni, ma raramente ci sono buone ragioni per farlo in Perl 5. La distribuzione CPAN C<IO::All>
sfrutta questa idea al limite per produrre idee intelligenti di scrittura di codice
conciso e componibile. Tuttavia, per ogni API raffinata con un brillante uso dell'overloading,
 ne vengono create una dozzina che sono invece dei pasticci.  Talvolta il
miglior codice evita gli eccessi di ingegno in favore della semplicità.

Ridefinire l' addizione, la moltiplicazione anche la concatenazione su una classe C<Matrice>
ha senso, perché la notazione esistente per tali operazioni è
molto diffusa.  Il dominio di un nuovo problema per cui non esista una notazione consolidata non è un
buon candidato per l'overloading, come non lo è il domnio di un problema per cui dovete fare salti mortali per
travare le corrsipondenze tra gli operatori esistenti in Perl e una diversa notazione.

I<Perl Best Practices> di Damian Conway suggerisce un altro uso dell'overloading, per
prevenire l'abuso accidentale di oggetti.  Per esempio, fare l'overloading
della conversione a numero in modo da invocare C<croak()> per gli oggetti che non hanno un'unica rappresentazione numerica
ragionevole può aiutarvi a trovare e risolvere bug.
