=head1 Variabili Globali

Z<globals>

X<variabili sovraglobali>
X<variabili; sovraglobali>

Perl 5 fornisce svariate I<variabili sovraglobali> (che corrispondono alle I<variabili globali predefinite>) il cui scope è realmente globale e non
limitato a un package o a un file. Sfortunatamente,
la loro accessibilità globale significa anche che ogni modifica diretta o indiretta dei loro valori
può avere effetti su altre parti del programma; inoltre, i loro nomi sono alquanto criptici.
Anche i programmatori Perl 5 esperti generalmente ne conoscono a memoria solo alcune, e ben poche persone
le conoscono tutte. D'altra parte, solo un piccolo sottoinsieme di queste variabili può davvero esservi utile.
La loro lista esaustiva è contenuta in C<perldoc perlvar>.

=head2 Gestire le Variabili Sovraglobali

X<variabili sovraglobali; gestione>
X<predefinite; funzioni; C<local>>

Le nuove versioni di Perl 5 continano a convertire dei comportamenti globali in comportamenti lessicali; grazie a ciò,
è possibile evitare di usare molte di queste variabili sovraglobali. Quando però non potete evitarle, usate C<local> nello scope
più ristretto possibile per limitare gli effetti delle vostre modifiche. In questo modo, anche se il vostro codice rimane
esposto ai cambiamenti effettuati su tali variabili dal codice che I<chiamate>,
evitate almeno possibili sorprese da parte del codice I<esterno> al vostro scope. Come illustrato
dall'idioma dello slurp semplificato di file (L<easy_file_slurping>), C<local> è spesso l'approccio
giusto:

=begin programlisting

    my $file; { B<local $/>; $file = <$fh> };

=end programlisting

L'effetto della C<local>izzazione di C<$/> dura soltanto fino alla fine del blocco.
E ci sono poche possibilità che la lettura di linee da un filehandle provochi l'esecuzione di codice Perl
N<Un filehandle tied (L<tie>) è una di queste possibilità.> che modifica il valore di C<$/> all'interno del blocco C<do>.

Non tutti i casi di utilizzo delle variabili sovraglobali sono così facili da trattare, ma spesso questo approccio
funziona.

X<C<eval>>
X<eccezioni; catturare>
X<eccezioni; C<$@>>

Talvolta potete aver bisogno di I<leggere> il valore di una variabile sovraglobale, sperando che nel frattempo
esso non sia stato modificato da altro codice. Catturare eccezioni con un blocco C<eval> può dar luogo
a problemi di concorrenza, dato che i metodi C<DESTROY()> invocati sui
lessicali dello scope da cui il programma è appena uscito potrebbero cancellare il valore di C<$@>:

=begin programlisting

    local $@;

    eval { ... };

    if (B<my $eccezione = $@>) { ... }

=end programlisting

Copiate C<$@> I<immediatamente> dopo aver catturato un'eccezione per preservare il suo contenuto.
In alternativa, vedete C<Try::Tiny> (L<exception_caveats>).

=head2 Nomi in Inglese

X<C<English>>

Il modulo C<English> distribuito con Perl fornisce dei nomi verbosi per le variabili sovraglobali al posto di quelli composti di punteggiatura. Potete importarli in un namespace con:

=begin programlisting

    use English '-no_match_vars';

=end programlisting

In questo modo potete usare i nomi verbosi documentati in C<perldoc perlvar>
all'interno dello scope della direttiva.

X<C<$&>>
X<predefinite; variabili globali; C<$&>>
X<C<$`>>
X<predefinite; variabili globali; C<$`>>
X<C<$'>>
X<predefinite; variabili globali; C<$'>>

Tre variabili sovraglobali relative alle regex (C<$&>, C<$`> e C<$'>) impongono una penalità
all'efficienza che si applica globalmente a I<le> espressioni regolari di un programma.  Se
dimenticate di importare C<-no_match_vars>, il vostro programma pagherà la penalità anche
se non leggete esplicitamente da tali variabili.

I programmi in Perl moderno dovrebbero usare la variabile C<@-> come sostituta di questo terribile
terzetto di variabili.

=head2 Variabili Sovraglobali Utili

X<variabili sovraglobali; utili>

Molti programmi in Perl 5 moderno possono cavarsela usando solo un paio delle variabili
sovraglobali. Probabilmente, incontrerete solo alcune di queste variabili nei programmi reali.

X<C<$/>>
X<predefinite; variabili globali; C<$/>>
X<C<$INPUT_RECORD_SEPARATOR>>
X<predefinite; variabili globali; C<$INPUT_RECORD_SEPARATOR>>
X<C<readline>>

=over 4

=item * C<$/> (C<$INPUT_RECORD_SEPARATOR> con la direttiva C<English>) è una
stringa di zero o più caratteri che denota la fine di un record durante la
lettura linea per linea dell'input. Per default, essa contiene la sequenza di caratteri di a capo
specifici per la vostra piattaforma. Se la impostate al valore non definito, Perl tenterà di
leggere l'intero file in memoria. Se la impostate ad un I<riferimento> a numero
intero, Perl tenterà di leggere un numero corrispondente di I<byte> per ciascun record (tenete quindi presenti
le caratteristiche di Unicode). Se la impostate a stringa vuota (C<''>), Perl leggerà
un paragrafo per volta, dove per paragrafo si intende un blocco di testo seguito da un
numero arbitrario di caratteri di a capo.

X<C<$.>>
X<predefinite; variabili globali; C<$.>>
X<C<$INPUT_LINE_NUMBER>>
X<predefinite; variabili globali; C<$INPUT_LINE_NUMBER>>

=item * C<$.> (C<$INPUT_LINE_NUMBER>) contiene il numero di record letti dal
filehandle usato più di recente. Potete leggere questa variabile, ma
tentare di modificarla non ha effetto. Localizzando questa variabile localizzerete il
filehandle a cui si riferisce.

X<C<$|>>
X<predefinite; variabili globali; C<$|>>
X<C<$OUTPUT_AUTOFLUSH>>
X<predefinite; variabili globali; C<$OUTPUT_AUTOFLUSH>>

=item * C<$|> (C<$OUTPUT_AUTOFLUSH>) determina se Perl deve fare il flush immediato di
tutto ciò che viene scritto sul filehandle selezionato corrente, oppure se deve attendere
che il buffer sia pieno. L'output che non fa uso di buffer è utile quando scrivete su una pipe, un socket o
un terminale che non devono bloccarsi in attesa del vostro input. Qualunque valore assegnate a questa variabile
verrà convertito in un booleano.

X<C<@ARGV>>
X<predefinite; variabili globali; C<@ARGV>>

=item * C<@ARGV> contiene gli argomenti pasati al programma da linea di comando.

X<C<$!>>
X<predefinite; variabili globali; C<$!>>
X<C<$ERRNO>>
X<predefinite; variabili globali; C<$ERRNO>>

=item * C<$!> (C<$ERRNO>) è una variabile doppia (L<dualvars>) contenente il risultato
della chiamata di sistema I<più recente>. In contesto numerico, essa corrisponde alla variabile C
C<errno>, per la quale ogni valore diverso da zero indica un errore.  In contesto
stringa, essa valuta al messaggio d'errore di sistema appropriato. Localizzate questa
variabile prima di effettuare una chiamata di sistema (implicita o esplicita) per evitare
di sovrascriverne il valore prima che possa essere utilizzato da altre parti di codice. Dato che molte chiamate di sistema
vengono effettuate dallo stesso Perl 5 senza che ne siate consapevoli, il valore di questa
variabile può essere modificato sotto il vostro naso. Copiatelo I<immediatamente> dopo aver causato una
chiamata di sistema per avere un risultato che sia il più accurato possibile.

X<C<$">>
X<predefinite; variabili globali; C<$">>
X<C<$LIST_SEPARATOR>>
X<predefinite; variabili globali; C<$LIST_SEPARATOR>>

=item * C<$"> (C<$LIST_SEPARATOR>) è una stringa usata per separare gli elementi di array e liste
quando vengono interpolati all'interno di una stringa.

X<C<%+>>
X<predefinite; variabili globali; C<%+>>

=item * C<%+> contiene le catture con nome derivanti da un match riuscito di una espressione
regolare (L<named_captures>).

X<C<$@>>
X<predefinite; variabili globali; C<$@>>
X<C<$EVAL_ERROR>>
X<predefinite; variabili globali; C<$EVAL_ERROR>>

=item * C<$@> (C<$EVAL_ERROR>) contiene il valore lanciato dall'eccezione
più recente (L<catching_exceptions>).

X<C<$0>>
X<predefinite; variabili globali; C<$0>>
X<C<$PROGRAM_NAME>>
X<predefinite; variabili globali; C<$PROGRAM_NAME>>

=item * C<$0> (C<$PROGRAM_NAME>) contiene il nome del programma in
esecuzione. Su alcune piattaforme Unix-like potete modificare tale valore per cambiare
il nome del programma così come appare ad altri programmi nel sistema, come
C<ps> e C<top>.

X<C<$$>>
X<predefinite; variabili globali; C<$$>>
X<C<$PID>>
X<predefinite; variabili globali; C<$PID>>

=item * C<$$> (C<$PID>) contiene l'id del processo dell'istanza in esecuzione
del programma, dal punto di vista del sistema operativo. Tale id
sarà diverso tra programmi eseguiti in seguito a una C<fork()> e I<potrebbe> variare anche tra thread dello stesso
programma.

X<C<@INC>>
X<predefinite; variabili globali; C<@INC>>

=item * C<@INC> contiene una lista di path del filesystem nei quali Perl cerca i file
da caricare con C<use> e C<require>. Vedete C<perldoc -f require> per una descrizione di
altri dati che potrebbero essere contenuti in questo array.

X<C<%SIG>>
X<predefinite; variabili globali; C<%SIG>>

=item * C<%SIG> mappa i segnali del SO e i segnali di basso livello di Perl su riferimenti alla funzioni
usate per gestire tali segnali. Per esempio, potete intercettare l'interrupt standard Ctrl-C catturando
il segnale C<INT>. Vedete C<perldoc perlipc> per maggiori informazioni
sui segnali e specialmente sui segnali sicuri.

=back

=head2 Alternative alle Variabili Sovraglobali

X<variabili sovraglobali; alternative>
X<C<Try::Tiny>>

Le maggiori responsabilità di azioni a distanza ricadono sull'IO e sulle condizioni
eccezionali. Usare C<Try::Tiny> (L<exception_caveats>) vi aiuta a isolarvi
dalla complicata semantica della gestione corretta delle eccezioni. C<local>izzare e
copiare il valore di C<$!> può aiutarvi a evitare comportamenti strani quando Perl effettua
chiamate implicite di sistema. Usare C<IO::File> e i suoi metodi sui filehandle lessicali
(L<file_handling_variables>) vi aiuta a prevenire modifiche globali indesiderate al comportamento
dell'IO.
