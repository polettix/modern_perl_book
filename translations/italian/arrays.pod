=head1 Array

Z<arrays>

X<array>
X<sigillo C<@>>
X<sigilli; C<@>>

Gli I<array> del Perl 5 sono una struttura dati di I<prima classe>--il linguaggio li supporta
come tipo di dati nativo--che memorizza zero o più scalari. Potete accedere
a singoli membri dell'array con defli indici interi, e potete aggiungere o rimuovere
elementi a piacere. Il sigillo C<@> denota un array. Per dichiarare un array, scrivete:

=begin programlisting

    my @elementi;

=end programlisting

=head2 Elementi di un Array

X<sigilli; variante>
X<C<$>; sigillo>
X<sigilli; C<$>>

I<Accedere> a un singolo elemento di un array in Perl 5 richiede il sigillo
scalare. C<$gatti[0]> è un uso non ambiguo dell'array C<@gatti>, dato che
le parentesi quadre (C<[]>) postfisse (L<fixity>) indicano sempre un accesso indicizzato a un array.

Il primo elemento di un array ha indice zero:

=begin programlisting

    # @gatti contiene una lista di oggetti Gatto
    my $primo_gatto = $gatti[0];

=end programlisting

L'ultimo indice di un array dipende dal numero di elementi nell'array. In contesto
scalare (indotto da un assegnamento scalare, una concatenzaione di stringhe,
un'addizione o un contesto booleano), un array valuta al numero di elementi nell'array:

=begin programlisting

    # assegnamento scalare
    my $numero_gatti = @gatti;

    # concatenazione di stringhe
    say 'Ho ' . @gatti . ' gatti!';

    # addizione
    my $num_animali = @gatti + @cani + @pesci;

    # contesto booleano
    say 'Esatto, sono un padrone di gatti!' if @gatti;

=end programlisting

X<C<$#>; sigillo>
X<sigilli; C<$#>>

Per ottenere l'I<indice> dell'ultimo elemento di un array, sottraete uno dal
numero di elementi dell'array (ricordate che gli indici dell'array iniziano da 0)
oppure usate la meno elegante sintassi C<$#cats>:

=begin programlisting

    my $primo_indice = 0;
    my $ultimo_indice  = @gatti - 1;
    # oppure
    # my $ultimo_indice  = $#gatti;

    say   "Il mio primo gatto ha indice $primo_indice, "
        . "e il mio ultimo gatto ha indice $ultimo_indice."

=end programlisting

Quando l'indice è meno importante della posizione di un elemento, usate degli indici 
di array negativi. L'ultimo elemento di un array è accessibile all'indice C<-1>. Il penultimo elemento
dell'array è accessibile all'indice C<-2>, e così via:

=begin programlisting

    my $ultimo_gatto    = $gatti[-1];
    my $penultimo_gatto = $gatti[-2];

=end programlisting

C<$#> ha un ulteriore uso: I<assegnandogli> un valore si può ridimensionare un array.
Ricordate che gli array in Perl 5 sono mutabili. Si espandono o contraggono secondo la necessità.
Quando restringete un array, Perl scarterà i valori per cui non c'è posto nell'array
ridimensionato. Quando espandete un array, Perl riempirà le posizioni espanse
di C<undef>.

=head2 Assegnamento ad Array

Potete fare assegnamenti a singole posizioni in un array usando gli indici:

=begin programlisting

    my @gatti;
    $gatti[3] = 'Jack';
    $gatti[2] = 'Tuxedo';
    $gatti[0] = 'Daisy';
    $gatti[1] = 'Petunia';
    $gatti[4] = 'Brad';
    $gatti[5] = 'Choco';

=end programlisting

Se assegnate un valore a un indice oltre i limiti attuali dell'array, Perl estende
l'array alla dimensione giusta e riempie tutte le posizioni intermedie
con C<undef>. Dopo il primo assegnamento nell'esempio qui sopra, l'array conterrà
C<undef> nelle posizioni 0, 1 e 2 e C<Jack> nella posizione 3.

Come abbreviazione, potete inizializzare un arrey con una lista:

=begin programlisting

    my @gatti = ( 'Daisy', 'Petunia', 'Tuxedo', ... );

=end programlisting

... ma ricordate che I<non sono> le parentesi a creare una lista. Senza
parentesi, questa istruzione assegnerebbe C<Daisy> al primo e unico elemento
dell'array, a causa delle precedenze tra operatori (L<precedence>).

Un'espressione qualunque che produce una lista in contesto lista può essere assegnata ad un array:

=begin programlisting

    my @gatti      = elenca_i_gatti();
    my @info_tempo = localtime();
    my @numeri     = 1 .. 10;

=end programlisting

Assegnare a un elemento scalare di un array impone il contesto scalare, mentre
assegnare all'intero array impone il contesto lista.

Per svuotare un array, assegnategli la lista vuota:

=begin programlisting

    my @date = ( 1969, 2001, 2010, 2051, 1787 );
    ...
    @date    = ();

=end programlisting

=begin tip Gli Array all'Inizio sono Vuoti

C<my @elementi = ();> è una versione più lunga e verbosa di C<my @elementi>, dato che
gli array appena dichiarati sono vuoti.

=end tip

=head2 Operazioni sugli Array

Qualche volta è più conveniente vedere un array come una collezione ordinata e mutabile di
elementi piuttosto che come una mappatura tra indici e valori. Perl 5 fornisce diverse
operazioni per manipolare gli elementi di un array senza usare gli indici.

X<array; C<push>>
X<array; C<pop>>
X<predefinite; funzioni; C<push>>
X<predefinite; funzioni; C<pop>>

Gli operatori C<push> e C<pop> aggiungono e rimuovono, rispettivamente, degli elementi dalla coda di un
array:

=begin programlisting

    my @piatti;

    # cosa c'è da mangiare?
    push @piatti, qw( hamburger pizza lasagne rape );

    # ... ma vostro nipote odia la verdura
    pop @piatti;

=end programlisting

Potete fare il C<push> di una lista di valori in un array, ma potete solo fare il C<pop> di un elemento
per volta. C<push> restituisce il nuovo numero di elementi dell'array. C<pop> restituisce
l'elemento rimosso.

Dato che C<push> opera su una lista, potete facilmente appendere gli elementi di uno o più
 arrays tra di loro:

=begin programlisting

    push @piatti, @colazione, @pranzo, @cena;

=end programlisting

X<array; C<shift>>
X<array; C<unshift>>
X<predefinite; funzioni; C<shift>>
X<predefinite; funzioni; C<unshift>>

Analogamente, C<unshift> e C<shift> aggiungono e rimuovono, rispettivamente, degli elementi dalla testa
di un array:

=begin programlisting

    # espandiamo i nostri orizzonti culinari
    unshift @piatti, qw( tofu spanakopita taquitos );

    # un ripensamento su quell'idea della soia
    shift @piatti;

=end programlisting

C<unshift> antepone una lista di elementi alla testa di un array e restituisce
il nuovo numero di elementi dell'array. C<shift> rimuove e restituisce il primo
elemento dell'array.

Pochi programmi usano i valori di ritorno di C<push> e C<unshift>.

X<array; C<splice>>
X<predefinite; funzioni; C<splice>>

L'operatore C<splice> rimuove e sostituisce elementi di un array dato un
offset, la lunghezza di una slice di lista e i sostituti. Sia la sostituzione che la rimozione
sono opzionali; potete omettere sia l'uno che l'altro. La descrizione di C<splice> in
C<perlfunc> dimostra la sua equivalenza con C<push>, C<pop>, C<shift> e
C<unshift>. Un uso particolarmente efficace è la rimozione di due elementi da un array:

=begin programlisting

    my ($vincitore, $secondo) = splice @finalisti, 0, 2;

    # oppure
    my $vincitore             = shift @finalisti;
    my $secondo               = shift @finalisti;

=end programlisting

X<array; C<each>>
X<predefinite; funzioni; C<each>>

Prima del Perl 5.12, iterare su un array per indice richiedeva un ciclo in stile C.
A partire da Perl 5.12, C<each> può iterare su un array per indice e valore:

=begin programlisting

    while (my ($indice, $valore) = each @libri)
    {
        say "#$indice: $valore";
        ...
    }

=end programlisting

=head2 Slice di Array

Z<array_slices>

X<array; slice>
X<slice; array>
X<C<@>; sigillo>
X<sigilli; C<@>>

Il costrutto di I<array slice> vi permette di accedere agli elementi di un array in contesto
lista. A differenza dell'accesso scalare a un elemento dell'array, questa operazione di indicizzazione
riceve una lista di zero o più indici e usa il sigillo array (C<@>):

=begin programlisting

    my @gatti_giovani      = @gatti[-1, -2];
    my @gatti_anziani      = @gatti[0 .. 2];
    my @selezione_di_gatti = @gatti[ @indici ];

=end programlisting

Le slice di array possono essere utili negli assegnamenti:

=begin programlisting

    @utenti[ @indici_sostituzioni ] = @sostituisci_utenti;

=end programlisting

Una slice può contenere zero o più elementi--o anche uno solo:

=begin programlisting

    # slice di array con un singolo elemento; contesto I<lista>
    @gatti[-1] = dammi_altri_gatti();

    # accesso a un singolo elemento dell'array; contesto I<scalare>
    $gatti[-1] = dammi_altri_gatti();

=end programlisting

L'unica differenza sintattica tra una slice di array con un solo elemento e
l'accesso scalare a un elemento dell'array è il sigillo usato. La differenza I<semantica>
è maggiore: una slice di array impone sempre il contesto lista. Una slice di array
valutata in contesto scalare produce un warning:

=begin screen

    È meglio scrivere il valore scalare @gatti[1] come $gatti[1]...

=end screen

Una slice di array impone il contesto lista anche all'espressione
che usa come indice:

=begin programlisting

    # la chiamata di funzione è in contesto lista
    my @gatti_affamati = @gatti[ indici_di_gatti() ];

=end programlisting

=head2 Array e Contesto

X<contesto lista; array>

In contesto lista, gli array diventano liste.  Se passate diversi array a una
normale funzione Perl 5, essi si appiattiscono in un'unica lista:

=begin programlisting

    my @gatti = qw( Daisy Petunia Tuxedo Brad Jack );
    my @cani = qw( Rodney Lucky );

    porta_dal_veterinario( @gatti, @cani );

    sub porta_dal_veterinario
    {
        # BACATO: non usatelo!
        my (@gatti, @cani) = @_;
        ...
    }

=end programlisting

Nella funzione, C<@_> conterrà sette elementi, not due, poichè l'assegnamento
di una lista ad un array è I<greedy>. Un array consuma più elementi possibile
dalla lista. Dopo l'assegnamento, C<@gatti> conterrà I<tutti>
gli argomenti passati alla funzione. C<@cani> invece sarà vuoto.

Questo appiattimento può confondere i principianti che tentano di creare
array annidati in Perl 5:

=begin programlisting

    # crea un singolo array, non un array di array
    my @numeri = (  1 .. 10,
                 ( 11 .. 20,
                 ( 21 .. 30 ) ) );

=end programlisting

... ma questo codice è a tutti gli effetti equivalente a questo:

=begin programlisting

    # crea un singolo array, non un array di array
    my @numeri = 1 .. 30;

=end programlisting

... perchè le parentesi raggruppano semplicemente le espressioni. Non I<creano>
liste, in questo caso. Per ovviare a questo appiattimento, usate i riferimenti
ad array (L<array_references>).

=head2 Interpolazione di Array

X<array; interpolazione>
X<interpolazione; array>
X<C<$">>
X<C<$LIST_SEPARATOR>>

Gli array vengono interpolati in stringhe come liste della conversione in stringa di ciascun elemento
separate dal valore corrente della variabile globale predefinita C<$">. Il valore di default di tale
variabile è lo spazio singolo. Il suo mnemonico in F<English.pm> è
C<$LIST_SEPARATOR>. Quindi:

=begin programlisting

    my @alfabeto = 'a' .. 'z';
    say "[@alfabeto]";
    B<[a b c d e f g h i j k l m>
     B<n o p q r s t u v w x y z]>

=end programlisting

Localizzate C<$"> con un delimitatore per facilitare il debuggingN<Il credito per questa tecnica va a Mark Jason Dominus.>:

=begin programlisting

    # cosa c'e' gia' in questo array?
    local $" = ')(';
    say "(@dolciumi)";
    B<(crostata)(torta)(ciambelle)(biscotti)(pane dolce)>

=end programlisting
