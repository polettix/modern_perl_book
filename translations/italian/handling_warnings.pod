=head1 Gestione dei Warning

Z<handling_warnings>

Anche se c'è più di un modo di scrivere un programma funzionante in Perl 5, alcuni di tali
modi possono essere poco eleganti, poco chiari o anche sottilmente 
sbagliati. Il sistema di warning opzionali di Perl 5 può aiutarvi a identificare e
evitare queste situazioni.

=head2 Generare i Warning

Z<producing_warnings>

X<builtin; C<warn>>

Usate la funzione predefinita C<warn> per emettere un warning:

=begin programlisting

    warn 'Qualcosa e` andato storto!';

=end programlisting

C<warn> stampa una lista di valori sul filehandle STDERR (L<filehandle>).  Perl
aggiunge il nome del file e il numero di linea in cui è stata chiamata C<warn>
a meno che l'ultimo elemento della lista termini con un carattere di a capo.

X<C<Carp>>
X<C<Carp>; C<carp()>>
X<C<Carp>; C<cluck()>>
X<C<Carp>; C<croak()>>
X<C<Carp>; C<confess()>>

Il modulo C<Carp> distribuito con Perl 5 offre altri meccanismi per generare dei warning. La sua
funzione C<carp()> emette un warning dal punto di vista del codice chiamante.
Dato il seguente codice di validazione dei parametri di una funzione:

=begin programlisting

    use Carp 'carp';

    sub solo_due_argomenti
    {
        my ($ops, $opd) = @_;
        carp( 'Ho ricevuto troppi argomenti' ) if @_ > 2;
        ...
    }

=end programlisting

... il warning di arità (L<arity>) includerà il nome del file e il numero di linea relativi al
codice I<chiamante>, e non quelli relativi alla funzione C<solo_due_argomenti()>. Analogamente, la funzione
C<cluck()> di C<Carp> genera una traccia di tutte le chiamate di funzione effettuate fino a quella
corrente.

X<C<Carp>; verbose>

Il modo verbose di C<Carp> aggiunge le tracce delle chiamate a tutti i warning generati da C<carp()> e C<croak()> (L<reporting_errors>), dovunque ci si trovi all'interno del programma:

=begin screen

    $ perl -MCarp=verbose mio_prog.pl

=end screen

Quando scrivete dei moduli (L<modules>), usate C<Carp> al posto di C<warn> e C<die>.

=head2 Attivare e Disattivare i Warning

X<C<-w>; argomento da linea di comando di attivazione dei warning>
X<argomenti da linea di comando; C<-w>>

Potrebbe capitarvi di incontrare l'argomento da linea di comando C<-w> nel codice poco recente. Tale argomento attiva
i warning in tutto il programma, inclusi i moduli esterni scritti e manutenuti da
altre persone. Il suo effetto è del tipo "tutto o niente", ma potrebbe esservi utile se
intendete eliminare i warning attuali e potenziali nell'intera
codebase.

X<C<warnings>>
X<direttive; C<warnings>>

L'approccio moderno è quello di usare la direttiva C<warnings>N<...o un suo equivalente come
C<use Modern::Perl;>.>. In questo modo si attivano i warning all'interno di scope I<lessicali>
e si indica che gli autori del codice ritengono che esso non debba normalmente produrre dei
warning.

=begin tip Flag Globali per i Warning

X<C<-W>; argomento da linea di comando di attivazione dei warning>
X<argomenti da linea di comando; C<-W>>
X<C<-X>; argomento da linea di comando di disattivazione dei warning>
X<argomenti da linea di comando; C<-X>>

Il flag C<-W> attiva i warning nell'intero programma in modo unilaterale, indipendentemente
dall'attivazione o disattivazione lessicale con la direttiva C<warnings>. Il flag C<-X>
I<disattiva> i warning nell'intero programma in modo unilaterale. Nessuno dei due è usato frequentemente.

=end tip

X<C<$^W>>
X<variabili globali; C<$^W>>

I flag C<-w>, C<-W> e C<-X> influenzano il valore della variabile globale C<$^W>.
Il codice scritto prima dell'introduzione della direttiva C<warnings> (avvenuta con Perl 5.6.0 nella primavera del 2000) potrebbe
C<local>izzare C<$^W> per sopprimere certi warning in un dato scope.

=head2 Disabilitare Categorie di Warning

Per disabilitare i warning in uno scope in modo selettivo, usate C<no warnings;> con una
lista di argomenti. Omettendo la lista di argomenti disattiverete tutti i warning all'interno dello
scope.

C<perldoc perllexwarn> elenca tutte le categorie di warning riconosciute dalla direttiva
C<warnings> della vostra versione di Perl 5. La maggior parte di essi rappresenta
condizioni interessanti, ma alcuni possono essere peggio che inutili in certe
situazioni. Per esempio, il warning C<recursion> viene generato quando Perl si accorge
che una funzione ha chiamato se stessa più di cento volte. Se confidate
nella vostra capacità di scrittura delle condizioni di terminazione della ricorsione, potete disattivare
questo warning nello scope della ricorsione (anche se forse è meglio usare le chiamate di coda;
L<tail_calls>).

Se state facendo generazione di codice (L<code_generation>) o state ridefinendo dei simboli localmente,
potete disattivare i warning C<redefine>.

Alcuni programmatori Perl esperti disattivano i warning di C<uninitialized> (valori non inizializzati, NdT)
nel codice di elaborazione di stringhe che concatena valori con molte origini diverse. Con un'attenta inizializzazione delle variabili
potete evitare di disattivare questi warning, ma potreste invece considerarli dei semplici fastidi
per questioni di stile e di concisione.

=head2 Rendere Fatali i Warning

Z<fatal_warnings>
X<warning; fatali>

Se il vostro progetto considera i warning gravi come gli errori, potete renderli
fatali. Per promuovere I<tutti> i warning a eccezioni, usate:

=begin programlisting

    use warnings FATAL => 'all';

=end programlisting

Potete anche rendere fatali solo alcune categorie specifiche di warning, come l'uso di
costrutti deprecati:

=begin programlisting

    use warnings FATAL => 'deprecated';

=end programlisting

Con una buona dose di disciplina, questo meccanismo vi consente di scrivere codice molto robusto--ma fate attenzione.
Molti warning derivano da condizioni che si verificano durante l'esecuzione. Se la vostra suite di test
non tiene conto di tutti i warning in cui potete imbattervi, il vostro programma potrebbe terminare
inaspettatamente a causa di un'eccezione non catturata.

=head2 Catturare i Warning

X<C<$SIG{__WARN__}>>
X<warning; cattura>

Analogamente a come potete catturare le eccezioni, potete anche catturare i warning. La variabile C<%SIG>
N<Vedete C<perldoc perlvar>.> contiene i gestori dei segnali fuori banda
sollevati da Perl o dal vostro sistema operativo. Per catturare un warning, assegnate un riferimento
a funzione a C<$SIG{__WARN__}>:

=begin programlisting

    {
        my $warning;
        local $SIG{__WARN__} = sub { $warning .= shift };

        # fai qualcosa di pericoloso
        ...

        say "Ho catturato il warning:\n$warning" if $warning;
    }

=end programlisting

Il primo argomento del gestore dei warning è il messaggio di warning.
In effetti questa tecnica è meno utile della disattivazione lessicale dei
warning--ma può diventare rilevante in moduli di test come il modulo CPAN
C<Test::Warnings>, dove il testo del warning è importante.

State attenti al fatto che C<%SIG> è globale. C<local>izzatela nello scope più limitato possibile,
ma ricordate che è comunque una variabile globale.

=head2 Registrare i Vostri Warning

Z<registering_warnings>

X<warning; registrazione>
X<warning lessicali>

La direttiva C<warnings::register> vi permette di creare i vostri warning lessicali
in modo che gli utenti del vostro codice possano attivarli e disattivarli. Fate
la C<use> della direttica C<warnings::register> in un modulo: 

=begin programlisting

    package Scimmia::Pericolosa;

    B<use warnings::register;>

=end programlisting

Questo codice crea una nuova categoria di warning con il nome del package
C<Scimmia::Pericolosa>. Attivate questi warning con C<use warnings 'Scimmia::Pericolosa'>
e disattivateli con C<no warnings 'Scimmia::Pericolosa'>.

Usate C<warnings::enabled()> per verificare se una data categoria di warning è
attiva nello scope lessicale chiamante. Usate C<warnings::warnif()> per generare un warning solo
se i warning sono attivi. Per esempio, per generare un warning della
categoria C<deprecated>:

=begin programlisting

    package Scimmia::Pericolosa;

    use warnings::register;

    B<sub import>
    B<{>
        B<warnings::warnif( 'deprecated',>
            B<'l'importazione senza parametri da ' . __PACKAGE__ .>
            B<' e` deprecata' )>
        B<unless @_;>
    B<}>

=end programlisting

Vedete C<perldoc perllexwarn> per maggiori dettagli.
