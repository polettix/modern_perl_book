=head1 Dechiarazione di Funzioni

Z<functions>

X<functions; declaration>
X<builtins; C<sub>>

Usate il costrutto nativo C<sub> per dichiarare una funzione:

=begin programlisting

    B<sub> salutami  { ... }

=end programlisting

Da questo momento C<salutami()> può essere invocata dovunque all'interno del programma.

X<functions; forward declaration>

Non è necessario I<definire> una funzione nello stesso punto in cui la dichiarate. Una
I<dichiarazione in avanti> dice al Perl di ricordarsi il nome della funzione anche se essa
verrà definita dopo:

=begin programlisting

    sub saluta_dopo;

=end programlisting

=head1 Invocazione di Funzioni

X<functions; invoking>

Usate delle parentesi postfisse (L<fixity>) e il nome di una funzione per invocare la funzione
ed eventualmente passarle una lista di argomenti:

=begin programlisting

    salutami( 'Giacomo', 'Paolo' );
    salutami( 'Bianca' );
    salutami();

=end programlisting

In questi esempi le parentesi non sono strettamente necessarie--anche se
C<strict> è attivata--ma rendono le cose più chiare sia a un lettore umano che al parser del 
Perl. In caso di dubbio, è meglio usarle.

Gli argomenti delle funzioni possono essere espressioni arbitrarie, incluse delle semplici variabili:

=begin programlisting

    salutami( $name );
    salutami( @authors );
    salutami( %editors );

=end programlisting

... anche se la gestione di default dei parametri in Perl 5 riserva a volte delle sorprese ai principianti.

=head1 Parametri delle Funzioni

Z<function_parameters>

X<parameters>
X<functions; parameters>
X<C<@_>>
X<parameters; flattening>

Una funzione riceve i suoi parametri in un singolo array, C<@_>
(L<default_array_variables>). Perl I<appiattisce> tutti i parametri in input in un'unica
lista. La funzione può spacchettare i parametri in opportune variabili oppure
operare direttamente su C<@_>:

=begin programlisting

    sub saluta_uno
    {
        B<my ($nome) = @_>;
        say "Ciao, $nome!";
    }

    sub saluta_tutti
    {
        say "Ciao, B<$_!" for @_>;
    }

=end programlisting

Anche se gran parte del codice usa C<shift> o lo spacchettamento in una lista, C<@_> si comporta come un normale array del Perl, quindi potete riferirvi a singoli elementi per indice:

=begin programlisting

    sub saluta_uno_shift
    {
        B<my $nome = shift>;
        say "Ciao, $nome!";
    }

    sub saluta_due_senza_shift
    {
        my ($supereroe, $aiutante) = @_;
        say "Ma sono proprio $supereroe e $aiutante... Benvenuti!";
    }

    sub saluta_uno_indice
    {
        B<my $nome = $_[0]>;
        say "Ciao, $nome!";

        # oppure, in modo meno chiaro
        say "Ciao, $_[0]!";
    }

=end programlisting

... ma anche usare C<shift>, C<unshift>, C<push>, C<pop>, C<splice> e le slice con C<@_>.

=begin tip The Implicit Them

Ricordate che le funzioni native che operano sugli array usano C<@_> come operando di default I<all'interno
delle funzioni>. Sfruttate questo idioma.

=end tip

L'assegnamento di un parametro scalare da C<@_> richiede uno C<shift>, un accesso indicizzato a
C<@_> oppure la presenza di un contesto lista a sinistra dell'assegnamento stesso determinato dalle parentesi. Negli altri casi, Perl 5 non
avrà problemi a valutare per voi C<@_> in contesto scalare e assegnare il numero di parametri
passati:

=begin programlisting

    sub saluta_uno_con_bug
    {
        B<my $nome = @_>;  # bug
        say "Ciao, $nome; oggi sembri un numero!"
    }

=end programlisting

L'assegnamento di diversi parametri a una lista è spesso più chiaro delle corrispondenti linee di codice contenenti degli
C<shift>. Confrontate:

=begin programlisting

    sub calcola_valore
    {
        # shift multipli
        my $valore_sinistro = shift;
        my $operazione      = shift;
        my $valore_destro   = shift;
        ...
    }

=end programlisting

... con:

=begin programlisting

    sub calcola_valore
    {
        B<my ($valore_sinistro, $operazione, $valore_destro) = @_;>
        ...
    }

=end programlisting

Occasionalmente, può essere necessario estrarre alcuni parametri da C<@_> e passare i
restanti ad un'altra funzione:

=begin programlisting

    sub metodo_delegato
    {
        my $self = B<shift>;
        say 'Chiamo metodo_delegato()'

        $self->delega->metodo_delegato( B<@_> );
    }

=end programlisting

Usate C<shift> quando la vostra funzione necessita di un solo parametro. Usate un assegnamento a lista
quando dovete accedere a diversi parametri.

=begin tip Real Function Signatures

X<CPAN; C<signatures>>
X<CPAN; C<Method::Signatures>>
X<CPAN; C<MooseX::Method::Signatures>>
X<CPAN; C<Method::Signatures::Simple>>

Molte distribuzioni di CPAN estendono la gestione dei parametri di Perl 5 con sintassi e
opzioni aggiuntive. C<signatures> e C<Method::Signatures> sono potenti.
C<Method::Signatures::Simple> è elementare, ma utile.
C<MooseX::Method::Signatures> funziona bene in coppia con Moose (L<moose>).

=end tip

=head2 Appiattimento

L'appiattimento dei parametri in C<@_> avviene nel chiamante di una funzione.
Passare un hash come argomento produce una lista di coppie chiave/valore:

=begin programlisting

    my %nome_e_tipo_cuccioli = (
        Lucky   => 'cane',
        Rodney  => 'cane',
        Tuxedo  => 'gatto',
        Petunia => 'gatto',
    );

    mostra_cuccioli( %nome_e_tipo_cuccioli );

    sub mostra_cuccioli
    {
        my %cuccioli = @_;
        while (my ($nome, $tipo) = each %cuccioli)
        {
            say "$nome è un $tipo";
        }
    }

=end programlisting

Quando il Perl appiattisce C<%nome_e_tipo_cuccioli> in una lista, l'ordine delle coppie
chiave/valore dell'hash può variare, ma la lista conterrà sempre una chiave
seguita immediatamente dal suo valore. L'assegnamento di hash all'interno di C<mostra_cuccioli()> funziona
essenzialmente allo stesso modo dell'assegnmento a C<%nome_e_tipo_cuccioli>, anche se quest'ultimo è più esplicito.

L'appiattimento è spesso utile, ma occorre fare attenzione a non mescolare scalari e aggregati
appiattiti nelle liste di parametri. Se scrivete una funzione C<mostra_cuccioli_per_tipo()>, dove
un parametro è il tipo di cuccioli da mostrare, passate tale tipo come I<primo>
parametro (o usate C<pop> per rimuoverlo dalla fine di C<@_>):

=begin programlisting

    sub mostra_cuccioli_per_tipo
    {
        B<my ($tipo, %cuccioli) = @_>;

        while (my ($nome, $specie) = each %cuccioli)
        {
            B<next unless $specie eq $tipo;>
            say "$nome è un $specie";
        }
    }

    my %nome_e_tipo_cuccioli = (
        Lucky   => 'cane',
        Rodney  => 'cane',
        Tuxedo  => 'gatto',
        Petunia => 'gatto',
    );

    mostra_cuccioli_per_tipo( 'cane',  %nome_e_tipo_cuccioli );
    mostra_cuccioli_per_tipo( 'gatto', %nome_e_tipo_cuccioli );
    mostra_cuccioli_per_tipo( 'alce',  %nome_e_tipo_cuccioli );

=end programlisting

=head2 Slurping

Z<parameter_slurping>
X<parameters; slurping>

Un assegnamento di un aggregato a una lista è sempre greedy, per cui assegnare a C<%cuccioli>
fa lo I<slurp> di tutti i valori restanti di C<@_>. Se il parametro C<$tipo>
fosse alla fine di C<@_>, Perl produrrebbe un warning relativo all'assegnamento di un numero dispari di elementi
ad un hash. Se volete, I<potete> aggirare questo problema:

=begin programlisting

    sub mostra_cuccioli_per_tipo
    {
        B<my $tipo = pop;>
        B<my %cuccioli = @_;>

        ...
    }

=end programlisting

... al costo però di una minore chiarezza. Lo stesso principio si applica naturalmente anche all'assegnamento 
ad un array come parametro. Usate i riferimenti (L<references>) per evitare
appiattimenti e slurping indesiderati degli aggregati.

=head2 Aliasing

X<parameters; aliasing>
X<functions; aliasing parameters>

C'è una sottigliezza legata all'array C<@_>; esso contiene infatti degli I<alias> agli argomenti della funzione, e questo rende possibile
modificarli direttamente. Per esempio:

=begin programlisting

    sub modifica_nome
    {
        $_[0] = reverse $_[0];
    }

    my $nome = 'Arancia';
    modifica_nome( $nome );
    say $nome;

    # stampa C<aicnarA>

=end programlisting

Quando modificate direttamente un elemento di C<@_> modificate anche il parametro originale.
Fate attenzione a spacchettate C<@_> con cura.

=head1 Funzioni e Namespace

Ogni funzione è contenuta in un namespace (L<packages>). Le funzioni senza
un esplicito namespace--ovvero le funzioni che non sono dichiarate dopo un'istruzione C<package>--appartengono
al namespace C<main>. Potete anche dichiarare una funzione in un
altro namespace anteponendo un prefisso al suo nome:

=begin programlisting

    sub B<Estensioni::Matematica::>somma {
        ...
    }

=end programlisting

Questo codice dichiara la funzione e, se necessario, crea il namespace.  Ricordate
che i package di Perl 5 sono modificabili in qualunque punto del codice. Potete
dichiarare una sola funzione con un determinato nome in un namespace. In caso contrario Perl 5 genera un warning
di ridefinizione di una subroutine. Potete disabilitare questo warning con C<no warnings
'redefine'>--se siete sicuri che questo comportamento sia ciò che intendevate ottenere.

Per chiamare funzioni in altri namespace usate i loro nomi fully-qualified:

=begin programlisting

    package main;

    Estensioni::Matematica::somma( $scalare, $vettore );

=end programlisting

Le funzioni di un namespace sono I<visibili> al di fuori di esso attraverso
i loro nomi fully-qualified. Dentro a un namespace, per chiamare una funzione dichiarata in quel namespace
potete usare semplicemente il suo nome. Potete anche importare dei nomi da
altri namespace.

=head2 Importazione

Z<importing>

X<functions; importing>
X<builtins; C<use>>

Quando caricate un modulo con il costrutto nativo C<use> (L<modules>), Perl chiama automaticamente
un metodo di nome C<import()> su tale modulo. Un modulo può fornire un proprio
C<import()> per rendere alcuni o tutti i simboli che definisce disponibili al package
chiamante. Eventuali argumenti che seguono il nome del modulo nell'istruzione C<use> vengono
passati al metodo C<import()> del modulo. Quindi:

=begin programlisting

    use strict;

=end programlisting

... carica il modulo F<strict.pm> e chiama C<< strict->import() >> senza
argomenti, mentre:

=begin programlisting

    use strict 'refs';
    use strict qw( subs vars );

=end programlisting

... carica il modulo F<strict.pm>, chiama C<< strict->import( 'refs' ) >> e infine
chiama C<< strict->import( 'subs', 'vars' ) >>.

C<use> chiama implicitamente C<import()> come descritto qui sopra, ma potete chiamare
C<import()> anche direttamente. L'esempio fatto con C<use> è equivalente a:

=begin programlisting

    BEGIN
    {
        require strict;
        strict->import( 'refs' );
        strict->import( qw( subs vars ) );
    }

=end programlisting

L'istruzione nativa C<use> aggiunge un blocco C<BEGIN> implicito che racchiude queste linee di codice
in modo tale che la chiamata a C<import()> avviene I<immediatamente> dopo che il parser ha compilato
l'intera istruzione C<use>. Questo assicura che ogni simbolo importato sia visibile
durante la compilazione del resto del programma. In caso contrario, le funzioni I<importate>
da altri moduli ma non I<dichiarate> nel file corrente sarebbero interpretate come
bareword, e violerebbero la direttiva C<strict>.

=head1 Gestione degli Errori

Z<reporting_errors>
X<builtins; C<caller>>

All'interno di una funzione, potete ispezionare il contesto della chiamata alla funzione stessa con la funzione nativa
C<caller>. Quando non riceve argomenti, essa restituisce una lista di tre elementi
contenente il nome del package chiamante, il nome del file contenente la
chiamata e il numero della linea del file dove è avvenuta la chiamata:

=begin programlisting

    package main;

    main();

    sub main
    {
        mostra_info_chiamata();
    }

    sub mostra_info_chiamata
    {
        my ($package, $file, $linea) = caller();
        say "Chiamata da $package in $file:$linea";
    }

=end programlisting

È possibile ispezionare L'intera catena di chiamate. Passate un singolo argomento intero
I<n> a C<caller()> per ispezionare il contesto della chiamata del chiamante I<n>-esimo
nella catena. In altre parole, se C<mostra_info_chiamata()> usasse C<caller(0)>, riceverebbe
informazioni sulla chiamata da C<main()>. Se usasse
C<caller(1)>, riceverebbe
informazioni sulla chiamata dall'inizio del programma.

L'argomento opzionale indica anche a C<caller> di restituire ulteriori valori
di ritorno, inclusi il nome della funzione e il contesto di numero della chiamata:

=begin programlisting

    sub mostra_info_chiamata
    {
        my ($package, $file, $lineaB<, $funz>) = caller(B<0>);
        say "B<$funz> chiamata da $package in $file:$linea";
    }

=end programlisting

X<C<Carp>>
X<C<Carp>; C<croak()>>
X<C<Carp>; C<carp()>>

Il modulo standard C<Carp> usa efficacemente questa tecnica per riportare
errori e generare warning nelle funzioni. Quando viene usata al posto di C<die> nel
codice di una libreria, C<croak()> solleva un'eccezione dal punto di vista del
chiamante di tale codice. Analogamente, C<carp()> genera un warning contenente il nome di file e numero di linea del chiamante
(L<producing_warnings>).

Questo comportamento è particolarmente utile quando validate i parametri o le precondizioni di una
funzione per indicare che il codice chiamante è in qualche modo errato.

=head2 Validazione degli Argomenti

Anche se in genere si adopera per fare ciò che desidera il programmatore, il Perl offre pochi modi nativi
per testare la validità degli argomenti passati a una funzione. Potete valutare C<@_>
in contesto scalare per verificare se il I<numero> di parametri passati a una
funzione è corretto:

=begin programlisting

    sub somma_numeri
    {
        croak 'Mi aspettavo due numeri, ma ne ho ricevuti: ' . @_
            unless @_ == 2;

        ...
    }

=end programlisting

X<CPAN; C<Params::Validate>>

Il controllo dei tipi è più difficile, a causa delle conversioni di tipo in Perl indotte dagli operatori
 (L<context_philosophy>). Il modulo CPAN C<Params::Validate> offre
la possibilità di controlli più rigorosi.

=head1 Argomenti Avanzati sulle Funzioni

Le funzioni sono alla base di molte funzionalità avanzate del Perl.

=head2 Conoscenza del Contesto

X<context>
X<C<wantarray>>
X<builtins; C<wantarray>>

Le funzioni native di Perl 5 sanno se le avete invocate in contesto void, scalare o
lista; la stessa cosa è possibile per le vostre funzioni. La funzione nativa chiamata
erroneamente C<wantarray> N<Vedete C<perldoc -f wantarray> per una conferma.> restituisce C<undef> per indicare un contesto void, un
valore falso per indicare un contesto scalare e un valore vero per indicare un contesto
lista.

=begin programlisting

    sub sensibile_al_contesto
    {
        my $contesto = wantarray();

        return qw( Contesto lista )   if         $contesto;
        say    'Contesto void'    unless defined $contesto;
        return 'Contesto scalare' unless         $contesto;
    }

    sensibile_al_contesto();
    say my $scalare = sensibile_al_contesto();
    say sensibile_al_contesto();

=end programlisting

Questo può essere particolarmente utile per evitare che delle funzioni producano dei valori di ritorno computazionalmente costosi
 in un contesto void. Alcune funzioni idiomatiche restituiscono una lista in contesto
lista e il primo elemento della lista o un riferimento ad array in contesto
scalare. Ricordate però che non esiste un'unica regola ottimale per l'uso
di C<wantarray>. Alcune volte è meglio scrivere funzioni separate per evitare
l'ambiguità.

=begin tip Putting it in Context

X<C<Want>>
X<C<Contextual::Return>>

Le distribuzioni CPAN C<Want> di Robin Houston e C<Contextual::Return> di Damian Conway
offrono molti modi di scrivere interfacce sensibili al contesto potenti ed usabili.

=end tip

=head2 Ricorsione

Z<recursion>
X<recursion>
X<call frame>
X<functions; call frame>

Supponete di voler trovare un elemento in un array ordinato. I<Potreste> iterare
su ogni singolo elemento dell'array, confrontandolo con ciò che cercate, ma in media
dovreste esaminare metà degli elementi dell'array. Un altro
approccio consiste nel dividere l'array in due parti, prendere l'elemento di mezzo, confrontarlo e ripetere
il processo sulla metà inferiore o superiore dell'array. Divide et impera. Quando non ci
sono più elementi da ispezionare oppure avete trovato l'elemento cercato, vi fermate.

Un test automatico di questa tecnica potrebbe essere:

=begin programlisting

    use Test::More;

    my @elementi =
    (
        1, 5, 6, 19, 48, 77, 997, 1025, 7777, 8192, 9999
    );

    ok   esiste_elem(     1, @elementi ),
            'trovato primo elemento dell'array';
    ok   esiste_elem(  9999, @elementi ),
             'trovato ultimo elemento dell'array';
    ok ! esiste_elem(   998, @elementi ),
            'non trovato elemento che non è nell'array';
    ok ! esiste_elem(    -1, @elementi ),
            'non trovato elemento che non è nell'array';
    ok ! esiste_elem( 10000, @elementi ),
            'non trovato elemento che non è nell'array';

    ok   esiste_elem(    77, @elementi ),
            'trovato elemento in mezzo';
    ok   esiste_elem(    48, @elementi ),
            'trovato ultimo elemento di parte inferiore';
    ok   esiste_elem(   997, @elementi ),
            'trovato primo elemento di parte superiore';

    done_testing();

=end programlisting

La ricorsione è un concetto che appare ingannevolmente semplice. Ogni chiamata a una funzione in Perl
crea un nuovo I<blocco di attivazione>, una struttura dati interna che rappresenta la
chiamata stessa, e include l'ambiente lessicale della chiamata corrente alla
funzione. Ciò significa che la funzione può richiamare se stessa o I<ricorrere>.

Per poter eseguire con successo il test precedente, dovete scrivere una funzione chiamata C<esiste_elem()> che
sappia come chiamare se stessa dividendo ogni volta la lista in due parti:

=begin programlisting

    sub esiste_elem
    {
        my ($elem, @array) = @_;

        # termina ricorsione se non ci sono elementi tra cui cercare
        return unless @array;

        # arrotonda per difetto se il numero di elementi è dispari
        my $punto_in_mezzo = int( (@array / 2) - 0.5 );
        my $elem_in_mezzo  = $array[ $punto_in_mezzo ];

        # restituici vero se elemento trovato
        return 1 if $elem  == $elem_in_mezzo;

        # restituici falso se c'è un solo elemento
        return   if @array == 1;

        # chiama ricorsivamente su parte inferiore
        return B<esiste_elem>(
            $elem, @array[0 .. $punto_in_mezzo ]
        ) if $elem < $elem_in_mezzo;

        # chiama ricorsivamente su parte superiore
        return B<elem_exists>(
             $elem, @array[ $punto_in_mezzo + 1 .. $#array ]
        );
    }

=end programlisting

Anche se è I<possibile> scrivere questo codice in modo procedurale e gestire voi stessi le parti
della lista, l'approccio ricorsivo fa sì che sia il Perl a tenere traccia di questi dettagli.

=head2 Lessicali

Ogni nuova invocazione di una funzione crea la propria I<istanza> di uno scope
lessicale. Sebbene la dichiarazione di C<esiste_elem()> crei un singolo scope
per i lessicali C<$elem>, C<@array>, C<$punto_in_mezzo> e C<$elem_in_mezzo>, ogni
I<chiamata> a C<esiste_elem()>--anche ricorsiva--memorizza i valori di tali
lessicali separatamente.

Non solo C<esiste_elem()> può chiamare se stesso, ma le variabili lessicali di ogni
invocazione sono protette e separate:

=begin programlisting

    B<use Carp 'cluck';>

    sub esiste_elem
    {
        my ($elem, @array) = @_;

        B<cluck "[$elem] (@array)";>

        # segue altro codice
        ...
    }

=end programlisting

=head2 Chiamate di Coda

Z<tail_calls>
X<recursion; guard conditions>

Un I<punto critico> della ricorsione è che dovete specificare correttamente le condizioni di
terminazione se non volete che la vostra funzione chiami se stessa un numero infinito di volte.
La funzione C<esiste_elem()> contiene diverse istruzioni C<return> proprio a questo scopo.

Perl offre un utile warning C<Deep recursion on subroutine> (NdT: ricorsione profonda sulla subroutine) quando sospetta
la presenza di una ricorsione infinita. Il limite di 100 chiamate ricorsive è arbitrario, ma è spesso
utile. Potete disabilitare questo warning con C<no warnings 'recursion'> nello scope della
chiamata ricorsiva.

Dato che ogni chiamata a funzione richiede un nuovo blocco di attivazione e dello spazio di memoria per
i lessicali, il codice altamente ricorsivo potrebbe usare più memoria del codice iterativo. La I<eliminazione
delle chiamate di coda> può essere d'aiuto.

Una I<chiamata di coda> è una chiamata a una funzione che restituisce direttamente il risultato
della funzione chiamante. Le seguenti chiamate a C<esiste_elem()>:

=begin programlisting

    # chiama ricorsivamente su parte inferiore
    return B<esiste_elem>(
        $elem, @array[0 .. $punto_in_mezzo ]
    ) if $elem < $elem_in_mezzo;

    # chiama ricorsivamente su parte superiore
    return B<elem_exists>(
         $elem, @array[ $punto_in_mezzo + 1 .. $#array ]
    );

=end programlisting

... sono delle candidate all'eliminazione delle chiamate di coda. Questa ottimizzazione eviterebbe
di ritornare alla chiamata corrente e poi alla chiamata precedente, ritornando invece
subito alla chiamata precedente.

X<C<goto>>
X<functions; C<goto>>
X<builtins; C<goto>>

Purtroppo, Perl 5 non elimina automaticamente le chiamate di coda. Potete farlo
voi manualmente con una speciale forma dell'istruzione C<goto>. Contrariamente alla forma
che può spesso risultare in spaghetti code, la forma di C<goto> a funzione sostituisce la
chiamata di funzione corrente con quella ad un'altra funzione. Potete indicare una funzione
sia per nome che per riferimento. Dovete sempre impostare manualmente C<@_>, se volete
passare degli argomenti diversi da quelli correnti:

=begin programlisting

    # chiama ricorsivamente su parte inferiore
    if ($elem < $elem_in_mezzo)
    {
        @_ = ($elem, @array[0 .. $punto_in_mezzo ]);
        B<goto &esiste_elem;>
    }

    # chiama ricorsivamente su parte superiore
    else
    {
        @_ = ($elem, @array[ $punto_in_mezzo + 1 .. $#array ] );
        B<goto &esiste_elem;>
    }

=end programlisting

Qualche volta le ottimizzazioni lasciano a desiderare dal punto di vista estetico.

=head1 Trappole e Funzionalità da Evitare

X<functions; misfeatures>

Alcune funzionalità del Perl sembrano utili, ma hanno dei gravi inconvenienti. In particolare,
i prototipi (L<prototypes>) raramente fanno ciò che i principianti vorrebbero.

X<functions; Perl 4>
X<functions; Perl 1>
X<C<&>; sigil>
X<sigils; C<&>>
X<builtins; C<do>>

Perl 5 supporta ancora le invocazioni di funzione vecchio stile, ereditate da versioni
precedenti del Perl. Mentre ora potete invocare le funzioni Perl per nome,
le versioni precedenti di Perl richiedevano di invocarle con una "e commerciale"
(C<&>) come primo carattere. Perl 1 richiedeva di usare l'istruzione C<do>:

=begin programlisting

    # stile superato; da evitare
    my $risultato = &calcola_risultato( 52 );

    # stile Perl 1; da evitare
    my $risultato = do calcola_risultato( 42 );

    # strano miscuglio; da evitare assolutamente
    my $risultato = do &calcola_risultato( 42 );

=end programlisting

Se da una parte la sintassi Perl 1 è solo visivamente sgradevole, la forma con la "e commerciale" ha
altri effetti sorprendenti. Per prima cosa, disabilita qualunque controllo sul prototipo. Inoltre,
passa I<implicitamente> l'esatto contenuto di C<@_> a meno che specifichiate voi stessi
gli argomenti. Entrambe possono causare strani comportamenti del codice.

Un'ultima trappola viene dall'omissione delle parentesi nelle chiamate di funzione. Il
parser di Perl 5 usa diverse euristiche per risolvere le bareword ambigue e per determinare
il numero di parametri passati a una funzione. Tali euristiche possono sbagliare:

=begin programlisting

    # attenzione; contiene un sottile errore
    ok esiste_elem 1, @elementi, 'trovato primo elemento';

=end programlisting

La chiamata a C<esiste_elem()> si ingoia la descrizione del test, intesa invece come
il secondo argomento a C<ok()>. Poichè il secondo parametro di C<esiste_elem()> fa slurping,
questo problema può rimanere nascosto fino a quando Perl produce dei warning relativi al confronto tra un
valore non-numerico (la descrizione del test, che non può essere convertita in un numero) e
l'elemento nell'array.

Mentre l'uso indiscriminato di parentesi può peggiorare la leggibilità, un lor uso ponderato
può chiarire il significato del codice e rendere improbabili alcuni errori sottili.
