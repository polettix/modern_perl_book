=head1 Moose

Z<moose>

X<moose>

Il sistema ad oggetti di default di Perl 5 è flessibile, ma minimale. Anche se potete creare cose eccellenti
a partire da esso, tale sistema vi fornisce poca assistenza anche per i compiti basilari.
I<Moose> è un sistema ad oggetti completo per Perl 5N<Vedete C<perldoc Moose::Manual>
per maggiori informazioni.>. Fornisce dei default più semplici e delle funzionalità avanzate
mutuate da linguaggi quali Smalltalk, Common Lisp e Perl 6. Il codice Moose
è interoperabile con il sistema ad oggetti di default e rappresenta attualmente il modo migliore
di scrivere codice orientato agli oggetti in Perl 5 moderno.

=head2 Classi

X<classi>
X<predefinite; parole chiave; C<package>>

Un oggetto Moose è un'istanza concreta di una I<classe>, che a sua volta è un modello che descrive
i dati e il comportamento specifici dell'oggetto. Le classi usano i package
(L<packages>) per fornire dei namespace:

=begin programlisting

    package Gatto
    {
        use Moose;
    }

=end programlisting

X<OO; istanze>

Questa classe C<Gatto> I<sembrerebbe> non fare nulla, ma questo è tutto ciò di cui Moose ha bisogno per
definire una classe. Potete creare oggetti (o I<istanze>) della classe C<Gatto> con la seguente sintassi:

=begin programlisting

    my $brad = Gatto->new();
    my $jack = Gatto->new();

=end programlisting

Così come può dereferenziare un riferimento, una freccia può invocare un metodo su un oggetto
o su una classe.

=head2 Metodi

X<OO; metodi>
X<OO; invocanti>

Un I<metodo> è una funzione associata a una classe. Così come le funzioni appartengono a dei
namespace, i metodi appartengono a delle classi, con due differenze. Per prima cosa, un
metodo opera sempre su un I<invocante>. Chiamare C<new()> su C<Gatto>
invia un messaggio alla classe C<Gatto>. Il nome della classe, C<Gatto>, è
l'invocante di C<new()>. Quando chiamate un metodo su un oggetto, l'invocante è l'oggetto
stesso:

=begin programlisting

    my $choco = B<Gatto>->new();
    B<$choco>->dormi_sulla_tastiera();

=end programlisting

X<dispatch>
X<dispatch di metodi>
X<OO; dispatch>
X<OO; dispatch di metodi>

In secondo luogo, una chiamata a un metodo coinvolge sempre una strategia di I<dispatch>, per mezzo della quale il sistema ad oggetti
sceglie il metodo appropriato. Data la semplicità della classe C<Gatto>, la
strategia di dispatch è ovvia, ma gran parte della potenza dell'OO deriva da questa idea.

All'interno di un metodo, il primo argomento è l'invocante. Il nome idiomatico usato in Perl 5
è C<$self>. Considerate che un C<Gatto> (normalmente) C<miagola()>:

=begin programlisting

    package Gatto
    {
        use Moose;

        B<sub miagola>
        B<{>
            B<my $self = shift;>
            B<say 'Miao!';>
        B<}>
    }

=end programlisting

Ora tutte le istanze di C<Gatto> possono svegliarvi al mattino perché non hanno
ancora mangiato:

=begin programlisting

    my $strana_sveglia = Gatto->new();
    $strana_sveglia->miagola() for 1 .. 3;

=end programlisting

X<metodo di classe>
X<metodo di istanza>
X<OO; metodi di classe>
X<OO; metodi di istanza>
X<metodi; classe>
X<metodi; istanza>

I metodi che accedono ai dati dell'invocante sono I<metodi d'istanza>, perché dipendono dalla
presenza dell'invocante appropriato per funzionare correttamente. I metodi (come
C<miagola()>) che non accedono ai dati d'istanza sono I<metodi di classe>. Potete
invocare i metodi di classe sulle classi e i metodi di classe e di istanza sulle istanze,
ma non potete invocare metodi di istanza sulle classi.

X<metodi; costruttore>

I I<costruttori>, che I<creano> le istanze, sono ovviamente dei metodi di classe. Moose
vi fornisce un costruttore di default.

I metodi di classe sono a tutti gli effetti delle funzioni globali di namespace. Dato che non accedono
ai dati d'istanza, offrono pochi vantaggi rispetto alle funzioni di namespace. Gran parte del codice OO
è giustamente basato sui metodi d'istanza, che hanno accesso ai dati d'istanza.

=head2 Attributi

X<attributi; oggetti>
X<OO; attributi>
X<OO; stato>
X<attributi; tipati>
X<attributi; C<ro> (read only)>

Ciascun oggetto Perl 5 è unico. Gli oggetti possono contenere dei dati privati associati
a ciascun singolo oggetto--detti I<attributi>, I<dati d'istanza> o I<stato>
dell'oggetto. Per definire un attributo, dichiaratelo come parte della classe:

=begin programlisting

    package Gatto
    {
        use Moose;

        B<< has 'nome', is => 'ro', isa => 'Str'; >>
    }

=end programlisting

Parafrasato in italiano, questo codice dice che che "gli oggetti C<Gatto> hanno un attributo C<nome>.  Tale
attributo è di sola lettura ed è una stringa".

Moose fornisce la funzione C<has()>, che dichiara un attributo. Il primo
argomento, C<'nome'> nel nostro esempio, è il nome dell'attributo.  La coppia di argomenti C<< is => 'ro' >>
specifica che l'attributo è C<r>ead C<o>nly, ovvero che non potete
modificarlo dopo averlo inizializzato. Infine, la coppia C<< isa => 'Str' >> specifica
che il valore dell'attributo può essere solo una C<str>inga.

X<metodi; accessore>
X<OO; metodi accessori>

In conseguenza all'esecuzione di C<has>, Moose crea un metodo I<accessore> chiamato C<nome()> e
vi permette di passare un parametro C<nome> al costruttore di C<Gatto>:

=begin programlisting

    for my $nome (qw( Tuxie Petunia Daisy ))
    {
        my $gatto = Gatto->new( nome => $nome );
        say "Creato un gatto chiamato ", $gatto->nome();
    }

=end programlisting

=begin sidebar

La documentazione di Moose usa delle parentesi per separare i nomi degli attributi
dalle loro caratteristiche:

=begin programlisting

        has 'nome' => ( is => 'ro', isa => 'Str' );

=end programlisting

Tale sintassi è equivalente a:

=begin programlisting

    has( 'nome', 'is', 'ro', 'isa', 'Str' );

=end programlisting

L'approccio di Moose è appropriato per dichiarazioni complesse:

=begin programlisting

    has 'nome' => (
        is         => 'ro',
        isa        => 'Str',

        # opzioni avanzate di Moose; perldoc Moose
        init_arg   => undef,
        lazy_build => 1,
    );

=end programlisting

... mentre questo libro adotta l'altra punteggiatura vista sopra per semplici dichiarazioni.
Scegliete la punteggiatura che vi permette di essere più chiari.

=end sidebar

X<attributi; senza tipo>

Se passate qualcosa che non sia una stringa, Moose avrà da ridire. Va però ricordato che gli
attributi non I<devono> necessariamente avere un tipo. In tal caso, accettano tutto:

=begin programlisting

    package Gatto
    {
        use Moose;

        has 'nome', is => 'ro', isa => 'Str';
        B<< has 'eta',  is => 'ro'; >>
    }

    my $sbagliato = Gatto->new( nome => 'micio',
                                eta  => 'bizzarro' );

=end programlisting

Specificando un tipo permettete a Moose di effettuare delle validazioni sui dati al posto vostro.
Talvolta i benefici di una maggior rigidità sono inestimabili.

X<attributi; C<rw> (read-write)>
X<metodi; mutatore>
X<OO; metodi mutatori>

Se dichiarate un attributo come leggibile I<e> scrivibile (con C<< is => rw >>),
Moose crea un metodo I<mutatore> che può modificare il valore dell'attributo:

=begin programlisting

    package Gatto
    {
        use Moose;

        has 'nome', is => 'ro', isa => 'Str';
        has 'eta',  is => 'ro', isa => 'Int';
        B<< has 'dieta', is => 'rw'; >>
    }

    my $grasso = Gatto->new( nome  => 'Ciccio',
                           eta   => 8,
                           dieta => 'Frutti di Mare' );

    say $grasso->nome(), ' mangia ', $grasso->dieta();

    B<< $grasso->dieta( 'Crocchette a Basso Contenuto di Sodium' ); >>
    say $grasso->nome(), ' ora mangia ', $grasso->dieta();

=end programlisting

L'uso di un accessore C<ro> come mutatore solleva l'eccezione C<Cannot assign a
value to a read-only accessor at ...> (NdT: "Non posso assegnare un valore a un accessore di sola lettura ...").

L'uso di C<ro> oppure di C<rw> è determinato da scelte di progetto, di convenienza e di purezza di stile. Moose
non impone alcuna filosofia particolare a questo riguardo. Alcune persone suggeriscono di rendere C<ro>
tutti i dati d'istanza, in modo che dobbiate passare tali dati d'istanza al costruttore
(L<immutability>). Nell'esempio della classe C<Gatto>, C<eta()> potrebbe continuare ad essere un accessore,
ma il costruttore potrebbe ricevere l'I<anno> di nascita del gatto e calcolare automaticamente
l'età in base all'anno corrente. Questo approccio rafforza il codice di validazione
e garantisce che tutti gli oggetti creati abbiano dati validi.

I dati d'istanza sono una prima dimostrazione dei benefici dell'orientamento agli oggetti. Un oggetto
contiene dati correlati e può effettuare operazioni con tali dati. Una classe
descrive sia i dati che le operazioni associate.

=head2 Incapsulamento

X<incapsulamento>
X<OO; incapsulamento>

Moose vi permette di dichiarare I<quali> sono gli attributi delle istanze di una classe (un gatto
ha un nome) e quali sono gli attributi di tali attributi (non potete modificare il
nome di un gatto; potete solo leggerlo). Moose stesso decide come I<memorizzare> tali
attributi. Se volete potete cambiare questo comportamento, ma permettere a Moose di gestire per voi
la memorizzazione incoraggia l'I<incapsulamento>, ovvero la capacità di mantenere i dettagli interni di un oggetto
nascosti agli utenti esterni di tale oggetto.

Considerate un cambiamento nel modo un cui un C<Gatto> gestisce la propria età. Invece di passare al costruttore un
valore per l'età, dovete passare l'anno di nascita del gatto e
calcolare l'età quando serve:

=begin programlisting

    package Gatto
    {
        use Moose;

        has 'nome',        is => 'ro', isa => 'Str';
        has 'dieta',       is => 'rw';
        B<< has 'anno_nascita',  is => 'ro', isa => 'Int'; >>

        B<sub eta>
        B<{>
            B<my $self = shift;>
            B<my $anno = (localtime)[5] + 1900;>

            B<< return $anno - $self->anno_nascita(); >>
        B<}>
    }

=end programlisting

Mentre è cambiata la sintassi per I<creare> gli oggetti C<Gatto>, la sintassi per
I<usarli> è rimasta invariata. Al di fuori di C<Gatto>, C<eta()> funziona esattamente come
ha sempre fatto. I<Come> essa funzioni internamente è un dettaglio interno alla classe C<Gatto>.

=begin tip Compatibilità e API

Potete preservare la vecchia sintassi per I<creare> oggetti C<Gatto> personalizzando il
costruttore generato per C<Gatto> in modo da permettere il passaggio di un parametro C<eta>. Con esso,
potete poi calcolare C<anno_nascita>. Vedete C<perldoc Moose::Manual::Attributes>.

=end tip

X<attributi; valori di default>

Il calcolo dell'età ha un altro vantaggio. Un I<valore di default dell'attributo> può aiutare a
fare la cosa giusta quando qualcuno crea un nuovo oggetto C<Gatto> senza passare un
anno di nascita:

=begin programlisting

    package Gatto
    {
        use Moose;

        has 'nome',  is => 'ro', isa => 'Str';
        has 'dieta', is => 'rw', isa => 'Str';

        B<< has 'anno_nascita', >>
            B<< is      => 'ro', >>
            B<< isa     => 'Int', >>
            B<< default => sub { (localtime)[5] + 1900 }; >>
    }

=end programlisting

La parola chiave C<default> nella dichiarazione di un attributo riceve un riferimento a funzioneN<Potete anche usare
direttamente un valore semplice come un numero o una stringa, ma usate un riferimento
a funzione se avete bisogno di cose più complesse.> che restituisce il valore di default per tale
attributo quando viene costruito un nuovo oggetto. Se il codice che crea un oggetto non passa
alcun valore per quell'attributo al costruttore, viene usato il valore di default. Se scrivete:

=begin programlisting

    my $gattino = Gatto->new( nome => 'Choco' );

=end programlisting

... il nuovo gattino avrà età C<0> fino al prossimo anno.

=head3 Polimorfismo

L'incapsulamento è utile, ma la vera potenza dell'orientamento agli oggetti è molto
più ampia. Un programma OO ben progettato può gestire molti tipi di dati. Quando
delle classi ben progettate incapsulano i dettagli specifici degli oggetti in modo
appropriato, succede qualcosa di curioso: spesso il codice diventa I<meno>
specifico.

Definire i dettagli di ciò che il programma sa di ciascun C<Gatto> (gli
attributi) e di ciò che un C<Gatto> può fare (i metodi) all'interno della
classe C<Gatto> permette al codice che deve gestire le istanze di C<Gatto> di
ignorare I<come> un C<Gatto> fa ciò che fa.

Considerate una funzione che visualizza i dettagli di un oggetto:

=begin programlisting

    sub mostra_stat_vitali
    {
        my $oggetto = shift;

        say 'Il mio nome e` ', $oggetto->nome();
        say 'La mia eta` e` ', $oggetto->eta();
        say 'Mangio ',         $oggetto->dieta();
    }

=end programlisting

X<genericità>
X<OO; genericità>

È ovvio che, dato il presente contesto, questa funzione opera correttamente su un oggetto
C<Gatto>. In effetti, essa opera correttamente su qualunque oggetto che abbia i tre accessori
appropriati, indipendente da I<come> tale oggetto fornisce i tre accessori e
dal I<tipo> dell'oggetto: C<Gatto>, C<Bruco> o C<PesceGatto>. La
funzione è sufficientemente generica da accettare come parametro valido
qualunque oggetto che rispetti questa interfaccia.

X<polimorfismo>
X<OO; polimorfismo>

La proprietà del I<polimorfismo> significa che potete sostituire un oggetto di una
classe con un oggetto di un'altra classe purché forniscano la stessa interfaccia
esterna.

=begin tip Duck Typing

X<duck typing>
X<OO; duck typing>

Alcuni linguaggi e ambienti richiedono che esista una relazione formale tra due
classi per permettere a un programma di sostituire le istanze di una con quelle dell'altra.  Perl
5 fornisce dei modi di imporre questi controlli, ma non li richiede. Per
il suo sistema ad-hoc di default è sufficiente che due istanze qualunque abbiano metodi con
lo stesso nome per poterle trattare come equivalenti. Alcune persone lo definiscono I<duck typing>, sostenendo che
qualunque oggetto che può fare C<qua()> è sufficientemente simile a un'anatra perché possiate trattarlo
effettivamente come un'anatra.

=end tip

C<mostra_stat_vitali()> si preoccupa soltanto che un invocante valido supporti
tre metodi--C<nome()>, C<eta()> e C<dieta()>--che non ricevono argomenti e
restituiscono qualcosa che può essere concatenato in contesto stringa. Potreste
avere centinaia di classi diverse nel vostro codice, non legate da relazioni
ovvie, che funzionano tutte con questo metodo purché si conformino al comportamento
atteso.

Immaginate di dover passare in rassegna tutti gli animali di uno zoo senza poter
usare una funzione polimorfa. I benefici della genericità dovrebbero essere evidenti. Inoltre, gli
eventuali dettagli che differenziano il calcolo dell'età di un gattopardo e di una piovra possono
essere specificati nelle relative classi--dove tali dettagli sono importanti.

Naturalmente, la mera esistenza di un metodo C<nome()> o di un metodo C<eta()> non ha
di per sé stessa implicazioni sul comportamento di un oggetto. Un oggetto C<Cane> potrebbe avere un
accessore C<taglia()> tramite il quale potete scoprire che C<$rodney> è di taglia piccola e
C<$lucky> è di taglia media. Un oggetto C<Formaggio> potrebbe avere un metodo C<taglia()> che vi permette di
preparare delle fette di C<$fontina> da mettere in un panino. C<taglia()> può essere un accessore
in una classe e non in un'altra:

=begin programlisting

    # di che taglia e` il cane?
    my $dimensioni = $zeppie->taglia();

    # e` ora di uno spuntino
    $formaggio->taglia();

=end programlisting

Talvolta è utile sapere I<che cosa> fa un oggetto e qual è il I<significato> di ciò che fa.

=head2 Ruoli

Z<roles>
X<ruoli>

Un I<ruolo> è una collezione di comportamenti e variabili di stato con un nomeN<Vedete i documenti di
progetto di Perl 6 sui ruoli all'URL U<http://feather.perl6.nl/syn/S14.html> e le ricerche sui trait
di Smalltalk all'URL U<http://scg.unibe.ch/research/traits> per avere abbondanti
dettagli.>. Mentre una classe organizza i comportamenti e lo stato in un modello per la creazione di
oggetti, un ruolo organizza e assegna un nome a una collezione di comportamenti e variabili di stato. Potete
istanziare una classe, ma non un ruolo. Un ruolo rappresenta qualcosa che la classe fa.

Dato un C<Animale> che ha una taglia e un C<Formaggio> che potete tagliare, una
differenza potrebbe essere che C<Animale> ha il ruolo di C<EssereVivente>, mentre il
C<Formaggio> ha il ruolo di C<Cibo>:

=begin programlisting

    package EssereVivente
    {
        use Moose::Role;

        requires qw( nome eta dieta taglia );
    }

=end programlisting

Qualunque cosa abbia questo ruolo deve fornire i metodi C<nome()>, C<eta()>, C<dieta> e
C<taglia()>. La classe C<Gatto> deve esplicitare il fatto che ha tale ruolo:

=begin programlisting

    package Gatto
    {
        use Moose;

        has 'nome',   is => 'ro', isa => 'Str';
        has 'dieta',  is => 'rw', isa => 'Str';
        has 'taglia', is => 'ro', isa => 'Str';

        has 'anno_nascita',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        B<with 'EssereVivente';>

        sub eta { ... }
    }

=end programlisting

X<ruoli; composizione>

La linea che inizia con C<with> fa sì che Moose I<componga> il ruolo C<EssereVivente> nella classe
C<Gatto>. La composizione garantisce che tutti gli attributi e i metodi del ruolo facciano
parte della classe. C<EssereVivente> richiede a ogni classe in cui viene composto di fornire dei
metodi C<nome()>, C<eta()>, C<dieta()> e C<taglia()>. C<Gatto> soddisfa questo
vincolo. Se invece C<EssereVivente> venisse composto in una classe che non fornisce tali
metodi, Moose solleverebbe un'eccezione.

=begin tip L'Ordine Conta!

La parola chiave C<with> usata per applicare dei ruoli a una classe deve comparire I<dopo>
le dichiarazioni di attributi in modo che la composizione possa identificare i metodi accessori
generati.

=end tip

Adesso tutte le istanze di C<Gatto> restituiranno un valore vero quando domandate loro se forniscono
il ruolo C<EssereVivente>. Gli oggetti C<Formaggio> invece dovrebbero restituire falso:

=begin programlisting

    say 'Vivo!'      if $fuffy->DOES('EssereVivente');
    say 'Ammuffito!' if $formaggio->DOES('EssereVivente');

=end programlisting

Questa tecnica di progettazione separa le I<capacità> delle classi e degli oggetti
dall'I<implementazione> di tali classi e oggetti. Il calcolo dell'età a partire dall'anno di
nascita nella classe C<Gatto> potrebbe essere a sua volta un ruolo:

=begin programlisting

    package CalcolaEta::Da::AnnoNascita
    {
        use Moose::Role;

        has 'anno_nascita',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        sub eta
        {
            my $self = shift;
            my $anno = (localtime)[5] + 1900;

            return $anno - $self->anno_nascita();
        }
    }

=end programlisting

L'estrazione di questo ruolo da C<Gatto> rende il suo utile comportamento disponibile ad altre
classi. Ora possiamo comporre entrambi i ruoli in C<Gatto>:

=begin programlisting

    package Gatto
    {
        use Moose;

        has 'nome',   is => 'ro', isa => 'Str';
        has 'dieta',  is => 'rw';
        has 'taglia', is => 'ro', isa => 'Str';

        B<with 'EssereVivente',>
             B<'CalcolaEta::Da::AnnoNascita';>
    }

=end programlisting

Notate che il metodo C<eta()> di C<CalcolaEta::Da::AnnoNascita> soddisfa il vincolo
posto dal ruolo C<EssereVivente>. Notate anche che ogni controllo relativo al fatto che
C<Gatto> abbia il ruolo di C<EssereVivente> restituisce un valore vero. Estrarre il metodo C<eta()> in un
ruolo ha modificato soltanto i dettagli di I<come> C<Gatto> calcola un'età. Il fatto che
sia un C<EssereVivente> rimane valido. C<Gatto> può decidere se implementare l'età da sé oppure
ottenerla da qualcun altro. Ciò che conta è che esso fornisca un metodo C<eta()> per
soddisfare i vincoli di C<EssereVivente>.

X<allomorfismo>
X<ruoli; allomorfismo>

Così come il polimorfismo indica che potete gestire nello stesso modo oggetti diversi che hanno
uno stesso comportamento, questo I<allomorfismo> indica che un oggetto può
implementare uno stesso comportamento in diversi modi.

Un uso pervasivo dell'allomorfismo può ridurre le dimensioni delle vostre classi e incrementare la quantità
di codice che condividono. Vi permette anche di dare un nome a una specifica collezione 
di comportamenti--una cosa molto utile per testare le capacità anziché le
implementazioni.

X<OO; mixin>
X<OO; ereditarietà multipla>
X<OO; monkeypatching>

Per confrontare i ruoli con altre tecniche di progettazione quali i mixin, l'ereditarietà
multipla e il monkeypatching, vedete
U<http://www.modernperlbooks.com/mt/2009/04/the-why-of-perl-roles.html>.

=head3 Ruoli e DOES()

X<C<DOES()>>
X<Moose; C<DOES()>>

Quando componete un ruolo in una classe, tale classe e le sue istanze restituiscono un valore
vero se chiamate C<DOES()> su di esse:

=begin programlisting

    say 'Questo e` un Gatto vivo!'
        if $micio->DOES( 'EssereVivente' );

=end programlisting

=head2 Ereditarietà

Z<inheritance>

X<ereditarietà>
X<OO; ereditarietà>
X<Moose; ereditarietà>

Il sistema ad oggetti di Perl 5 supporta l'I<ereditarietà>, che stabilisce una
relazione tra due classi in base alla quale una delle due classi specializza l'altra. La classe
derivata si comporta come la superclasse--ha lo stesso numero e tipo di
attributi e può usare gli stessi metodi. Anche se una classe derivata può avere dati e
comportamenti aggiuntivi, potete sempre utilizzare una sua istanza dove il codice
si aspetta un'istanza della superclasse. In un certo senso, una sottoclasse fornisce il ruolo implicato dall'esistenza
della sua superclasse.

=begin tip Ruoli e Ereditarietà

È meglio usare i ruoli o l'ereditarietà? I ruoli garantiscono composizioni sicure,
un miglior controllo sui tipi, una maggior fattorizzazione del codice e un controllo più granulare sui
nomi e i comportamenti, ma l'ereditarietà è più familiare agli sviluppatori con esperienza in
altri linguaggi. Usate l'ereditarietà quando una classe è realmente un'I<estensione> di un'altra.
Usate invece un ruolo quando una classe necessita di comportamenti aggiuntivi ed è possibile assegnare un nome significativo
alla collezione di tali comportamenti.

=end tip

Considerate una classe C<SorgenteLuminosa> che fornisce due attributi pubblici
(C<attiva> e C<candele>) e due metodi (C<accendi> e C<spegni>):

=begin programlisting

    package SorgenteLuminosa
    {
        use Moose;

        has 'candele', is      => 'ro',
                       isa     => 'Int',
                       default => 1;

        has 'attiva',  is      => 'ro',
                       isa     => 'Bool',
                       default => 0,
                       writer  => '_imposta_attiva';

        sub accendi
        {
            my $self = shift;
            $self->_imposta_attiva(1);
        }

        sub spegni
        {
            my $self = shift;
            $self->_imposta_attiva(0);
        }
    }

=end programlisting

(Notate che l'opzione C<writer> di C<attiva> crea un accessore privato utilizzabile
all'interno della classe per impostare il valore di tale attributo).

=head3 Ereditarietà e Attributi

Una sottoclasse di C<SorgenteLuminosa> potrebbe definire una maxi-candela che fornisce
una quantità di luce cento volte superiore:

=begin programlisting

    package MaxiCandela
    {
        use Moose;

        B<extends 'SorgenteLuminosa'>;

        has 'B<+>candele', default => 100;
    }

=end programlisting

X<Moose; C<extends>>

C<extends> riceve una lista di nomi di classi da usare come superclassi della classe corrente.
Se questa fosse l'unica istruzione nella classe qui sopra, gli oggetti C<MaxiCandela> si comporterebbero
esattamente come gli oggetti C<SorgenteLuminosa>. In particolare, avrebbero gli attributi C<candele> e
C<attiva> e i metodi C<accendi()> e C<spegni()>.

Il C<+> all'inizio di un nome di attributo (come C<candele>) indica
che la classe corrente tratta quell'attributo in modo speciale. In questo caso
maxi-candela sovrascrive il valore di default della sorgente luminosa, in modo che ogni nuova
C<MaxiCandela> abbia una potenza di 100 candele.

Quando invocate il metodo C<accendi()> o C<spegni()> su un oggetto C<MaxiCandela>, Perl
lo cerca anzitutto nella classe C<MaxiCandela>, e quindi in ciascuna superclasse. Nel
nostro esempio, tali metodi si trovano nella classe C<SorgenteLuminosa>.

X<Moose; ereditarietà di attributi>

L'ereditarietà di attributi funziona in modo simile (vedete C<perldoc Class::MOP>).

=head3 Ordine di Dispatch dei Metodi

X<metodi; risoluzione>
X<ordine di risoluzione dei metodi>
X<metodi; ordine di dispatch>
X<ereditarietà multipla>
X<oggetti; ereditarietà>
X<oggetti; ereditarietà multipla>
X<MRO>

L'I<ordine di dispatch dei metodi>--o ordine di risoluzione dei metodi (I<MRO> dall'inglese I<method resolution order>, NdT)--è banale
per le classi con un'unica superclasse. Si cerca nella classe dell'oggetto, quindi nella sua superclasse e così via
finchè non si trova il metodo oppure si arriva al termine della catena di superclassi. Le classi che ereditano da
diverse superclassi (I<ereditarietà multipla>)--C<Hovercraft> estende sia C<Barca>
che C<Automobile>--richiedono un dispatch più sofisticato. Ragionare sull'ereditarietà multipla è
complicato; quando è possibile, evitatela.

Perl 5 adotta una strategia di risoluzione in profondità. Cerca nella
I<prima> superclasse e, ricorsivamente, in tutte le superclassi di tale superclasse prima
di cercare nelle superclassi successive. La direttiva C<mro> (L<pragmas>)
fornisce strategie alternative, inclusa la strategia MRO C3 che cerca in tutte le
superclassi immediate di una data classe prima di cercare nelle loro superclassi.

Vedete C<perldoc mro> per maggiori dettagli.

=head3 Ereditarietà e Metodi

X<Moose; sovrascrittura di metodi>
X<Moose; C<sovrascrittura>>

Come per gli attributi, le sottoclassi possono sovrascrivere dei metodi. Immaginate una luce che non potete
spegnere:

=begin programlisting

    package Lightstick
    {
        use Moose;

        extends 'SorgenteLuminosa';

        sub spegni {}
    }

=end programlisting

Chiamare C<spegni()> su un lightstick non ha alcun effetto, nonostante
il corrispondente metodo in C<SorgenteLuminosa> ne abbia. Il dispatch di metodi trova il metodo della
sottoclasse, che non sempre è ciò che desideravate. Se invece questa era davvero la vostra intenzione,
usate l'C<override> di Moose per esprimerla chiaramente.

All'interno di un metodo che ne sovrascrive un altro, la funzione C<super()> di Moose vi permette di chiamare il
metodo sovrascritto:

=begin programlisting

    package SorgenteLuminosa::Pignola
    {
        use Carp 'carp';
        use Moose;

        extends 'SorgenteLuminosa';

        B<override> accendi => sub
        {
            my $self = shift;

            carp "Non posso accendere una luce gia` accesa!"
                if $self->attiva;

            B<super()>;
        };

        B<override> spegni => sub
        {
            my $self = shift;

            carp "Non posso spegnere una luce gia` spenta!"
                unless $self->enabled;

            B<super()>;
        };
    }

=end programlisting

Questa sottoclasse genera un messaggio quando provate ad accendere o spegnere una sorgente di luce che
si trova già in quello stato. La funzione C<super()> fa il dispatch all'implementazione del metodo
corrente più vicina nella catena delle superclassi, seguendo il normale ordine di risoluzione di Perl 5.

=begin tip Tutta la potenza di Moose

I modificatori di metodo di Moose permettono di fare altre cose simili--e molto di più. Vedete C<perldoc
Moose::Manual::MethodModifiers>.

=end tip

=head3 Ereditarietà e isa()

X<C<isa()>>
X<Moose; C<isa()>>

Il metodo Perl C<isa()> restituisce vero se il suo invocante è o estende una classe con
un dato nome. Tale invocante può essere il nome di una classe o una sua istanza:

=begin programlisting

    say 'Sembrerebbe una SorgenteLuminosa'
        if $applique->isa( 'SorgenteLuminosa' );

    say 'Gli ominidi non emettono luce'
        unless $gorilla->isa( 'SorgenteLuminosa' );

=end programlisting

=head2 Moose e il Sistema OO di Perl 5

X<Moose; confronto con il sistema OO di default di Perl 5>

Moose fornisce molte funzionalità in più del sistema OO di default di Perl 5. Vale sicuramente la pena di usarlo
anche se, in linea di principio, I<potete> implementare voi stessi tutto ciò che Moose vi mette a disposizione (L<blessed_references>) oppure
assemblarlo alla meno peggio a partire da diverse distribuzioni CPAN. Moose rappresenta un
tutto coerente ed è corredato di documentazione di buona qualità. Molti progetti importanti lo usano
con successo, e la sua comunità di sviluppatori è attenta e matura.

X<metaprogrammazione>
X<Moose; MOP>
X<Moose; metaprogrammazione>
X<C<Class::MOP>>
X<C<Class::MOP::Class>>

Moose si occupa dei costruttori, dei distruttori, degli accessori e dell'incapsulamento.
A voi spetta il compito di dichiarare ciò che volete, ma ciò che ne ottenete è codice sicuro
e facile da usare. Gli oggetti Moose possono estendere e funzionare con oggetti del
sistema base di Perl 5.

Moose permette anche la I<metaprogrammazione>--ovvero la manipolazione dei vostri oggetti attraverso lo stesso
Moose. Se vi capitasse di chiedervi quali metodi sono disponibili in una classe o in un
oggetto, oppure quali attributi sono supportati da un oggetto, queste informazioni sono a vostra disposizione:

=begin programlisting

    my $metaclasse = Pantaloni::Corti->meta();

    say 'le istanze di Pantaloni::Corti hanno gli attributi:';

    say $_->name for $metaclasse->get_all_attributes;

    say 'le istanze di Pantaloni::Corti supportano i metodi:';

    say $_->fully_qualified_name
        for $metaclasse->get_all_methods;

=end programlisting

Potete anche scoprire quali sono le classi derivate da una data classe:

=begin programlisting

    my $metaclasse = Pantaloni->meta();

    say 'Pantaloni e` superclasse di:';

    say $_ for $metaclasse->subclasses;

=end programlisting

Vedete C<perldoc Class::MOP::Class> per maggiori informazioni sulle operazioni delle
metaclassi e C<perldoc Class::MOP> per informazioni sulla metaprogrammazione in Moose.

Moose e il suo I<protocollo di meta-oggetti> (I<MOP> dall'inglese I<meta-object protocol>, NdT) offre una
sintassi migliore per dichiarare e lavorare con le classi e gli oggetti in Perl 5.
Questo codice è valido in Perl 5:

=begin programlisting

    use MooseX::Declare;

    B<role> EssereVivente { requires qw( name eta dieta ) }

    B<role> CalcolaEta::Da::AnnoNascita
    {
        has 'anno_nascita',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        B<method> eta
        {
            return (localtime)[5] + 1900
                                  - $self->anno_nascita();
        }
    }

    B<class Gatto with EssereVivente>
              B<with CalcolaEta::Da::AnnoNascita>
    {
        has 'nome',  is => 'ro', isa => 'Str';
        has 'dieta', is => 'rw';
    }

=end programlisting

X<CPAN; C<MooseX::Declare>>
X<CPAN; C<Devel::Declare>>

La distribuzione CPAN C<MooseX::Declare> usa C<Devel::Declare> per aggiungere
sintassi specifica per Moose. Le parole chiave C<class>, C<role> e C<method> riducono
la quantità di copia e incolla necessario per scrivere del codice orientato agli oggetti di buona qualità in Perl 5.
Notate in particolare la natura dichiarativa di questo esempio e l'assenza di
C<my $self = shift;> in C<eta()>.

Anche se Moose non fa parte dei pacchetti preinstallati con Perl 5, la sua popolarità garantisce che esso è
disponibile per molti sistemi operativi. Anche le distribuzioni di Perl 5 Strawberry
Perl e ActivePerl lo includono. Anche se Moose è un modulo CPAN anziché una libreria
core, la sua purezza di stile e semplicità lo rendono essenziale per la programmazione moderna
in Perl.

=begin tip Snellire l'I<Alce>

X<CPAN; C<Any::Moose>>

Moose non è una libreria leggera, ma è molto potente. Il modulo CPAN C<Any::Moose>
aiuta a ridurre i costi delle funzionalità che non usate.

=end tip
