=head1 Controllo di Flusso

Z<control_flow>

X<controllo di flusso>

Il I<controllo di flusso> di base del Perl è molto semplice. L'esecuzione del programma comincia dall'inizio
(la prima linea del file da eseguire) e prosegue fino alla fine:

=begin programlisting

    say 'All'inizio';
    say 'In mezzo';
    say 'Alla fine';

=end programlisting

X<direttive di controllo di flusso>

Le I<direttive di controllo di flusso> del Perl modificano l'ordine di esecuzione--ovvero che cosa
avviene al prossimo passo nel programma--in base ai valori delle loro espressioni.

=head2 Direttive di Scelta

X<direttive di controllo di flusso; C<if>>

La direttiva C<if> esegue l'azione associata solo quando la sua espressione condizionale
ha valore I<vero>:

=begin programlisting

    say 'Ciao, Roberto!' if $nome eq 'Roberto';

=end programlisting

La forma postfissa è adeguata in caso di espressioni semplici. La forma a blocco raggruppa
diverse espressioni in una singola unità:

=begin programlisting

    if ($nome eq 'Roberto')
    {
        say 'Ciao, Roberto!';
        trovato_roberto();
    }

=end programlisting

Mentre la forma a blocco richiede che la condizione sia tra parentesi, la forma postfissa
non lo richiede.

L'espressione condizionale può consistere di diverse sotto-espressioni, purchè
esse compongano un'unica espressione principale:

=begin programlisting

    if ($nome eq 'Roberto' && not salutato_roberto())
    {
        say 'Ciao, Roberto!';
        trovato_roberto();
    }

=end programlisting

Nella forma postfissa, aggiungere delle parentesi può aiutare a chiarire il significato del codice al
costo di una minor eleganza visiva:

=begin programlisting

    saluta_roberto() if ($nome eq 'Roberto' && not salutato_roberto());

=end programlisting

X<direttice di controllo di flusso; C<unless>>

La direttiva C<unless> è una forma negata di C<if>. Perl esegue l'azione
quando l'espressione condizionale è I<falsa>:

=begin programlisting

    say "Tu non sei Roberto!" unless $nome eq 'Roberto';

=end programlisting

Come C<if>, anche C<unless> ha una forma a blocco, anche se molti programmatori la evitano
poichè diventa rapidamente difficile da leggere in presenza di condizionali complessi:

=begin programlisting

    unless (anno_bisestile() and luna_piena())
    {
        spassatela();
        fai_capriole();
    }

=end programlisting

C<unless> è particolarmente adatta ad essere usata con condizionali postfissi, specialmente per la validazione
dei parametri delle funzioni (L<postfix_parameter_validation>):

=begin programlisting

    sub spassatela
    {
        return unless @_;

        for my $canzone (@_) { ... }
    }

=end programlisting

X<direttive di controllo di flusso; C<else>>

Entrambe le forme a blocco di C<if> e C<unless> accettano la direttiva C<else>,
che specifica il codice da eseguire quanddo l'espressione condizionale non ha valore
vero (per C<if>) o falso (per C<unless>):

=begin programlisting

    if ($nome eq 'Roberto')
    {
        say 'Ciao, Roberto!';
        accogli_utente();
    }
    else
    {
        say "Non ti conosco.";
        ignora_utente();
    }

=end programlisting

I blocchi C<else> vi permettono di riscrivere i condizionali C<if> e C<unless>
l'uno nei termini dell'altro:

=begin programlisting

    unless ($nome eq 'Roberto')
    {
        say "Non ti conosco.";
        ignora_utente();
    }
    else
    {
        say 'Ciao, Roberto!';
        accogli_utente();
    }

=end programlisting

Tuttavia, la doppia negazione implicita nell'uso di C<unless> con un blocco C<else>
può creare confusione. Questo esempio potrebbe essere l'unico posto dove vi capiterà di vederlo.

Così come vi fornisce sia C<if> che C<unless> per permettervi di esprimere i vostri condizionali
nel modo più leggibile, il Perl vi permette anche di scegliere tra operatori condizionali 
positivi e negativi:

=begin programlisting

    if ($nome B<ne> 'Roberto')
    {
        say "Non ti conosco.";
        ignora_utente();
    }
    else
    {
        say 'Ciao, Roberto!';
        accogli_utente();
    }

=end programlisting

... anche se la doppia negazione implicita nella presenza del blocco C<else>
suggerirebbe di invertire il condizionale.

X<direttive di controllo di flusso; C<elsif>>

Una o più direttive C<elsif> possono seguire un blocco C<if> e precedere
un singolo C<else>:

=begin programlisting

    if ($nome eq 'Roberto')
    {
        say 'Ciao, Roberto!';
        accogli_utente();
    }
    elsif ($nome eq 'Giacomo')
    {
        say 'Ciao, Giacomo!';
        accogli_utente();
    }
    else
    {
        say "Non sei mio zio.";
        ignora_utente();
    }

=end programlisting

Anche un blocco C<unless> può essere seguito da un blocco C<elsif>N<Buona fortuna se volete capirci qualcosa!>. 
Invece non esiste C<elseunless>.

Scrivere C<else if> costituisce un errore di sintassiN<Larry preferisce C<elsif> per ragioni
estetiche, come nell'antica arte del linguaggio Ada.>:

=begin programlisting

    if ($nome eq 'Riccardo')
    {
        say 'Ciao, cugino!';
    }

    # attenzione; errore di sintassi
    else if ($nome eq 'Cristina')
    {
        say 'Ciao, cugina!';
    }

=end programlisting

=head2 L'Operatore Condizionale Ternario

X<condizionale ternario>
X<direttive di controllo di flusso; condizionale ternario>

L'operatore I<condizionale ternario> valuta un'espressione condizionale e
sceglie tra due alternative:

=begin programlisting

    my $suffisso_temporale = dopo_pranzo($tempo)
                           ? 'pomeriggio'
                           : 'mattino';

=end programlisting

L'espressione condizionale precede il carattere punto interrogativo (C<?>) e il
carattere due punti (C<:>) separa le due alternative. Le alternative sono
espressioni di complessità arbitraria--incluse altre espressioni condizionali
ternarie.

=begin sidebar

Un idioma interessante, anche se un po' oscuro, è l'uso del condizionale ternario per scegliere
tra I<variabili> alternative, anzichè valori:

=begin programlisting

    push @{ rand() > 0.5 ? \@squadra_rossa : \@squadra_blu },
        Giocatore->new;

=end programlisting

Come al solito, valutate i benefici della chiarezza rispetto ai benefici della concisione.

=end sidebar

=head3 Cortocircuiti

Z<short_circuiting>
X<corto-circuiti>

Il Perl può I<cortocircuitare> parti di espressioni condizionali
complesse. Quando Perl è in grado di determinare che un'espressione complessa
è vera o falsa senza aver ancora valutato tutte le sue sottoespressioni,
le sottoespressioni rimanenti non vengono più valutate. Un esempio dovrebbe aiutare a
chiarire:

=begin programlisting

    say "Entrambi veri!" if ok( 1, 'sottoespressione uno' )
                         && ok( 1, 'sottoespressione due' );

    done_testing();

=end programlisting

Il valore di ritorno di C<ok()> (L<testing>) è il valore booleano ottenuto
valutando il suo primo argomento, quindi questo codice stampa:

=begin screen

    ok 1 - sottoespressione uno
    ok 2 - sottoespressione due
    Entrambi veri!

=end screen

Quando la prima sottoespressione--la prima chiamata a C<ok>--ha valore vero,
Perl deve valutare la seconda sottoespressione. Se invece la prima sottoespressione
avesse valore falso, non sarebbe necessario valutare le sottoespressioni
successive, dato che l'intera espressione non potrà comunque essere vera:

=begin programlisting

    say "Entrambi veri!" if ok( 0, 'sottoespressione uno' )
                         && ok( 1, 'sottoespressione due' );

=end programlisting

Questo esempio stampa:

=begin screen

    not ok 1 - sottoespressione uno

=end screen

Sebbene la seconda sottoespressione sia ovviamente vera, Perl non la
valuta. Lo stesso tipo di cortocircuito si applica alle operazioni di
or logico:

=begin programlisting

    say "Almeno uno vero!" if ok( 1, 'sottoespressione uno' )
                           || ok( 1, 'sottoespressione due' );

=end programlisting

Questo esempio stampa:

=begin screen

    ok 1 - sottoespressione uno
    Almeno uno vero!

=end screen

Dato il successo della prima sottoespressione, Perl può evitare di valutare la
seconda sottoespressione. Se la prima sottoespressione fosse stata falsa, il risultato della
valutazione della seconda sottoespressione avrebbe determinato il risultato della valutazione
dell'intera espressione.

Oltre a permettervi di evitare computazioni potenzialmente costose, i
cortocircuiti possono aiutarvi a evitare errori e warning, come nel caso in cui
l'uso di un valore non definito potrebbe causare un warning:

=begin programlisting

    my $barbecue;
    if (defined $barbecue and $barbecue eq 'salsiccia') { ... }

=end programlisting

=head2 Contesto per le Direttive Condizionali

X<contesto; condizionale>
X<booleano; vero>
X<vero>
X<falso>

Le direttive condizionali--C<if>, C<unless> e l'operatore condizionale
ternario--valutano tutte un'espressione in contesto booleano
(L<context_philosophy>). Così come gli operatori C<eq>, C<==>, C<ne>
e C<!=> producono tutti un risultato booleano quando vengono valutati, Perl converte i risultati
di altre espressioni--inclusi variabili e valori--in forma booleana.

Perl 5 non ha un unico valore vero, nè un unico valore falso. Tutti i numeri che
hanno valore 0 rappresentano il valore falso. Tra questi: C<0>, C<0.0>, C<0e0>, C<0x0>, ecc.
La stringa vuota (C<''>) e la stringa C<'0'> hanno valore falso, ma non le stringhe
C<'0.0'>, C<'0e0'>, ecc. L'idioma C<'0 ma vero'> valuta a 0
in contesto numerico e a vero in contesto booleano, grazie al suo contenuto come stringa.

Sia la lista vuota che C<undef> hanno valore falso. Gli array e gli hash
vuoti restituiscono il numero 0 in contesto scalare, e quindi hanno valore falso
in contesto booleano. Un array che contiene un unico elemento--anche se fosse
C<undef>--valuta a vero in contesto booleano. Un hash che contiene qualche elemento
--anche una chiave con valore associato C<undef>--valuta a vero in
contesto booleano.

=begin tip Più Controllo suo Contesto

X<CPAN; C<Want>>
X<direttive; C<overloading>>

Il modulo CPAN C<Want> vi permette di individuare un contesto booleano all'interno
delle vostre funzioni. La pragma C<overloading> del core (L<overloading>) vi permette
di specificare che cosa devono produrre i vostri tipi di dati quando sono valutati in diversi contesti.

=end tip

=head2 Direttive di Ciclo

Z<looping_directives>

X<direttive di ciclo; C<for>>
X<direttive di ciclo; C<foreach>>

Perl fornisce diverse direttive di ciclo e iterazione. Il ciclo in stile
I<foreach> valuta un'espressione che produce una lista e
esegue un'istruzione o un blocco fino a quando ha consumato tale lista:

=begin programlisting

    foreach (1 .. 10)
    {
        say "$_ * $_ = ", $_ * $_;
    }

=end programlisting

Questo esempio usa l'operatore di range per produrre una lista di interi da uno a
dieci inclusi. La direttiva C<foreach> cicla su questi numeri, settando la variabile
topic C<$_> (L<default_scalar_variable>) a ciascuno di essi a turno. Perl esegue il
blocco per ogni intero e stampa il suo quadrato.

=begin tip C<foreach> e C<for>

X<predefinite; direttive; C<for>>
X<predefinite; direttive; C<foreach>>

Molti programmatori Perl si riferiscono alle iterazioni come cicli C<foreach>, ma Perl tratta
i nomi C<foreach> e C<for> in modo interscambiabile. È il codice che li accompagna a determinare
il tipo e comportamento del ciclo.

=end tip

Analogamente a C<if> e C<unless>, questo ciclo ha forma postfissa:

=begin programlisting

    say "$_ * $_ = ", $_ * $_ for 1 .. 10;

=end programlisting

Un ciclo C<for> può specificare il nome di una variabile anzichè usare la variabile topic:

=begin programlisting

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

Quando un ciclo C<for> usa una variabile iteratore, lo scope della variabile è I<l'interno>
del loop. Perl setta questa variabile lessicale al valore di ciascun elemento su cui opera
l'iterazione. Perl non modifica la variabile topic (C<$_>). Se avete dichiarato
una variabile lessicale C<$i> nello scope più esterno, il suo valore rimane intatto al di fuori del
ciclo:

=begin programlisting

    my $i = 'mucca';

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'mucca', 'Valore intatto nello scope esterno' );

=end programlisting

Questa localizzazione avviene anche se non ridichiarate la variabile iteratore come
lessicaleN<... ma siete I<caldamente invitati> a dichiarare le vostre variabili iteratore come lessicali per ridurne
lo scope.>:

=begin programlisting

    my $i = 'cavallo';

    for $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'cavallo', 'Valore intatto nello scope esterno' );

=end programlisting

=head2 Iterazione e Alias

X<iterazione; aliasing>
X<aliasing>
X<aliasing; iterazione>

Il ciclo C<for> effettua un I<aliasing> della variabile iteratore ai valori su cui opera l'iterazione
in modo che ogni modifica al valore dell'iteratore modifica anche il valore corrente dell'iterazione:

=begin programlisting

    my @numeri = 1 .. 10;

    $_ **= 2 for @numeri;

    is( $numeri[0], 1, '1 * 1 vale 1' );
    is( $numeri[1], 4, '2 * 2 vale 4' );

    ...

    is( $numeri[9], 100, '10 * 10 vale 100' );

=end programlisting

L'aliasing funziona anche con la forma a blocco del ciclo C<for>:

=begin programlisting

    for my $num (@numeri)
    {
        $num **= 2;
    }

=end programlisting

... e con le iterazioni che usano la variabile topic:

=begin programlisting

    for (@numeri)
    {
        $_ **= 2;
    }

=end programlisting

Tuttavia, non potete usare l'aliasing per modificare valori I<costanti>:

=begin programlisting

    for (qw( Qui Quo Qua ))
    {
        $_++;
        say;
    }

=end programlisting

In questo caso, il Perl solleverà un'eccezione relativa al tentativo di modifica di valori read-only.

Potrà succedervi occasionalmente di vedere l'uso del C<for> con una singola variabile scalare, allo scopo di
effettuare un aliasing di C<$_> a tale variabile:

=begin programlisting

    for ($input_utente)
    {
        s/\A\s+/;       # scarta spaziatura iniziale
        s/\s+\z/;       # scarta spaziatura finale

        $_ = quotemeta; # aggiungi escape a caratteri speciali
    }

=end programlisting

=head2 Iterazione e Scope

X<iterazione; scope>
X<scope; iteratore>
X<C<my $_>>
X<C<$_>; lessicale>

Lo scope della variabile topic usata come iteratore è una causa comune di
confusione. Considerate una funzione C<scombina_topic()> il cui scopo è di
modificare C<$_>. Se il codice che itera su una lista chiama C<scombina_topic()> senza
proteggere C<$_>, ci sarà poi da divertirsi col debugging:

=begin programlisting

    for (@valori)
    {
        scombina_topic();
    }

    sub scombina_topic
    {
        s/pippo/pluto/;
    }

=end programlisting

Se proprio I<dovete> usare C<$_> anzichè un'altra variabile, rendete la variabile topic
lessicale con C<my $_>:

=begin programlisting

    sub scombina_topic
    {
        # era $_ = shift;
        B<my> $_ = shift;

        s/pippo/pluto/;
        s/paperino/topolino/;

        return $_;
    }

=end programlisting

Anche l'uso di una variabile iteratore con un nome previene gli aliasing indesiderati
di C<$_>.

=head2 Il Ciclo For in Stile C

X<cicli; C<for>>

Il I<ciclo for> in stile C vi richiede di gestire le condizioni dell'iterazione:

=begin programlisting

    for (my $i = 0; $i <= 10; $i += 2)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

In questo costrutto dovete assegnare esplicitamente a una variabile iteratore,
dato che esso non effettua nè aliasing nè assegnamenti alla variabile topic.
Mentre una variabile dichiarata all'interno del costrutto di ciclo ha come scope il blocco
lessicale del ciclo, una variabile dichiarata all'esterno del costrutto di ciclo
non viene lessicalizzata:

=begin programlisting

    my $i = 'maiale';

    for ($i = 0; $i <= 10; $i += 2)
    {
        say "$i * $i = ", $i * $i;
    }

    isnt( $i, 'maiale', '$i sovrascritto con un numero' );

=end programlisting

Il costrutto di ciclo può avere tre sottoespressioni. La prima
sottoespressione--la sezione di inizializzazione--viene eseguita solo una volta, prima dell'esecuzione
del corpo del ciclo.  Perl valuta la seconda sottoespressione--il confronto
condizionale--prima di ciascuna iterazione del corpo del ciclo. Quando essa ha un valore
vero, l'iterazione continua. Quando ha un valore falso, l'iterazione
termina. L'ultima sottoespressione viene eseguita dopo ogni iterazione del corpo del ciclo.

=begin programlisting

    for (
        # sottoespressione di inizializzazione del ciclo
        say 'Inizializzazione', my $i = 0;

        # sottoespressione di confronto condizionale
        say "Iterazione: $i" and $i < 10;

        # sottoespressione che fa terminare (prima o poi) l'iterazione
        say 'Incremento ' . $i++
    )
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

Notate l'assenza del punto e virgola dopo l'ultima sottoespressione, e l'uso
dell'operatore virgola e dell'operatore a bassa precedenza C<and>; questa sintassi è piuttosto
complicata. Quando è possibile, preferite i cicli in stile C<foreach> al ciclo C<for>.

Tutte e tre le sottoespressioni sono opzionali. Un ciclo C<for> infinito si ottiene con:

=begin programlisting

    for (;;) { ... }

=end programlisting

=head2 While e Until

X<cicli; C<while>>

Un ciclo I<while> continua fino a che l'espressione condizionale del ciclo assume un valore
booleano falso. Un modo idiomatico di scrivere un ciclo infinito è:

=begin programlisting

    while (1) { ... }

=end programlisting

Al contrario dell'iterazione con cicli in stile C<foreach>, la condizione di ciclo del C<while>
non ha di per sè alcun side effect. Ovvero, se C<@valori> contiene uno o più elementi,
anche questo codice è un ciclo infinito:

=begin programlisting

    while (@valori)
    {
        say $valori[0];
    }

=end programlisting

X<aggiornamento distruttivo>

Per prevenire i cicli C<while> infiniti, fate un I<aggiornamento distruttivo> dell'array
C<@valori> modificandolo ad ogni iterazione del ciclo:

=begin programlisting

    while (@valori)
    {
        my $valore = shift @valori;
        say $valore;
    }

=end programlisting

È anche possibile modificare C<@valori> all'interno della condizione del C<while>,
ma ci sono alcune sottigliezze legate al valore di verità di ciascun elemento.

=begin programlisting

    while (my $valore = shift @valori)
    {
        say $valore;
    }

=end programlisting

Questo ciclo termina non appena incontra un elemento che ha un valore
falso, e quindi non esaurisce necessariamente tutto l'array. Questo potrebbe essere il comportamento
desiderato, ma spesso è invece una sorpresa per i principianti.

X<cicli; C<until>>

Il ciclo I<until> inverte il senso del test del ciclo C<while>.
L'iterazione continua finchè l'espressione condizionale del ciclo valuta a falso:

=begin programlisting

    until ($fine_corsa)
    {
        ...
    }

=end programlisting

L'uso canonico del ciclo C<while> è di iterare sull'input da un filehandle:

=begin programlisting

    use autodie;

    open my $fh, '<', $file;

    while (<$fh>)
    {
        ...
    }

=end programlisting

Perl 5 interpreta questo ciclo C<while> come se aveste scritto:

=begin programlisting

    while (defined($_ = <$fh>))
    {
        ...
    }

=end programlisting

Senza l'uso implicito di C<defined>, ogni linea letta dal filehandle che
valuta a falso in contesto scalare--una linea vuota o una linea che
contiene il solo carattere C<0>--farebbe terminare il ciclo. L'operatore C<readline> 
(C<< <> >>) restituisce un valore non definito solo quando ha raggiunto la fine del
file.

=begin tip C<chomp> Sulle Vostre Linee

X<predefinite; funzioni; C<chomp>>

Usate la funzione nativa C<chomp> per rimuovere i caratteri di fine linea da ogni linea. Molti
principianti se ne dimenticano.

=end tip

Sia C<while> che C<until> hanno forme postfisse, come il ciclo infinito C<1
while 1;>. Il C<while> e l'C<until> postfissi si possono applicare a qualunque espressione singola,
incluso il classico esempio "Ciao, mondo!" dei computer a 8-bit dei primi anni '80:

=begin programlisting

    print "Ciao, mondo!  " while 1;

=end programlisting

I cicli infiniti sono più utili di quanto potrebbero sembrare, specialmente per gli event loop nei
programmi con GUI, per gli interpreti di programmi o per i server di rete:

=begin programlisting

    $server->invia_risultati() until $esegui_shutdown;

=end programlisting

X<cicli; C<do>>

Usate un blocco C<do> per raggruppare diverse espressioni in una singola unità:

=begin programlisting

    do
    {
        say 'Come ti chiami?';
        my $nome = <>;
        chomp $nome;
        say "Ciao, $nome!" if $nome;
    } until (eof);

=end programlisting

Un blocco C<do> viene parsificato come una singola espressione che può contenere diverse
espressioni. Al contrario della forma a blocco del ciclo C<while>, il blocco C<do> con un
postfisso C<while> o C<until> esegue il proprio corpo almeno una volta. Questo
costrutto è meno comune delle altre forme di ciclo, ma non meno potente.

=head2 Cicli dentro altri Cicli

X<cicli; annidati>

Potete annidare i cicli dentro altri cicli:

=begin programlisting

    for my $colore (@colori)
    {
        for my $valore (@valori_delle_carte) { ... }
    }

=end programlisting

Quando lo fate, ricordatevi di dichiarare le vostre varibili di iterazione! In caso contrario, la potenziale confusione
dovuta all'uso della variabile topic e al suo scope sarebbe ingestibile.

Un errore comune quando si annida un ciclo C<while> in un ciclo C<foreach> è che è facile
esaurire un filehandle con un ciclo C<while>:

=begin programlisting

    use autodie;

    open my $fh, '<', $un_file;

    for my $prefisso (@prefissi)
    {
        # NON USARE; probabilmente contiene un bug
        while (<$fh>)
        {
            say $prefisso, $_;
        }
    }

=end programlisting

Aprendo il filehandle al di fuori del ciclo C<for>, la posizione del file rimane
invariata tra due iterazioni del ciclo C<for>. Alla seconda iterazione,
il ciclo C<while> non avrà più nulla da leggere e non verrà eseguito. Per ovviare a questo
problema, ri-aprite il file all'interno del ciclo C<for> (semplice, ma non
sempre ottimale per l'uso delle risorse di sistema), leggete l'intero file in memoria
(potrebbe non funzionare se il file è molto grande) oppure riportate il filehandle
all'inizio del file ad ogni iterazione con un C<seek> (un'opzione spesso trascurata):

=begin programlisting

    use autodie;

    open my $fh, '<', $un_file;

    for my $prefisso (@prefissi)
    {
        while (<$fh>)
        {
            say $prefisso, $_;
        }

        seek $fh, 0, 0;
    }

=end programlisting

=head2 Controllo di Ciclo

X<cicli; controllo>

Talvolta, dovete uscire da un ciclo prima di avere esaurito le
condizioni di iterazione. Potete usare i meccanismi standard di controllo del Perl 5--eccezioni e
C<return>--oppure le istruzioni di I<controllo di ciclo>.

X<cicli; C<next>>

L'istruzione I<next> fa ripartire il ciclo alla prossima iterazione. Usatelo quando
avete già fatto tutto ciò che dovevate fare nell'iterazione corrente. Per scorrere le linee di un
file saltando quelle che iniziano col carattere di commento C<#>, scrivete:

=begin programlisting

    while (<$fh>)
    {
        B<next> if /\A#/;
        ...
    }

=end programlisting

=begin tip Exit Multiple e If Annidati

Confrontate l'uso di C<next> con l'alternativa: racchiudere il resto del corpo
del blocco in un C<if>. E ora considerate cosa succede se ci sono diverse
condizioni che possono farvi saltare una linea. I modificatori di controllo di ciclo insieme
ai condizionali postfissi possono rendere il vostro codice molto più leggibile.

=end tip

X<cicli; C<last>>

L'istruzione I<last> fa uscire immediatamente dal ciclo. Per finire di processare un file
dopo avere incontrato un marcatore di terminazione, scrivete:

=begin programlisting

    while (<$fh>)
    {
        next if /\A#/;
        B<last> if /\A__END__/
        ...
    }

=end programlisting

X<cicli; C<redo>>

L'istruzione I<redo> fa ripartire l'iterazione corrente senza valutare di nuovo
la condizione. Questo può essere utile in quei pochi casi in cui volete
modificare subito la linea che avete letto, e quindi far ripartire l'elaborazione
dalla linea modificata senza leggere un'altra linea. Un esempio un po' stupido è il seguente
parser di file che unisce tra loro le linee che terminano con un backslash:

=begin programlisting

    while (my $linea = <$fh>)
    {
        chomp $linea;

        # fai il match di backslash alla fine della linea
        if ($linea =~ s{\\$}{})
        {
            $linea .= <$fh>;
            chomp $linea;
            redo;
        }

        ...
    }

=end programlisting

X<cicli; etichette>

Usare le istruzioni di controllo di ciclo nei cicli annidati può creare confusione. Se non potete
evitare di annidare i cicli--trasformando i cicli interni in funzioni--usate una
I<etichetta di ciclo> per essere più chiari:

=begin programlisting

    LINEA:
    while (<$fh>)
    {
        chomp;

        PREFISSO:
        for my $prefisso (@prefissi)
        {
            next LINEA unless $prefisso;
            say "$prefisso: $_";
            # qui c'è un next PREFISSO implicito
        }
    }

=end programlisting

=head2 Continue

X<cicli; C<continue>>

Il costrutto C<continue> si comporta come la terza sottoespressione di un ciclo
C<for>; Perl esegue il suo blocco prima di passare alla prossima iterazione del ciclo, sia
nel caso di una ripetizione normale che nel caso di una re-iterazione prematura dovuta a C<next>N<L'equivalente Perl
del C<continue> del C è C<next>.>. Potete usarlo con un ciclo C<while>,
C<until>, C<when> e C<for>. Gli esempi di uso di C<continue> sono rari, ma è utile
ogni volta che volete garantire che qualcosa sia eseguito ad ogni
iterazione del ciclo indipendentemente da come si conclude tale iterazione:

=begin programlisting

    while ($i < 10 )
    {
        next unless $i % 2;
        say $i;
    }
    continue
    {
        say 'Continuo...';
        $i++;
    }

=end programlisting

Ricordate che un blocco C<continue> I<not> viene eseguito quando il controllo di flusso abbandona
un ciclo a causa di un C<last> o di un C<redo>.

=head2 Given/When

Z<given_when>

X<predefinite; direttive; C<given>>

Il costrutto C<given> è una nuova funzionalità di Perl 5.10. Esso assegna il valore di
un'espressione alla variabile topic ed è seguito da un blocco:

=begin programlisting

    given ($nome) { ... }

=end programlisting

Al contrario di C<for>, non itera su un aggregato. Valuta la propria
espressione in contesto scalare, e assegna sempre alla variabile topic:

=begin programlisting

    given (my $nome_utente = trova_utente())
    {
        is( $nome_utente, $_, 'assegnamento automatico a variabile topic' );
    }

=end programlisting

C<given> lessicalizza la variabile topic:

=begin programlisting

    given ('topo')
    {
        say;
        da_topo_a_uomo( $_ );
        say;
    }

    sub da_topo_a_uomo { s/topo/uomo/ }

=end programlisting

X<predefinite; direttive; C<when>>
X<topicalizzazione>

C<given> è particolarmente utile quando è usato in combinazione con C<when> (L<smart_match>). 
C<given> I<topicalizza> un valore dentro un blocco in modo che diverse istruzioni C<when> possano
fare il match del topic con delle espressioni usando una semantica di I<smart-match>. Il seguente codice
implementa il gioco di Sasso, Carta e Forbici:

=begin programlisting

    my @opzioni  = ( \&sasso, \&carta, \&forbici );
    my $confuso  = "Non capisco la tua mossa.";

    do
    {
        say "Sasso, Carta e Forbici!  Scegline uno: ";
        chomp( my $mossa_utente = <STDIN> );
        my $mossa_computer = $opzioni[ rand @opzioni ];
        $mossa_computer->( lc( $mossa_utente ) );
    } until (eof);

    sub sasso
    {
        print "Ho scelto il sasso.  ";

        given (shift)
        {
            when (/carta/)    { say 'Vinci tu!' };
            when (/sasso/)    { say 'Pareggio!'  };
            when (/forbici/)  { say 'Vinco io!'   };
            default           { say $confuso  };
        }
    }

    sub carta
    {
        print "Ho scelto la carta.  ";

        given (shift)
        {
            when (/carta/)    { say 'Pareggio!'  };
            when (/sasso/)    { say 'Vinco io!'   };
            when (/forbici/)  { say 'Vinci tu!' };
            default           { say $confuso  };
        }
    }

    sub forbici
    {
        print "Ho scelto le forbici.  ";

        given (shift)
        {
            when (/carta/)    { say 'Vinco io!'   };
            when (/sasso/)    { say 'Vinci tu!' };
            when (/forbici/)  { say 'Pareggio!'  };
            default           { say $confuso  };
        }
    }

=end programlisting

Perl esegue la regola di C<default> quando il match con tutte le altre condizioni fallisce.

=begin tip Dispatch Semplificato con i Multimetodi

X<CPAN; C<MooseX::MultiMethods>>

Il modulo CPAN C<MooseX::MultiMethods> fornisce un'altra tecnica per semplificare
questo codice.

=end tip

=head2 Chiamate di coda

Z<tailcalls>
X<chiamate di coda>

Una I<chiamata di coda> ha luogo quando l'ultima espressione in una funzione è una chiamata a
un'altra funzione--il valore di ritorno della funzione chiamante è il valore
di ritorno della funzione chiamata:

=begin programlisting

    sub traccia_e_saluta_persona
    {
        my $nome = shift;
        log( "Sto salutando $nome" );

        return saluta_persona( $nome );
    }

=end programlisting

Ritornare da C<saluta_persona()> direttamente al chiamante di
C<traccia_e_saluta_persona()> è più efficiente che ritornare I<a>
C<traccia_e_saluta_persona()> e poi ritornare immediatamente I<da>
C<traccia_e_saluta_persona()>. Ritornare direttamente I<da> C<saluta_persona()> al
chiamante di C<traccia_e_saluta_persona()> è una I<ottimizzazione di chiamata di coda>.

Il codice fortemente ricorsivo (L<recursion>), specialmente quando ha luogo una mutua ricorsione, può
consumare molta memoria. Le chiamate di coda riducono la quantità di memoria necessaria per il tracciamento
interno del controllo di flusso e possono rendere trattabili degli algoritmi molto costosi.
Purtroppo, Perl 5 non applica questa ottimizzazione automaticamente; dovete applicarla voi stessi quando lo ritenete necessario.

X<predefinite; direttive; C<goto>>

L'operatore nativo C<goto> ha una forma per cui chiama una funzione come se la
funzione corrente non fosse mai stata chiamata, cancellando in sostanza il tracciamento della chiamata
alla nuova funzione. La sintassi poco elegante confonde le persone che hanno sentito dire di "Non usare mai
C<goto>", ma funziona:

=begin programlisting

    sub traccia_e_saluta_persona
    {
        B<my ($nome) = @_;>
        log( "Sto salutando $nome" );

        B<goto &saluta_persona>;
    }

=end programlisting

Questo esempio mostra due aspetti importanti. Prima di tutto, C<goto &nome_funzione> e
C<goto &$riferimento_a_funzione> richiedono di usare il sigillo di funzione (C<&>) in
modo che il parser sappia che deve effettuare una chiamata di coda anzichè saltare semplicemente a un'etichetta.
In secondo luogo, questa forma di chiamata di funzione passa implicitamente il contenuto di C<@_>
alla funzione chiamata. Potete modificare C<@_> per cambiare gli argomenti passati.

Questa tecnica è usata piuttosto di rado; è particolarmente utile quando volete assumere voi stessi
il controllo di flusso in modo da non disturbare altre funzioni che stanno ispezionando il C<chiamante>
(come quando state implementando speciali funzioni di logging o qualche sorta di funzionalità di
 debugging), o quando siete alle prese con un algoritmo che richiede molta ricorsione.
