=head1 AUTOLOAD

Z<autoload>

Perl non richiede che dichiariate ciascuna funzione prima di chiamarla e fa
del suo meglio per chiamare una funzione anche se non esiste. Considerate questo
programma:

=begin programlisting

    use Modern::Perl;

    cuoci_crostata( ripieno => 'mele' );

=end programlisting

Quando lo eseguite, Perl solleva un'eccezione di chiamata a una funzione C<cuoci_crostata()>
non definita.

Ora aggiungete una funzione di nome C<AUTOLOAD()>:

=begin programlisting

    sub AUTOLOAD {}

=end programlisting

Se rieseguite il programma, non succede nulla di evidente.  Perl chiama la funzione
C<AUTOLOAD()> di un package--se esiste-- ogni volta che il normale meccanismo di chiamata
fallisce. Modificate C<AUTOLOAD()> in modo da stampare un messaggio:

=begin programlisting

    sub AUTOLOAD { B<say 'Sono in AUTOLOAD()!'> }

=end programlisting

... per dimostrare che viene chiamata.

=head2 Funzionalità Base di AUTOLOAD

X<C<$AUTOLOAD>>

La funzione C<AUTOLOAD()> riceve direttamente in C<@_> gli argomenti che erano stati passati
alla funzione non definita, mentre il I<nome> della funzione non definita è memorizzato nella variabile globale di package
C<$AUTOLOAD>. Potete manipolare questi argomenti a vostro piacimento:

=begin programlisting

    sub AUTOLOAD
    {
        B<our $AUTOLOAD;>

        # stampa gli argomenti separati da virgola
        local $" = ', ';
        say "Sono in AUTOLOAD(@_) B<per colpa di $AUTOLOAD>!"
    }

=end programlisting

Con la dichiarazione C<our> (L<our>), lo scope della variabile diventa il corpo della
funzione. La variabile contiene il nome qualificato della funzione
non definita (in questo caso, C<main::cuoci_crostata>). Potete rimuovere il nome del package con
un'espressione regolare (L<regex>):

=begin programlisting

    sub AUTOLOAD
    {
        B<my ($nome) = our $AUTOLOAD =~ /::(\w+)$/;>

        # stampa gli argomenti separati da virgola
        local $" = ', ';
        say "Sono in AUTOLOAD(@_) B<per colpa di $nome>!"
    }

=end programlisting

La chiamata originale riceve ciò che viene restituito da C<AUTOLOAD()>:

=begin programlisting

    say funzione_misteriosa( -1 );

    sub AUTOLOAD { return 'mu' }

=end programlisting

Gli esempi visti finora si sono limitati ad intercettare le chiamate a funzioni non definite.
Naturalmente potete fare di più.

=head2 Redirezionare dei Metodi in AUTOLOAD()

X<C<AUTOLOAD>; redirezione>
X<C<AUTOLOAD>; delega>
X<OO; delega>
X<delega>
X<OO; proxy>
X<proxy>

Un pattern diffuso nella programmazione OO (L<moose>) è di avere un oggetto 
che I<delega> o I<fa da proxy> per alcuni metodi di un altro oggetto, spesso contenuto o comunque
accessibile dal primo. Un proxy di logging può aiutarvi a fare debugging:

=begin programlisting

    package Proxy::Log;

    sub new
    {
        my ($classe, $delegata) = @_;
        bless \$delegata, $classe;
    }

    sub AUTOLOAD
    {
        my ($nome) = our $AUTOLOAD =~ /::(\w+)$/;
        Log::chiamata_metodo( $nome, @_ );

        my $self = shift;
        return $$self->$nome( @_ );
    }

=end programlisting

La funzione C<AUTOLOAD()> estrae il nome del metodo non definito e fa il log della sua chiamata. 
Quindi, ricava l'oggetto delegato dereferenziando un riferimento scalare battezzato e, infine, invoca il metodo sull'oggetto delegato passandogli i parametri
ricevuti.

=head2 Generazione di Codice in AUTOLOAD()

X<C<AUTOLOAD>; installazione di codice>

Questa doppia chiamata è facile da scrivere, ma inefficiente. L'esecuzione di ogni chiamata di metodo sull'oggetto
che fa da proxy deve fallire per entrare in C<AUTOLOAD()>.  Potete pagare questa penalità una sola volta,
installando nuovi metodi nella classe che fa da proxy man mano che il programma li richiede:

=begin programlisting

    sub AUTOLOAD
    {
        B<my ($nome) = our $AUTOLOAD =~ /::(\w+)$/;>

        my $metodo = sub
        {
            Log::chiamata_metodo( $nome, @_ );

            my $self = shift;
            return $$self->$nome( @_ );
        }

        B<no strict 'refs';>
        B<*{ $AUTOLOAD } = $metodo;>
        return $metodo->( @_ );
    }

=end programlisting

Il corpo della C<AUTOLOAD()> precedente è diventato una chiusura (L<closures>) legata
con il I<nome> del metodo non definito. Installare tale chiusura
nell'appropriata tabella dei simboli permette alle chiamate successive di quel metodo di trovare
la chiusura che avete creato (ed evitare C<AUTOLOAD()>). Infine, la chiusura invoca direttamente
il metodo e restituisce il risultato.

Sebbene questo approccio sia più pulito e quasi sempre più trasparente rispetto a
gestire il comportamento direttamente in C<AUTOLOAD()>, il codice I<chiamato> da
C<AUTOLOAD()> ha la possibilità di scoprire che la chiamata è passata attraverso C<AUTOLOAD()>.  Infatti,
una semplice chiamata a C<caller()> rivela la doppia chiamata di entrambe le tecniche descritte
qui sopra. Se da una parte tener conto di questo può essere visto come una violazione dell'incapsulamento, 
lo stesso si potrebbe dire dell'esporre i dettagli di I<come> un oggetto fornisce un metodo.

X<chiamate di coda>
X<C<goto>; chiamata di coda>

Alcuni autori usano una chiamata di coda (L<tailcalls>) per I<sostituire> la chiamata corrente di
C<AUTOLOAD()> con una chiamata al metodo destinatario:

=begin programlisting

    sub AUTOLOAD
    {
        B<my ($nome) = our $AUTOLOAD =~ /::(\w+)$/;>
        my $metodo = sub { ... }

        no strict 'refs';
        *{ $AUTOLOAD } = $metodo;
        B<goto &$metodo;>
    }

=end programlisting

Questo ha lo stesso effetto di chiamare direttamente C<$metodo>, eccetto che
C<AUTOLOAD()> non compare più nella lista di chiamate generate da
C<caller()>, e dà quindi l'illusione che il metodo generato sia stato chiamato direttamente.

=head2 Svantaggi di AUTOLOAD

Z<autoload_drawbacks>

X<C<AUTOLOAD>; problemi>
X<C<UNIVERSAL::can>>
X<C<can()>>
X<direttiva C<subs>>
X<direttive; C<subs>>
X<funzioni; predichiarazione>

C<AUTOLOAD()> può essere uno strumento utile, ma è difficile da usare correttamente. Un approccio
naE<iuml>f alla generazione di metodi a tempo di esecuzione significa tra l'altro che il metodo C<can()>
non è in grado di restituire un'informazione corretta sulle capacità degli oggetti e
delle classi. La soluzione più semplice consiste nel predichiarare con la direttiva C<subs>
tutte le funzioni che pensate di gestire con C<AUTOLOAD()>  :

=begin programlisting

    use subs qw( rosso verde blu ocra grigio );

=end programlisting

=begin tip Ora lo Potete Vedere

Le dichiarazioni in avanti sono utili solo nei due casi piuttosto rari dell'uso degli attributi e dell'autoload (L<autoload>).

=end tip

Questa tecnica ha il vantaggio di documentare le vostre intenzioni ma per contro
vi obbliga a mantenere una lista statica di funzioni e metodi.
A volte è meglio fare l'override di C<can()>:

=begin programlisting

    sub can
    {
        my ($self, $metodo) = @_;

        # usa il risultato del can() della classe padre
        my $rif_a_met = $self->SUPER::can( $metodo );
        return $rif_a_met if $rif_a_met;

        # aggiungi qui qualche filtro
        return unless $self->devo_generare( $metodo );

        $rif_a_met = sub { ... };
        no strict 'refs';
        return *{ $metodo } = $rif_a_met;
    }

    sub AUTOLOAD
    {
        my ($self) = @_;
        my ($nome) = our $AUTOLOAD =~ /::(\w+)$/;>

        return unless my $rif_a_met = $self->can( $nome );
        goto &$rif_a_met;
    }

=end programlisting

C<AUTOLOAD()> è come un bulldozer; può catturare funzioni e metodi che non avevate
alcuna intenzione di gestire, come C<DESTROY()>, il distruttore degli oggetti. Se
scrivete un metodo C<DESTROY()> senza implementazione, Perl non avrà problemi a
invocarlo al posto di chiamare C<AUTOLOAD()>:

=begin programlisting

    # evita AUTOLOAD()
    sub DESTROY {}

=end programlisting

=begin tip Un Metodo Molto Speciale

I metodi speciali C<import()>, C<unimport()> e C<VERSION()> non passano mai
attraverso C<AUTOLOAD()>.

=end tip

Se mescolate funzioni e metodi in un unico namespace che eredita da
un altro package, e questo package a sua volta fornisce C<AUTOLOAD()>, potreste vedere questo strano
messaggio di errore:

=begin screen

  Use of inherited AUTOLOAD for non-method
      I<sbatti_porta>() is deprecated

=end screen

Se vi dovesse succedere, provate a semplificare il vostro codice; avete chiamato una funzione che non
esiste in un package che eredita da una classe che contiene un proprio
C<AUTOLOAD()>. Ci sono diversi problemi: mescolare funzioni e
metodi nello stesso namespace è spesso indice di un errore di progettazione; l'ereditarietà e
C<AUTOLOAD()> portano a un aumento molto rapido della complessità; e, infine, ragionare su del codice quando non
sapete quali metodi vengono forniti dagli oggetti è difficile.

C<AUTOLOAD()> è utile per programmi piccoli e scritti velocemente, ma è meglio evitarlo per avere del codice robusto.
