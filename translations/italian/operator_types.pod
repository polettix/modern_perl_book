=head1 Tipi di Operatori

Z<operator_types>

Gli operatori del Perl forniscono contesti di valore (L<value_contexts>) ai propri operandi.
Per scegliere l'operatore appropriato, dovete tenere conto dei valori degli operandi che gli
passate e del valore che vi aspettate di ricevere.

=head2 Operatori Numerici

Z<numeric_operators>

X<operators; numeric>
X<operators; arithmetic>
X<operators; C<+>>
X<C<+>; numeric operator>
X<operators; C<->>
X<C<->; numeric operator>
X<operators; C<*>>
X<C<*>; numeric operator>
X<operators; C</>>
X<C</>; numeric operator>
X<operators; C<**>>
X<C<**>; numeric operator>
X<operators; C<%>>
X<C<%>; numeric operator>
X<operators; C<+=>>
X<C<+=>; numeric operator>
X<operators; C<-=>>
X<C<-=>; numeric operator>
X<operators; C<*=>>
X<C<*=>; numeric operator>
X<operators; C</=>>
X<C</=>; numeric operator>
X<operators; C<**=>>
X<C<**=>; numeric operator>
X<operators; C<%=>>
X<C<%=>; numeric operator>
X<operators; C<-->>
X<C<-->; numeric operator>

Gli operatori numerici impngono il contesto numerico ai loro operandi. Questi operatori
sono: gli operatori aritmetici standard come addizione (C<+>), sottrazione
(C<->), moltiplicazione (C<*>), divisione (C</>), elevamento a potenza (C<**>) e modulo
(C<%>); le loro varianti di assegnamento composto (C<+=>, C<-=>, C<*=>, C</=>, C<**=> e
C<%=>); e l'auto-decremento (C<-->) sia postfisso che prefisso.

L'operatore di auto-incremento ha uno speciale comportamento in contesto stringa
(L<auto_increment_operator>).

X<operators; C<==>>
X<operators; C<!=>>
X<<< operators; C<< E<lt> >> >>>
X<<< operators; C<< E<gt> >> >>>
X<<< operators; C<< E<lt>= >> >>>
X<<< operators; C<< E<gt>= >> >>>
X<<< operators; C<< E<lt>=E<gt> >> >>>

X<C<!=>; numeric comparison operator>
X<C<==>; numeric comparison operator>
X<<< C<< E<gt> >>; numeric comparison operator >>>
X<<< C<< E<lt> >>; numeric comparison operator >>>
X<<< C<< E<gt>= >>; numeric comparison operator >>>
X<<< C<< E<lt>= >>; numeric comparison operator >>>
X<<< C<< E<lt>=E<gt> >>; numeric comparison operator >>>

Diversi operatori di confronto impongono il contesto numerico ai loro operandi.
Questi operatori sono: uguaglianza numerica (C<==>), disuguaglianza numerica (C<!=>), maggiore di
(C<< E<gt> >>), minore di (C<< E<lt> >>), maggiore o uguale (C<< E<gt>=
>>), minore o uguale (C<< E<lt>= >>) e l'operatore di confronto per il sort
(C<< E<lt>=E<gt> >>).

=head2 Operatori Stringa

X<operators; string>
X<strings; operators>
X<operators; C<=~>>
X<C<=~>; string operator>
X<operators; C<!~>>
X<C<!~>; string operator>
X<operators; C<.>>
X<C<.>; string operator>

Gli operatori stringa impongono il contesto stringa ai loro operandi. Questi operatori sono
il binding positivo e negativo a un'espressione regolare (C<=~> and C<!~>,
respectively) e la concatenazione (C<.>).

X<operators; C<eq>>
X<operators; C<ne>>
X<operators; C<gt>>
X<operators; C<lt>>
X<operators; C<ge>>
X<operators; C<le>>
X<operators; C<cmp>>
X<C<eq>; string comparison operator>
X<C<ne>; string comparison operator>
X<C<gt>; string comparison operator>
X<C<lt>; string comparison operator>
X<C<ge>; string comparison operator>
X<C<le>; string comparison operator>
X<C<cmp>; string comparison operator>

Diversi operatori di confronto impongono il contesto numerico ai loro operandi.
Questi operatori sono: uguaglianza di stringhe (C<eq>), disuguaglianza di stringhe (C<ne>), maggiore di (C<gt>),
minore di (C<lt>), maggiore o uguale (C<ge>), minore o uguale
(C<le>) e l'operatore di confronto tra stringhe per il sort (C<cmp>).

=head2 Operatori Logici

X<operators; logical>
X<operators; C<&&>>
X<operators; C<and>>
X<operators; C<||>>
X<operators; C<or>>
X<operators; C<//>>
X<operators; C<?:>>
X<operators; C<!>>
X<operators; C<not>>
X<operators; C<xor>>
X<C<&&>; logical operator>
X<C<and>; logical operator>
X<C<||>; logical operator>
X<C<or>; logical operator>
X<C<//>; logical operator>
X<C<?:>; logical operator>
X<C<!>; logical operator>
X<C<not>; logical operator>
X<C<xor>; logical operator>
X<operators; defined-or>
X<defined-or; logical operator>
X<short-circuiting>

Gli operatori logici impngono il contesto booleano ai loro operandi. Questi operatori
sono C<&&>, C<and>, C<||> e C<or>. Sono tutti infssi e tutti possono dar luogo a
I<cortocircuiti> (L<short_circuiting>). Le varianti C<and> e C<or> hanno
precedenza più bassa delle corrispondenti forme simboliche.

L'operatore defined-or, C<//>, controlla se il proprio operando è I<definito>. Contrariamente a
C<||> che testa la I<verità> del proprio operando, C<//> valuata a vero
anche se il suo operando valuta al numero zero o alla stringa vuota. Questo risulta
particolarmente utile per impostare i valori di default dei parametri:

=begin programlisting

    sub chiama_il_cane
    {
        my $nome = shift // 'Fuffy';
        ...
    }

=end programlisting

X<C<?:>; ternary conditional operator>

L'operatore condizionale ternario (C<?:>) riceve tre operandi. Valuta il
primo in contesto booleano e continua con la valutazione del secondo se il primo è vero e
del terzo in caso contrario:

=begin programlisting

    my $verità = $valore ? 'vero' : 'falso';

=end programlisting

Gli operatori prefissi C<!> e C<not> restituiscono l'opposto del valore booleano
dei loro operandi. C<not> è la versione di C<!> con precedenza più bassa.

L'operatore C<xor> è un operatore infisso che valuta all' or-esclusivo dei
suoi operandi.

=head2 Operatori bit-a-bit

X<operators; bitwise>
X<<< operators; C<< E<lt>E<lt> >> >>>
X<<< operators; C<< E<gt>E<gt> >> >>>
X<operators; C<&>>
X<operators; C<|>>
X<operators; C<^>>
X<operators; C<&=>>
X<operators; C<|=>>
X<operators; C<^=>>
X<<< operators; C<< E<lt>E<lt>= >> >>>
X<<< operators; C<< E<gt>E<gt>= >> >>>

X<<< C<< E<lt>E<lt> >>; bitwise operator >>>
X<<< C<< E<gt>E<gt> >>; bitwise operator >>>

X<C<&>; bitwise operator>
X<C<|>; bitwise operator>
X<C<^>; bitwise operator>
X<C<&=>; bitwise operator>
X<C<|=>; bitwise operator>
X<C<^=>; bitwise operator>
X<<< C<< E<lt>E<lt>= >>; bitwise operator >>>
X<<< C<< E<gt>E<gt>= >>; bitwise operator >>>

Gli operatori bit-a-bit trattano a livello di bit i numeri rappresentati dai propri operandi. Queste
operazioni, piuttosto rare, sono: shift a sinistra (C<< << >>), shift a destra
(C<< >> >>), and bit-a-bit (C<&>), or bit-a-bit (C<|>) e xor bit-a-bit (C<^>);
e le loro varianti di assegnamento composto (C<< <<= >>, C<< >>= >>, C<&=>, C<|=> e
C<^=>).

=head2 Operatori Speciali

Z<auto_increment_operator>

X<operators; auto-increment>
X<auto-increment>
X<operators; C<++>>
X<C<++>; auto-increment operator>

L'operatore di auto-incremento ha un comportamento speciale. Quando è usato su un valore che ha
una componente numerica (L<cached_coercions>), l'operatore incrementa tale componente
numerica. Se invece il valore è solamente una stringa (e non ha una componente numerica),
l'operatore incrementa tale valore stringa in modo che C<a> diventa C<b>, C<zz>
diventa C<aaa> e C<a9> diventa C<b0>.

=begin programlisting

    my $num = 1;
    my $str = 'a';

    $num++;
    $str++;
    is( $num,   2, 'autoincremento numerico' );
    is( $str, 'b', 'autoincremento stringa'  );

    no warnings 'numeric';
    $num += $str;
    $str++;

    is( $num, 2, 'un'addizione numerica con $str'    );
    is( $str, 1, '...genera una componente numerica per $str' );

=end programlisting

X<operators; repetition>
X<operators; C<x>>
X<C<x>; repetition operator>

L'operatore di ripetizione (C<x>) è un operatore infisso con un comportamento complesso. In
contesto lista, se riceve una lista valuta a quella lista ripetuta un numero di volte
pari al suo secondo operando. In contesto lista, se riceve uno scalare
produce una stringa che consiste nel valore stringa del suo primo operando
concatenata con se stessa un numero di volte pari al suo secondo operando.

In contesto scalare, l'operatore produce sempre una stringa ottenuta con il numero appropriato di
concatenazioni. Per esempio:

=begin programlisting

    my @sherazad   = ('notti') x 1001;
    my $calendario =  'notti'  x 1001;
    my $lung_cal   =  length $calendario;

    is( @sherazad,   1001, 'lista ripetuta' );
    is( $lung_cal,   1001 * length 'notti',
                     'parola ripetuta' );

    my @shestringa =  'notti'  x 1001;
    my $calscalare = ('notti') x 1001;

    is( @shestringa, 1, 'contiene una sola stringa' );
    is( length $calscalare,
        1001 * length 'notti', 'sempre parola ripetuta' );

=end programlisting

X<operators; range>
X<range>
X<operators; C<..>>
X<C<..>; range operator>

L'operatore infisso di I<range> (C<..>) produce una lista di elementi in contesto lista:

=begin programlisting

    my @carte = ( 2 .. 10, 'J', 'Q', 'K', 'A' );

=end programlisting

Può produrre dei semplici range incrementali (sia di interi che di stringhe), ma
non è capace di intuire pattern di range più complessi.

X<operators; flip-flop>
X<flip-flop>
X<C<..>; flip-flop operator>

In contesto booleano, l'operatore di range diventa l'operatore I<flip-flop>. Questo
operatore produce un valore falso fino a quando il suo operando sinistro non diventa vero. Tale valore
rimane vero fino a quando l'operando destro non diventa vero, dopo di che il valore prodotto è di nuovo falso
fino a quando l'operatore sinistro non diventa di nuovo vero. Immaginate di parsificare il testo di una lettera
formale con:

=begin programlisting

    while (/Hello, $user/ .. /Sincerely,/)
    {
        say "> $_";
    }

=end programlisting

X<operators; comma>
X<operators; C<,>>
X<C<,>; operator>
X<<< operators; C<< =E<gt> >> >>>
X<<< C<< =E<gt> >>; fat comma operator >>>

L'operatore I<virgola> (C<,>) è un operatore infisso. In contesto scalare
valuta il suo operando sinistro e quindi restituisce il valore prodotto dalla valutazione del suo
operando destro. In contesto lista, valuta entrambi gli operatori da destra a sinistra.

L'operatore fat comma (C<< => >>) effettua anche la quotatura di una bareword che compaia
come suo operando sinistro (L<hashes>).
