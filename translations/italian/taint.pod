=head1 Taint

Z<taint>

Perl fornisce strumenti per scrivere programmi sicuri. Tali strumenti non
sostituiscono un'attenta analisi e pianificazione, ma possono I<ricompensare> la vostra cautela
e comprensione dei problemi aiutandovi ad evitare errori insidiosi.

=head2 Uso del Modo Taint

X<taint>

Il I<modo taint> (o I<taint>, marchio NdT) aggiunge metadati a tutti i dati che provengono dall'esterno
del vostro programma. Ogni dato derivato da dati marchiati è anch'esso marchiato. Potete
usare dati marchiati nel vostro programma, ma se li usate in operazioni che hanno effetti sul mondo
esterno--ovvero se li usate in modo non sicuro--Perl solleva un'eccezione fatale.

C<perldoc perlsec> spiega il modo taint in grande dettaglio.

X<C<-T>; argomento a linea di comando taint>
X<argomenti a linea di comando; C<-T>>
X<C<%ENV>>

Per attivare il modo taint, lanciate il vostro programma con l'argomento a linea di comando C<-T>.
Se passate questo argomento nella linea C<#!> di un programma, dovete poi eseguire direttamente il
programma; se invece lo lanciate con C<perl miaapptainted.pl>, senza il flag
C<-T>, Perl termina con un'eccezione.  Infatti, nel momento in cui Perl incontra il
flag nella linea C<#!> è già troppo tardi, ad esempio, per marchiare i dati d'ambiente
di C<%ENV>.

=head2 Origine dei Dati Marchiati

I dati marchiati hanno due origini: i dati provenienti da un qualsiasi canale di input e l'ambiente operativo
del programma. Il primo consiste in qualunque cosa leggiate da un file o riceviate dagli utenti
nel caso di programmi web o di rete. Il secondo include gli argomenti a
linea di comando, le variabili d'ambiente e i dati restituiti da chiamate di sistema. Anche un'operazione
come la lettura da un directory handle produce dati marchiati.

X<C<Scalar::Util>>
X<C<tainted()>>
X<taint; controllo>

La funzione C<tainted()> del modulo C<Scalar::Util> distribuito con Perl restituisce vero se
il suo argomento è marchiato:

=begin programlisting

    die 'Oh no! Dati marchiati!'
        if Scalar::Util::tainted( $valore_sospetto );

=end programlisting

=head2 Rimuovere il Taint dai Dati

X<taint; untainting>
X<untainting>

Per rimuovere un taint, dovete estrarre delle porzioni sicure dei dati con una
cattura in un'espressione regolare.  I dati catturati non sono marchiati.  Se il vostro
input utente consiste di un numero telefonico americano, potete rimuoverne il taint con:

=begin programlisting

    die 'Numero ancora marchiato!'
        unless $numero =~ /(\(/d{3}\) \d{3}-\d{4})/;

    my $numero_sicuro = $1;

=end programlisting

Più è specifico il pattern che specifica ciò che è ammissibile, più sicuro sarà il
vostro programma.  L'approccio opposto di I<rifiutare> elementi o formati specifici
corre il rischio di trascurare dei pericoli. È molto meglio rifiutare
qualcosa che era sicuro ma inatteso che ammettere qualcosa di pericoloso che
sembra sicuro. Naturalmente, nessuno vi vieta di effettuare la cattura dell'intero
contenuto di una variabile--ma in tal caso, perché usare taint?

=head2 Rimuovere il Taint dall'Ambiente

X<taint; rimuovere l'origine del>

La variabile globale predefinita C<%ENV> rappresenta le variabili d'ambiente del sistema.  Tali
dati sono marchiati poiché i loro valori sono controllati da forze esterne al
programma. Ogni variabile d'ambiente che modifica come Perl o la shell
trovano file e directory sono potenziali vettori di attacchi. Un programma attento al taint
dovrebbe cancellare svariate chiavi da C<%ENV> e impostare C<$ENV{PATH}> a un path specifico
e sicuro:

=begin programlisting

    delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };
    $ENV{PATH} = '/path/ai/file/eseguibili/';

=end programlisting

Se non impostate C<$ENV{PATH}> in modo appropriato, riceverete messaggi a proposito della sua
scarsa sicurezza. Se tale variabile d'ambiente conteneva la directory d'esecuzione
corrente o delle directory relative, oppure se le directory
specificate permettono a tutti la scrittura, un attacco intelligente potrebbe dirottare le chiamate
di sistema per perpetrare i suoi misfatti.

Per ragioni simili, C<@INC> non contiene la directory di esecuzione corrente quando
è attivo il modo taint. Perl ignora anche le variabili d'ambiente
C<PERL5LIB> e C<PERLLIB>. Usate la direttiva C<lib> o il flag C<-I> di C<perl> per
aggiungere le directory di librerie al programma.

=head2 Trappole di Taint

Il modo taint è del tipo "tutto o nulla".  O è attivo o non lo è.  Talvolta questo induce
le persone a usare dei pattern permissivi per rimuovere il taint dai dati, dando un'errata illusione
di sicurezza.  Considerate attentamente la rimozione del taint.

X<C<-t>; argomento da linea di comando di attivazione taint ridotto>
X<argomenti da linea di comando; C<-t>>

Sfortunatamente, non tutti i moduli gestiscono i dati marchiati in modo appropriato.  Questo è un
problema che gli autori CPAN dovrebbero considerare seriamente.  Se dovete attivare i controlli di taint in
codice preesistente, potete usare il flag C<-t>, che attiva il modo taint ma
riduce le violazione di taint da eccezioni a semplici warning.  Questo non sostituisce ovviamente il
modo taint completo, ma vi permette di mettere in sicurezza programmi esistenti senza la rigidità
dell'approccio "tutto o nulla" di C<-T>.
