=head1 Testing

Z<testing>

X<testing>

Il I<testing> è un  processo che consiste nella scrittura ed esecuzione di piccoli pezzi di codice al fine di verificare
che il vostro software funzioni come vi aspettate. Un testing efficace è essenzialmente l'automatizzazione di un processo
che avete sicuramente già eseguito innumerevoli volte a mano: scrivere del codice, eseguirlo e controllare
se funziona. L'I<automazione> è il punto più importante. Anziché dover contare su delle persone
per ripetere in modo affidabile i controlli a mano, lasciate questo compito al calcolatore.

Perl 5 fornisce degli ottimi strumenti per aiutarvi a scrivere i test nel modo giusto.

=head2 Test::More

X<C<Test::More>>
X<C<ok()>>
X<testing; C<ok()>>

Per iniziare a fare testing in Perl dovete usare il modulo C<Test::More> distribuito con Perl 5, e in particolare la sua funzione
C<ok()>. C<ok()> riceve due parametri, un valore booleano e una stringa che descrive
lo scopo del test:

=begin programlisting

    ok(   1, 'il numero uno dovrebbe essere vero'            );
    ok(   0, '... mentre lo zero non dovrebbe'               );
    ok(  '', 'la stringa vuota dovrebbe avere valore falso'  );
    ok( '!', '... mentre una stringa non vuota non dovrebbe' );

    done_testing();

=end programlisting

X<testing; asserzione>

Qualunque condizione vogliate testare nel vostro programma può essere ridotta a un valore
binario. Ogni I<asserzione> di test è una semplice domanda a cui si può rispondere sì o no:
questo pezzettino di codice funziona come mi aspetto?  Un programma complesso potrebbe avere
migliaia di tali condizioni e, in generale, più ne considerate
meglio è. Isolare comportamenti specifici in singole asserzioni
vi permette di restringere il campo d'azione di bug ed equivoci, specialmente quando modificherete il
codice in futuro.

La funzione C<done_testing()> dice a C<Test::More> che il programma ha
eseguito con successo tutte le asserzioni di test previste. Se il programma
è incappato in una eccezione o è comunque terminato in modo inatteso prima di
chiamare C<done_testing()>, il framework di test vi notificherà che qualcosa
è andato storto. Senza un meccanismo come C<done_testing()>, come potreste I<accorgervene>?
È vero che il codice di questo esempio è troppo semplice per poter fallire, ma è altrettanto vero che il codice troppo semplice
per poter fallire fallisce molto più spesso di quanto ci si aspetti.

=begin sidebar

X<testing; piano>
X<C<plan()>>

C<Test::More> vi permette di specificare un I<piano di test> che rappresenta il numero di
asserzioni singole che intendete eseguire:

=begin programlisting

    use Test::More tests => 4;

    ok(   1, 'il numero uno dovrebbe essere vero'            );
    ok(   0, '... mentre lo zero non dovrebbe'               );
    ok(  '', 'la stringa vuota dovrebbe avere valore falso'  );
    ok( '!', '... mentre una stringa non vuota non dovrebbe' );

=end programlisting

L'argomento C<tests> di C<Test::More> imposta il piano di test per il programma. In pratica, è
una rete di sicurezza. Se sono stati eseguiti meno di quattro test, qualcosa è andato storto.  Se
sono stati eseguiti più di quattro test, qualcosa è andato storto.

=end sidebar

=head2 Eseguire Test

Z<running_tests>

Il programma risultante è a tutti gli effetti un programma Perl 5 che produce il seguente
output:

=begin screen

    ok 1 - il numero uno dovrebbe essere vero
    not ok 2 - ... mentre lo zero non dovrebbe
    #   Failed test '... mentre lo zero non dovrebbe'
    #   at valori_booleani.t line 4.
    not ok 3 - la stringa vuota dovrebbe avere valore falso
    #   Failed test 'la stringa vuota dovrebbe avere valore falso'
    #   at valori_booleani.t line 5.
    ok 4 - ... mentre una stringa non vuota non dovrebbe
    1..4
    # Looks like you failed 2 tests of 4.

=end screen

X<TAP (Test Anything Protocol)>
X<testing; TAP>

Questo formato è conforme a uno standard per l'output dei test chiamato I<TAP>, il I<Test
Anything Protocol> (U<http://testanything.org/>). Il fallimento di test TAP genera
dei messaggi diagnostici per facilitare il debugging.

X<C<Test::Harness>>
X<C<prove>>
X<testing; C<prove>>
X<testing; eseguire test>

L'output di un file di test che contiene molte asserzioni (e specialmente molte
asserzioni I<fallite>) può essere verboso. Nella maggior parte dei casi, siete interessati soltanto a sapere
se tutti i test sono passati e, in caso contrario, i dettagli dei fallimenti. Il modulo
C<Test::Harness> distribuito con Perl interpreta il formato TAP e il suo programma associato C<prove> esegue i test
e visualizza solo le informazioni più pertinenti:

=begin screen

    $ B<prove valori_booleani.t>
    valori_booleani.t .. 1/?
    #   Failed test '... mentre lo zero non dovrebbe'
    #   at valori_booleani.t line 4.

    #   Failed test 'la stringa vuota dovrebbe avere valore falso'
    #   at valori_booleani.t line 5.
    # Looks like you failed 2 tests of 4.
    valori_booleani.t .. Dubious, test returned 2
        (wstat 512, 0x200)
    Failed 2/4 subtests

    Test Summary Report
    -------------------
    valori_booleani.t (Wstat: 512 Tests: 4 Failed: 2)
      Failed tests:  2-3

=end screen

È un output molto lungo che riporta qualcosa che dovrebbe essere gíà ovvio: il secondo e il terzo
test falliscono perché lo zero e la stringa vuota hanno valore falso.  Si possono facilmente
evitare tali fallimeti invertendo il senso delle condizioni con l'uso della
coercizione booleana (L<boolean_coercion>):

=begin programlisting

    ok(   B<!> 0, '... mentre lo zero non dovrebbe'              );
    ok(  B<!> '', 'la stringa vuota dovrebbe avere valore falso' );

=end programlisting

Con queste modifiche, C<prove> visualizza ciò che segue:

=begin screen

    $ B<prove valori_booleani.t>
    valori_booleani.t .. ok
    All tests successful.

=end screen

=begin sidebar

Vedete C<perldoc prove> per la descrizione di opzioni utili per il test, come la possibilità di eseguire test
in parallelo (C<-j>), di aggiungere automaticamente F<lib/> al path degli include di Perl (C<-l>),
di eseguire ricorsivamente tutti i file di test che si trovano nella directory F<t/> (C<-r t>) e di eseguire
per primi i test più lenti (C<--state=slow,save>).

X<C<proveall>>
X<testing; alias C<proveall>>
Il seguente alias C<proveall> della shell bash può essere utile:

    alias proveall='prove -j9 --state=slow,save -lr t'

=end sidebar

=head2 Migliorare i Confronti

Sebbene al cuore di ogni test automatico ci sia la condizione booleana "questo è
vero o falso?", ridurre ogni cosa a tale condizione booleana è noioso
e offre scarse possibilità di diagnostica. C<Test::More> fornisce svariate
altre funzioni di asserzione che possono essere più convenienti.

X<C<is()>>
X<testing; C<is()>>
X<operatori; C<eq>>

La funzione C<is()> confronta due valori usando l'operatore C<eq>. Se tali valori sono
uguali il test passa. Altrimenti il test fallisce con un messaggio
diagnostico:

=begin programlisting

    is(           4,   2 + 2, 'la somma dovrebbe funzionare' );
    is( 'frittella',   100,   'le frittelle sono numeri'     );

=end programlisting

Come vi aspettavate, il primo test passa e il secondo fallisce:

=begin screen

    t/test_is.t .. 1/2
    #   Failed test 'le frittelle sono numeri'
    #   at t/test_is.t line 8.
    #          got: 'frittella'
    #     expected: '100'
    # Looks like you failed 1 test of 2.

=end screen

Mentre C<ok()> fornisce solo il numero di linea del test fallito, C<is()>
visualizza il valore atteso e quello ricevuto.

C<is()> applica implicitamente il contesto scalare ai propri valori (L<prototypes>). Pertanto
potete ad esempio controllare il numero di elementi di un array
senza valutarlo esplicitamente in contesto scalare:

=begin programlisting

    my @cugini = qw( Riccardo Ale Carlo
                     Enrico Camilla Maria );
    is( @cugini, 6, 'Dovrei avere solo sei cugini' );

=end programlisting

... anche se alcuni preferiscono scrivere C<scalar @cugini> per essere più
chiari.

X<C<isnt()>>
X<testing; C<isnt()>>
X<operatori; C<ne>>

La funzione duale C<isnt()> di C<Test::More> confronta due valori usando l'operatore
C<ne> e ha successo se essi non sono uguali. Anche in questo caso gli operandi sono valutati
in contesto scalare.

X<C<cmp_ok()>>
X<testing; C<cmp_ok()>>

Sia C<is()> che C<isnt()> effettuano dei I<confronti stringa> con gli operatori
C<eq> e C<ne> di Perl 5. Quasi sempre questa è la cosa giusta da fare, ma per
valori complessi come gli oggetti con overloading (L<overloading>) o le variabili doppie
(L<dualvars>) può essere preferibile effettuare il test con un confronto esplicito. La funzione C<cmp_ok()>
vi permette di specificare l'operatore di confronto:

=begin programlisting

    cmp_ok( 100, $saldo_corrente, '<=',
           'Dovrei avere almeno 100€' );

    cmp_ok( $pastore_scozzese, $collie, '==',
           'I numeri dei parenti di Lassie dovrebbero essere gli stessi' );

=end programlisting

X<C<isa_ok()>>
X<testing; C<isa_ok()>>

Classi e oggetti hanno dei propri modi peculiari di interagire con i test.
Potete verificare se una classe o un oggetto estendono un'altra classe (L<inheritance>) con
C<isa_ok()>:

=begin programlisting

    my $gorzilla = RobotScimmia->new();
    isa_ok( $gorzilla, 'Robot' );
    isa_ok( $gorzilla, 'Scimmia' );

=end programlisting

C<isa_ok()> fornisce un proprio messaggio diagnostico in caso di fallimento.

C<can_ok()> verifica che una classe o un oggetto possano eseguire uno o più metodi specificati:

=begin programlisting

    can_ok( $gorzilla, 'mangia_banana' );
    can_ok( $gorzilla, 'trasformati', 'distruggi_tokyo' );

=end programlisting

La funzione C<is_deeply()> confronta due riferimenti per garantire che abbiano
contenuti uguali:

=begin programlisting

    use Clone;

    my $numeri     = [ 4, 8, 15, 16, 23, 42 ];
    my $numclonati = Clone::clone( $numeri );

    is_deeply( $numeri, $numclonati,
         'clone() dovrebbe generare elementi identici' );

=end programlisting

X<CPAN; C<Test::Differences>>
X<CPAN; C<Test::Deep>>

Se il confronto fallisce, C<Test::More> fa del suo meglio per fornire una ragionevole
diagnostica che indichi la posizione della prima differenza tra le
strutture. Vedete i moduli CPAN C<Test::Differences> e C<Test::Deep> per
test maggiormente configurabili.

C<Test::More> contiene molte altre funzioni, ma quelle descritte sono le più utili.

=head2 Organizzazione dei Test

X<testing; file F<.t>>
X<testing; directory F<t/>>
X<C<Module::Build>>
X<C<ExtUtils::MakeMaker>>

Le distribuzioni CPAN dovrebbero includere una directory F<t/> con uno o più file di
test i cui nomi terminano col suffisso F<.t>.  Per default, quando fate il build di una distribuzione
con C<Module::Build> o C<ExtUtils::MakeMaker>, il passo di testing esegue tutti i file
F<t/*.t>, sintetizza i loro output e ha successo o fallisce a seconda dei
risultati dell'intera suite di test.  Non ci sono linee guida specifiche su come
gestire i contenuti dei singoli file F<.t>, ma due strategie sono piuttosto
comuni:

=over 4

=item * Ogni file F<.t> corrisponde a un file F<.pm>

=item * Ogni file F<.t> corrisponde a una funzionalità

=back

Un approccio ibrido vi dà più flessibilità; un test potrebbe verificare che tutti i vostri moduli
siano compilabili, mentre gli altri test potrebbero verificare che ogni modulo si comporti come previsto.
Gestire i test in termini di funzionalità diventa più opportuno man mano che le distribuzioni diventano più grandi;
dei file di test troppo grandi sono più difficili da manutenere.

L'uso di file di test separati può anche accelerare lo sviluppo. Se state aggiungendo
la capacità di sputare fuoco al vostro C<RobotScimmia>, potreste volere eseguire il solo file di test
F<t/sputa_fuoco.t>.  Quando la nuova funzionalità si comporta in modo soddisfacente,
eseguite l'intera suite di test per verificare che le modifiche locali non abbiano
effetti globali indesiderati.

=head2 Altri Moduli di Testing

X<C<Test::Builder>>
X<testing; C<Test::Builder>>

C<Test::More> si basa su un modulo sottostante di nome C<Test::Builder>.  Tale
modulo gestisce il piano di test e coordina l'output del test col protocollo TAP.
Questa separazione permette a diversi moduli di test di condividere lo stesso
C<Test::Builder>.  Di conseguenza, CPAN contiene centinaia di moduli di test--e tutti
possono convivere nello stesso programma.

X<CPAN; C<Test::Exception>>
X<CPAN; C<Test::Fatal>>
X<CPAN; C<Test::MockObject>>
X<CPAN; C<Test::MockModule>>
X<CPAN; C<Test::WWW::Mechanize>>
X<CPAN; C<Plack::Test>>
X<CPAN; C<Test::WWW::Mechanize::PSGI>>
X<CPAN; C<Test::Database>>
X<CPAN; C<DBICx::TestDatabase>>
X<CPAN; C<DBIx::Class>>
X<CPAN; C<Test::Class>>
X<CPAN; C<Test::Routine>>
X<CPAN; C<Test::Differences>>
X<CPAN; C<Test::Deep>>
X<CPAN; C<Test::LongString>>
X<CPAN; C<Devel::Cover>>

=over 4

=item * C<Test::Fatal> vi aiuta a controllare se il vostro codice lancia (oppure non lancia)
le eccezioni in modo appropriato. Potreste anche imbattervi in C<Test::Exception>.

=item * C<Test::MockObject> e C<Test::MockModule> vi permettono di testare interfacce
complesse attraverso il I<mocking> (ovvero l'emulazione di oggetti per produrre risultati in modo controllato).

=item * C<Test::WWW::Mechanize> vi aiuta a testare le applicazioni web, mentre
C<Plack::Test>, C<Plack::Test::Agent> e la sottoclasse
C<Test::WWW::Mechanize::PSGI> fanno la stessa cosa senza utilizzare un server web
esterno.

=item * C<Test::Database> fornisce funzioni per il test, l'uso e l'abuso di database.
C<DBICx::TestDatabase> vi aiuta a testare schemi generati con C<DBIx::Class>.

=item * C<Test::Class> offre un meccanismo alternativo per organizzare le suite di
test.  Vi permette di creare classi i cui metodi raggruppano dei test.
Potete ereditare da classi di test allo stesso modo in cui le classi del vostro codice ereditano l'una
dall'altra. Ciò costituisce un modo eccellente di ridurre la duplicazione nelle suite di test.  Vedete
l'eccellente serie di scritti su C<Test::Class> di
Curtis PoeN<U<http://www.modernperlbooks.com/mt/2009/03/organizing-test-suites-with-testclass.html>>.
La più recente distribuzione C<Test::Routine> offre funzionalità simili attraverso
l'uso di Moose (L<moose>).

=item * C<Test::Differences> testa l'uguaglianza di stringhe e strutture dati e
visualizza le differenze nei messaggi di diagnostica. C<Test::LongString> fornisce
assrzioni analoghe.

=item * C<Test::Deep> testa l'equivalenza di strutture dati annidate
(L<nested_data_structures>).

=item * C<Devel::Cover> analizza l'esecuzione della vostra suite di test e riporta
la quantità del vostro codice che i vostri test vanno effettivamente a stimolare.  In generale, maggiore è
la copertura meglio è--sebbene una copertura del 100% non sia sempre possibile, il 95% è molto meglio
dell'80%.

=back

Vedete il progetto Perl QA (U<http://qa.perl.org/>) per maggiori informazioni sul
testing in Perl.
