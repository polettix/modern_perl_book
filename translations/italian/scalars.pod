=head1 Scalari

Z<scalars>

X<scalari>
X<C<$>; sigillo>
X<sigilli; C<$>>

Il tipo di dati fondamentale in Perl 5 è lo I<scalare>, un valore discreto singolo.
Tale valore può essere una stringa, un intero, un numero a virgola mobile, un filehandle
o un riferimento--ma è sempre e comunque un singolo valore. Gli scalari possono essere variabili
lessicali, di package o globali (L<globals>). Potete dichiarare soltanto le variabili lessicali o
di package. I nomi delle variabili scalari devono conformarsi alle linee guida standard
per i nomi di variabile (L<names>). Le variabili scalari usano sempre, come sigillo (L<sigils>),
il carattere del dollaro (C<$>).

=begin tip Sigilli Varianti e Contesto

I valori scalari e il contesto scalare sono fortemente legati; assegnare a uno scalare
fornisce un contesto scalare. Usare il sigillo scalare con una variabile aggregato
impone il contesto scalare per accedere a un singolo elemento dell'hash o dell'array.

=end tip

=head2 Scalari e Tipi

Una variabile scalare può contenere qualunque tipo di valore scalare senza richiedere conversioni o
cast speciali, e il tipo del valore memorizzato in una variabile può cambiare:

=begin programlisting

    my $valore;
    $valore = 123.456;
    $valore = 77;
    $valore = "Sono l'alluce di Max.";
    $valore = Negozio::Gelato->new();

=end programlisting

Anche se questo codice è I<legale>, cambiare il tipo di dato memorizzato in uno scalare
è segno di confusione.

La flessibilità di tipo spesso causa una coercizione del valore (L<coercion>). Per
esempio, potreste trattare il contenuto di uno scalare come se fosse una stringa, anche se non gli avete assegnato
esplicitamente una stringa:

=begin programlisting

    my $codice_postale = 10100;
    my $citta_regione_cap = 'Torino, Piemonte' . ' ' . $codice_postale;

=end programlisting

Potete anche applicare operazioni matematiche a delle stringhe:

=begin programlisting

    my $codice_radio = 'KBMIU';

    # aggiorna codice e restituisci il nuovo valore
    my $prossimo_codice = ++$codice_radio;

    # restituisci il vecchio valore, e I<quindi> aggiorna il codice
    my $codice_attuale = $codice_radio++;

    # così I<non funziona>:
    my $nuovo_codice  = $codice_radio + 1;

=end programlisting

X<incremento; stringa>

=begin tip Incremento Magico Unidirezionale

Questo incremento magico di stringa non ha un corrispondente
decremento. Non potete ottenere il valore stringa precedente scrivendo C<$codice_radio-->.

=end tip

L'operazione di incremento di stringa fa diventare la C<a> una C<b> e la C<z> una C<aa>,
rispettando l'insieme di caratteri e la distinzione maiuscole/minuscole. Mentre C<ZZ9> diventa C<AAA0>, C<ZZ09>
diventa C<ZZ10>--i numeri danno luogo a riporto fino a che ci sono cifre più significative da
incrementare, come sul contachilometri di un'automobile.

X<conversione a stringa>
X<conversione a numero>

Valutare un riferimento (L<references>) in contesto stringa produce una stringa.
Valutare un riferimento in contesto numerico produce un numero. Nessuna delle due operazioni
modifica il riferimento, ma non potete riottenerlo dai loro risultati:

=begin programlisting

    my $autori                   = [qw( Pratchett Vinge Conway )];
    my $riferimento_come_stringa = '' . $autori;
    my $riferimento_come_numero  =  0 + $autori;

=end programlisting

C<$autori> è ancora un riferimento valido, ma C<$riferimento_come_stringa> è una stringa
che non ha connessioni con il riferimento e C<$riferimento_come_numero> è un numero che
non ha connessioni con il riferimento.

X<C<Scalar::Util>>
X<variabili doppie>
X<C<dualvar()>>

Per permettere di effettuare coercizioni senza perdere dei dati, gli scalari del Perl 5 possono contenere componenti
sia numeriche che stringa. In Perl 5, la struttura dati interna per rappresentare uno scalare
ha sia uno slot numerico che uno slot stringa. Accedere a una stringa in contesto numerico
produce uno scalare con valori sia numerico che stringa. La funzione C<dualvar()>
del modulo core C<Scalar::Util> ci permette di manipolare entrambi i
valori direttamente in un singolo scalare.

X<booleano>
X<scalari; valori booleani>
X<booleani; vero>
X<booleani; falso>
X<stringhe; vero>
X<stringhe; falso>
X<numeri; vero>
X<numeri; falso>

Gli scalari non contengono uno slot separato per i valori booleani. In contesto booleano,
la stringa vuota (C<''>) e la stringa C<'0'> hanno valore falso. Tutte le altre stringhe hanno valore vero. In
contesto booleano, i numeri che hanno valore zero (C<0>, C<0.0>, and C<0e0>) rappresentano il valore booleano
falso. Tutti gli altri numeri rappresentano il valore vero.

=begin tip Che Cos'è la Verità?

Attenzione al fatto che le I<stringhe> C<'0.0'> e C<'0e0'> hanno valore vero; questo è uno
dei casi in cui Perl 5 fa una distinzione fra ciò che sembra un numero e
ciò che è veramente un numero.

=end tip

X<C<undef>>

C'è un altro valore che è sempre falso: C<undef>. È il valore delle variabili non inizializzate
 ma è anche un valore di per sè.
