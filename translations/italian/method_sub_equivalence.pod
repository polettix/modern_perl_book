=head1 Equivalenza Metodi-Funzioni

Z<method_sub_equivalence>

X<predefinite; parole chiave; C<sub>>

Il sistema ad oggetti di Perl 5 è deliberatamente minimale (L<blessed_references>).
Dato che una classe è un package, Perl non distinge tra una funzione e
un metodo memorizzato in un package. La stessa istruzione C<sub> viene usata per dichiarare entrambi.
La documentazione può esplicitare le vostre intenzioni, ma Perl non avrà problemi a fare il dispatch ad
una funzione invocata come metodo. Allo stesso modo, potete invocare un metodo come se fosse una
funzione--fully-qualified, esportata o in forma di riferimento--se gli passate l'invocante
manualmente.

Invocare una cosa sbagliata in modo sbagliato è causa di problemi.

=head2 Prospettiva del Chiamante

Considerate una classe con svariati metodi:

=begin programlisting

    package Ordine;

    use List::Util 'sum';

    ...

    sub calcola_prezzo
    {
        my $self = shift;
        return sum( 0, $self->articoli_ordinati() );
    }

=end programlisting

Dato un oggetto C<Ordine> C<$o>, le seguenti chiamate di questo metodo I<possono>
sembrare equivalenti:

=begin programlisting

    my $prezzo = $o->calcola_prezzo();

    # sbagliato; non usatelo
    my $prezzo = Ordine::calcola_prezzo( $o );

=end programlisting

Sebbene in questo semplice caso esse producano lo stesso output, la seconda viola
l'incapsulamento dell'oggetto aggirando il lookup del metodo.

X<metodi; evitare di chiamarli come funzioni>

Se C<$o> fosse invece una sottoclasse o un allomorfismo (L<roles>) di C<Ordine> che
sovrascrive C<calcola_prezzo()>, aggirare il dispatch del metodo chiamerebbe il metodo
sbagliato. Qualunque modifica dell'implementazione di C<calcola_prezzo()>, ad esempio
relativa all'ereditarietà o alla delega con C<AUTOLOAD()>--potrebbe far fallire
il codice chiamante.

X<metodi; chiamata per riferimento>
X<C<UNIVERSAL>; C<can()>>
X<C<can()>>

Esiste una situazione in Perl in cui questo comportamento può sembrare necessario. Se forzate
la risoluzione senza dispatch di un metodo, come invocate il riferimento a metodo risultante?

=begin programlisting

    my $rif_a_met = $o->can( 'applica_sconto' );

=end programlisting

In realtà, avete due possibilità. La prima consiste nello scartare il valore di ritorno del
metodo C<can()>:

=begin programlisting

    $o->applica_sconto() if $o->can( 'applica_sconto' );

=end programlisting

La seconda consiste nell'usare il riferimento stesso insieme alla sintassi di invocazione di metodo:

=begin programlisting

    if (my $rif_a_met = $o->can( 'applica_sconto' ))
    {
        $o->$rif_a_met();
    }

=end programlisting

Quando C<$rif_a_met> contiene un riferimento a funzione, Perl fa un'invocazione su tale
riferimento passando C<$o> come invocante. Questa sintassi funziona anche quando sono attive delle restrizioni,
in modo analogo all'invocazione di un metodo attraverso uno scalare che ne contiene il nome:

=begin programlisting

    my $nome = 'applica_sconto';
    $o->$nome();

=end programlisting

C'è un piccolo svantaggio nell'invocare un metodo per riferimento; se la struttura
del programma cambia tra il momento in cui il riferimento viene memorizzato e il momento in cui viene usato
per l'invocazione, tale riferimento potrebbe non corrispondere più al metodo appropriato. Se
la classe C<Ordine> fosse cambiata in modo tale che C<Ordine::applica_sconto> non fosse più
il metodo giusto da chiamare, il riferimento in C<$rif_a_met> non sarebbe stato aggiornato.

Quando usate questa forma di invocazione, limitate lo scope dei riferimenti.

=head2 Prospettiva del Chiamato

X<metodi; evitare di chiamare come funzioni>
X<funzioni; evitare di chiamare come metodi>

Dato che Perl 5 non distingue tra funzioni e metodi nelle
dichiarazioni e dato che è I<possibile> (per quanto sconsigliabile) invocare una
data funzione sia come funzione che come metodo, si può scrivere una funzione
pronta ad essere chiamata in entrambi i modi. Il modulo C<CGI> distribuito con Perl da il cattivo esempio. Le sue funzioni
applicano svariate euristiche per determinare se il loro primo argumento è un
invocante.

Ciò ha molti svantaggi. Prima di tutto, è difficile predire esattamente quali sono gli invocanti
potenzialmente validi per un dato metodo, specialmente quando è possibile avere a che fare con
delle sottoclassi. Anche creare una API che non possa essere usata scorrettamente dagli utenti è più difficile,
così come scrivere la documentazione. Che cosa succede quando una parte del progetto
usa l'interfaccia procedurale e un'altra parte usa l'interfaccia a oggetti?

Se I<dovete> fornire sia un'interfaccia procedurale che un'interfaccia OO ad una libreria,
create due API separate.
