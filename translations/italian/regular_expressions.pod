Z<regular_expressions>

=head1 Letterali

X<regex; letterali>

Le regex più semplici sono dei pattern costituiti da una sottostringa:

=begin programlisting

    my $nome = 'Castellamonte';
    say 'Ho trovato una stella!' if $nome =~ B</stella/>;

=end programlisting

X<operatori; match>
X<operatori; C<//>>
X<operatori; C<m//>>
X<regex; atomo>
X<atomo>

L'operatore di match (C<m//>, abbreviato C<//>) identifica una espressione regolare--in
questo esempio, C<stella>. Questo pattern I<non> è una parola. Il suo significato
è "il carattere C<s>, seguito dal carattere C<t>, seguito dal carattere C<e>, ecc.".
Ogni carattere nel pattern è un elemento indivisibile, o
I<atomo>. Può combaciare o non combaciare con un carattere in una stringa.

X<operatori; C<=~>>
X<C<=~>; binding a regex>
X<operatori; C<!~>>
X<C<!~>; binding a regex negato>

L'operatore di binding a regex (C<=~>) è un operatore infisso (L<fixity>) che
applica la regex del suo secondo operando a una stringa fornita dal suo primo
operando. Quando viene valutato in contesto scalare, esso restituisce vero se
il match ha successo. La forma negata dell'operatore di binding (C<!~>) valuta a vero
se il match non ha successo.

=begin tip Ricordatevi C<index>!

X<predefinite; funzioni; C<index>>

Potete anche usare la funzione predefinita C<index> per cercare una sottostringa letterale in una stringa.
Usare un motore di espressioni regolari per questo compito è come andare al negozio giù all'angolo a
comprare il latte su un elicottero da combattimento--ma Perl vi permette di scegliere la forma che vi sembra
più facilmente manutenibile.

=end tip

X<operatori; sostituzione>
X<operatori; C<s///>>

L'operatore di sostituzione, C<s///>, è sotto certi aspetti un operatore di raggruppamento
(L<fixity>) con due operandi. Il suo primo operando è un'espressione regolare, di cui si vuole fare
il match in una stringa quando è presente anche l'operatore di binding di regex. Il secondo operando è una
sottostringa usata per sostituire la porzione di stringa riconosciuta col match.
Per esempio, per curare una fastidiosa allergia estiva, potete scrivere:

=begin programlisting

    my $stato = 'Sto male.';
    $stato    =~ s/male/bene/;
    say $stato;

=end programlisting

=head1 L'operatore qr// e la Combinazione di Regex

X<operatori; C<qr//>>
X<C<qr//>; operazione di compilazione di regex>
X<regex; C<qr//>>
X<regex; prima classe>

L'operatore C<qr//> crea delle regex come oggetti di prima classe. Per usarle, interpolatele nell'operatore
di match:

=begin programlisting

    my $stella = B<qr/stella/>;
    say 'Ho trovato una stella!' if $nome =~ /$stella/;

=end programlisting

... o combinate diversi oggetti regex in dei pattern complessi:

=begin programlisting

    my $stella = qr/stella/;
    my $monte  = qr/monte/;

    say 'Ho trovato una stella sopra un monte!'
        if $nome =~ /B<$stella$monte>/;

    like( $nome, qr/B<$stella$monte>/,
                   'Ho trovato una stella sopra un monte!' );

=end programlisting

=begin tip Come C<is>, ma con il C<like> di More 

X<CPAN; C<Test::More>>
X<C<like>>

La funzione C<like> di C<Test::More> verifica se c'è un match tra il primo argomento e la
regex fornita come secondo argumento.

=end tip

=head1 Quantificatori

X<regex; quantificatori>
X<regex; quantificatore zero o uno>
X<C<?>; quantificatore zero o uno di regex>

La potenza delle espressioni regolari è incrementata dall'uso dei I<quantificatori di regex>,
che vi permettono di specificare quante volte una componente della regex può comparire in una striga
con cui viene fatto il match. Il più semplice è il I<quantificatore zero o uno>, scritto C<?>:

=begin programlisting

    my $miao_o_mio = qr/miaB<?>o/;

    like( 'miao', $miao_o_mio, "il match di 'miao' con /mia?o/ ha successo" );
    like( 'mio',  $miao_o_mio, "il match di 'mio' con /mia?o/ ha successo"  );

=end programlisting

La presenza di un atomo in una espressione regolare seguito dal carattere C<?> significa "fai il match
con questo atomo zero o una volta". L'espressione regolare qui sopra trova un match se zero o una occorrenza del
carattere C<a> precedono immediatamente un carattere C<o>, quindi il match ha successo con le sottostringhe letterali C<miao> e C<mio>.

X<regex; quantificatore uno o più>
X<C<+>; quantificatore uno o più di regex>

Il I<quantificatore uno o più>, scritto C<+>, trova un match solo se c'è almeno una occorrenza
dell'atomo quantificato:

=begin programlisting

    my $qualche_a = qr/miaB<+>o/;

    like( 'miao',    $qualche_a, "il match di 'miao' con /mia+o/ ha successo" );
    like( 'miaao',   $qualche_a, "anche quello di 'miaao'"                    );
    like( 'miaaao',  $qualche_a, "anche quello di 'miaaao'"                   );
    like( 'miaaaao', $qualche_a, "anche quello di 'miaaaao'"                  );

    unlike( 'mio',   $qualche_a, "invece quello di 'mio' fallisce" );

=end programlisting

In teoria non c'è alcun limite massimo al numero di occorrenze dell'atomo quantificato per cui
il match ha successo.

X<quantificatori; zero o più>
X<C<*>; quantificatore di regex zero o più>

Il I<quantificatore zero o più>, scritto C<*>, trova un match se ci sono zero o più occorrenze dell'atomo
quantificato:

=begin programlisting

    my $qualunque_a = qr/miaB<*>o/;

    like( 'miao',    $qualunque_a, "il match di 'miao' con /mia*o/ ha successo" );
    like( 'miaao',   $qualunque_a, "anche quello di 'miaao'"                    );
    like( 'miaaao',  $qualunque_a, "anche quello di 'miaaao'"                   );
    like( 'miaaaao', $qualunque_a, "anche quello di 'miaaaao'"                  );
    like( 'mio',     $qualunque_a, "e anche quello di 'mio'"                    );

=end programlisting

Per quanto ciò possa sembrare curioso, questo operatore vi permette di specificare componenti opzionali di una
regex. Ricordatevi di usarlo con parsimonia: è uno strumento costoso e di scarsa precisione. La I<maggior parte>
delle espressioni regolari beneficia dell'uso dei quantificatori C<?> e C<+> molto più che
di C<*>. Spesso precisare le vostre intenzioni aumenta la chiarezza.

X<quantificatori numerici>
X<C<{}>; quantificatori numerici di regex>

I I<quantificatori numerici> definiscono un numero specifico di possibili occorrenze di un atomo.
C<{n}> significa che il match deve avvenire esattamente I<n> volte.

=begin programlisting

    # equivalente a qr/miao/;
    my $solo_una_a = qr/miaB<{1}>o/;

    like( 'miao', $solo_una_a, "il match di 'miao' con /mia{1}o/ ha successo" );

=end programlisting

C<{n,}> fa il match con un atomo I<almeno> I<n> volte:

=begin programlisting

    # equivalente a qr/mia+o/;
    my $qualche_a = qr/miaB<{1,}>o/;

    like( 'miao',    $qualche_a, "il match di 'miao' con /mia{1,}o/ ha successo" );
    like( 'miaao',   $qualche_a, "anche quello di 'miaao'"                       );
    like( 'miaaao',  $qualche_a, "anche quello di 'miaaao'"                      );
    like( 'miaaaao', $qualche_a, "anche quello di 'miaaaao'"                     );

=end programlisting

C<{n,m}> significa che il match deve avvenire almeno I<n> volte e non più di
I<m> volte:

=begin programlisting

    my $poche_a = qr/miaB<{1,3}>o/;

    like( 'miao',    $poche_a, "il match di 'miao' con /mia{1,3}o/ ha successo" );
    like( 'miaao',   $poche_a, "anche quello di 'miaao'"                        );
    like( 'miaaao',  $poche_a, "anche quello di 'miaaao'"                       );

    unlike( 'miaaaao', $poche_a, "invece quello di 'miaaaao' fallisce" );

=end programlisting

Potete esprimere i quantificatori simbolici in termini di quantificatori numerici,
ma la maggior parte dei programmi usa i primi molto più spesso dei secondi.

=head1 Greediness

X<quantificatori greedy>
X<quantificatori; greedy>

I quantificatori C<+> e C<*> sono I<greedy> (NdT avidi, aggressivi), nel senso che tentano di includere nel match
il maggior numero possibile di caratteri della stringa in input. Questo punto è particolarmente pericoloso. Considerate un
uso naE<iuml>f del pattern C<.*>, ovvero "zero o più caratteri, a capo escluso":

=begin programlisting

    # una regex mediocre
    my $pasto_caldo = qr/pasto.*caldo/;

    say 'Ho trovato un pasto caldo!'
        if 'Ti offro un pasto caldo' =~ $pasto_caldo;

    say 'Ho trovato un pasto caldo!'
         if 'l'impasto della torta deve essere caldo' =~ $pasto_caldo;

=end programlisting

I quantificatori greedy iniziano con l'includere I<tutto> nel match, e scartano i
caratteri uno alla volta, solo quando diventa ovvio che non possono far parte del match.

X<C<?>; quantificatore zero o uno di regex>
X<C<*?>; quantificatore zero o uno non-greedy di regex>

Potete usare il modificatore di quantificatori C<?> per rendere parsimoniosi i quantificatori greedy:

=begin programlisting

    my $per_nulla_avido = qr/pasto.*?caldo/;

=end programlisting

Quando elabora un quantificatore non-greedy, il motore di espressioni regolari preferisce
il più I<corto> dei match potenziali e aggiunge altri caratteri a quelli
già identificati dal pattern C<.*?> solo se con quelli correnti
il match fallirebbe. Dato che C<*> accetta zero o più occorrenze, potenzialmente il numero
minimo di caratteri con cui il pattern d'esempio fa il match è zero:

=begin programlisting

    say 'Ho trovato un pasto caldo'
    if 'vorreiunpastocaldo' =~ /$per_nulla_avido/;

=end programlisting

X<C<+?>; quantificatore uno o più non-greedy di regex>

Usate C<+?> per fare il match di una o più occorrenze in modo non-greedy:

=begin programlisting

    my $per_nulla_avido_bis = qr/pasto.+?caldo/;

    unlike( 'vorreiunpastocaldo', $per_nulla_avido_bis );

    like( 'vorrei un pasto caldo', $per_nulla_avido_bis );

=end programlisting

X<C<??>; quantificatore zero o uno non-greedy di regex>

Il modificatore di quantificatori C<?> si applica anche al quantificatore C<?> (zero o un match)
e ai quantificatori numerici. In ogni caso, il suo effetto è quello di fare sì che la regex
includa nel match il minor numero possibile di caratteri di input.

I pattern greedy C<.+> e C<.*> possono essere allettanti, ma sono pericolosi. Un
appassionato di cruciverba che deve riempire le quattro caselle
del 7 Verticale ("La regina dei fiori") riceverà un sacco di proposte sbagliate con il
pattern:

=begin programlisting

    my $sette_verticale   = qr/r$solo_lettere*a/;

=end programlisting

Dovrebbe scartare C<Armenia>, C<Bretagna> e C<Brasilia> molto prima che il
programma suggerisca C<rosa>. Non solo queste parole sono troppo lunghe, ma il match
inizia in mezzo ad esse. Una comprensione di prima mano del funzionamento della greediness può aiutare,
ma non può sostituire l'esperienza acquisita con un gran numero di test su dati reali.

=head1 Ancore di Regex

X<regex; ancore>
X<ancore; inizio stringa>
X<C<\A>; metacarattere di inizio stringa nelle regex>

Le I<ancore di regex> forzano il motore di regex a iniziare o terminare un match in una posizione
assoluta. L'I<ancora di inizio stringa> (C<\A>) prescrive che l'inizio del match
coincida con l'inizio della stringa:

=begin programlisting

    # riconosce anche "ricarica", "relax" e "ripartire"
    my $sette_verticale = qr/\Ar${solo_lettere}{2}a/;

=end programlisting

X<ancore; fine stringa>
X<C<\Z>; metacarattere di fine stringa nelle regex>

L'I<ancora di fine linea> (C<\Z>) richiede che la fine del match coincida con la fine
di una linea nella stringa.

=begin programlisting

    # riconosce anche "rara", ma e` sicuramente un bel passo avanti
    my $sette_verticale = qr/\Ar${solo_lettere}{2}a\Z/;

=end programlisting

X<metacarattere di limite parola>
X<C<\b>; metacarattere di limite parola nelle regex>

L'I<ancora di limite parola> (C<\b>) trova un match solo al limite tra un carattere di
una parola (C<\w>) e un carattere che non appartiene alla parola (C<\W>). Usate una regex con questa ancora
per riconoscere C<rosa> e scartare invece C<carica>:

=begin programlisting

    my $sette_verticale = qr/\br${solo_lettere}{2}a\b/;

=end programlisting

=head1 Metacaratteri

X<regex; metacaratteri>
X<regex; metacaratteri>
X<metacaratteri; regex>

Perl interpreta alcuni caratteri nelle espressioni regolari come I<metacaratteri>,
ovvero caratteri che rappresentano qualcosa di diverso dalla loro interpretazione letterale.
I metacaratteri danno a chi sa usare le regex una potenza che va ben al di là del match di sottostringhe.
Il motore di regex tratta tutti i metacaratteri come atomi.

X<regex; C<.>>
X<C<.>; metacarattere di tutto tranne a capo nelle regex>

Il metacarattere C<.> significa "fai il match con qualunque carattere eccetto il carattere di a capo". Ricordate
l'avvertimento dato sopra; molti principianti lo dimenticano. Una semplice ricerca con regex--che ignora
le migliorie possibili con l'uso delle ancore--per il 7 Vericale potrebbe essere C</r..a/>. Naturalmente,
ci sono sempre diversi modi di ottenere la risposta corretta:

=begin programlisting

    for my $parola (@parole)
    {
        next unless length( $parola ) == 4;
        next unless $parola =~ /rB<..>a/;
        say "Potrebbe essere: $parola";
    }

=end programlisting

X<regex; C<\w>>
X<C<\w>; matacarattere alfanumerico nelle regex>

Se le potenziali soluzioni in C<@parole> non contengono solo delle semplici parole in italiano,
potreste ottenere dei falsi positivi. Infatti, C<.> riconosce anche la punteggiatura,
la spaziatura e i numeri. Siate specifici! Il metacarattere C<\w> rappresenta tutti
i caratteri alfanumerici (L<unicode>) e il carattere di sottolineatura:

=begin programlisting

        next unless $parola =~ /rB<\w\w>a/;

=end programlisting

X<regex; C<\d>>
X<C<\d>; metacarattere di cifra nelle regex>

Il metacarattere C<\d> riconosce le cifre (sempre all'interno di Unicode):

=begin programlisting

    # un riconoscitore di numeri di carta di credito non molto robusto
    next unless $numero =~ /B<\d>{4}-B<\d>{4}-B<\d>{4}-B<\d>{4}/;
    say "Il tuo numero di carta di credito e`: $numero";

=end programlisting

X<regex; C<\s>>
X<C<\s>; metacarattere di spaziatura nelle regex>

Usate il metacarattere C<\s> per riconoscere la spaziatura, che si tratti di un semplice carattere di spazio, di un carattere di tabulazione,
di un carriage return, di un form-feed o di un a capo:

=begin programlisting

    my $due_parole_di_tre_lettere = qr/\w{3}B<\s>\w{3}/;

=end programlisting

X<regex; C<\B>>
X<regex; C<\D>>
X<regex; C<\S>>
X<regex; C<\W>>
X<C<\B>; metacarattere di non-limite di parola nelle regex>
X<C<\D>; metacarattere di non-cifra nelle regex>
X<C<\S>; metacarattere di non-spaziatura nelle regex>
X<C<\W>; metacarattere di non-alfanumerico nelle regex>

=begin tip Metacaratteri Negati

Questi metacaratteri hanno delle corrispondenti forme negate. Usate C<\W> per riconoscere qualunque carattere
I<eccetto> un carattere di parola. Usate C<\D> per riconoscere un carattere che non sia una cifra. Usate C<\S>
per riconoscere qualunque cosa tranne un carattere di spaziatura. Usate C<\B> per iniziare il match in qualunque posizione eccetto che
ai limiti di una parola.

=end tip

=head1 Classi di Caratteri

Z<character_classes>
X<classi di caratteri>
X<C<[]>; metacaratteri di classi di caratteri nelle regex>

Quando nessuno dei metacaratteri descritti sopra è sufficientemente specifico, potete definire la vostra
I<classe di caratteri> racchiudendoli tra parentesi quadre:

=begin programlisting

    my $vocali_ascii   = qr/B<[>aeiouB<]>/;
    my $forse_un_gatto = qr/g${vocali_ascii}tto/;

=end programlisting

=begin tip Attenzione all'Interpolazione

Senza l'uso delle parentesi graffe, il parser Perl interpreterebbe il nome di variabile come
C<$vocali_asciitto>, il che potrebbe causare un errore di compilazione relativo all'uso di una variabile
sconosciuta oppure interpolare il contenuto di una variabile esistente C<$vocali_asciitto> nella
regex.

=end tip

X<C<->; metacarattere di classe intervallo di caratteri nelle regex>

Il carattere trattino (C<->) vi permette di specificare una serie di caratteri contigui
in una classe, come in questa regex C<$solo_lettere_ascii>:

=begin programlisting

    my $solo_lettere_ascii = qr/[a-zA-Z]/;

=end programlisting

Per includere il trattino in una classe, posizionatelo all'inizio o alla fine:

=begin programlisting

    my $punteggiatura_utile = qr/[-!?]/;

=end programlisting

... o fatene l'escape:

=begin programlisting

    my $caratteri_con_lineette = qr/[|=\-_]/;

=end programlisting

X<C<^>; metacarattere di negazione di classe di caratteri nelle regex>

Usate l'accento circonflesso (C<^>) come primo elemento di una classe di caratteri per specificare
"qualunque cosa I<eccetto> questi caratteri":

=begin programlisting

    my $non_una_vocale_ascii = qr/[^aeiou]/;

=end programlisting

=begin tip Metacaratteri nelle Classi di Caratteri

Usate un accento circonflesso in qualunque posizione eccetto la prima per includerlo in una
classe di caratteri. Per includere un trattino in una classe di caratteri negata, posizionatelo subito dopo
l'accento circonflesso o alla fine, o fatene l'escape.

=end tip

=head1 Cattura

Z<regex_captures>

Le espressioni regolari vi permettono di raggruppare e catturare parti del match per
usarle in seguito. Per estrarre un numero telefonico americano nella forma C<(202)
456-1111> da una stringa:

=begin programlisting

    my $prefisso          = qr/\(\d{3}\)/;
    my $numero_locale     = qr/\d{3}-?\d{4}/;
    my $numero_telefonico = qr/$prefisso\s?$numero_locale/;

=end programlisting

Notate in particolare l'escape delle parentesi dentro al C<$prefisso>.
Le parentesi sono caratteri speciali nelle espressioni regolari di Perl 5. Esse raggruppano degli atomi in
unità più grandi e servono anche a catturare delle porzioni della stringa con cui si fa il match. Per riconoscere le parentesi
in modo letterale, fatene l'escape con il backslash come è stato fatto in C<$prefisso>.

=head2 Catture con Nome

Z<named_captures>
X<regex; catture>
X<regex; catture con nome>
X<<< C<< (?<>) >>; catture con nome nelle regex >>>

Perl 5.10 ha introdotto le I<catture con nome>, che vi permettono di catturare porzioni di
match durante l'applicazione di un'espressione regolare e accedervi in seguito; ad esempio,
potete catturare un numero telefonico in una stringa contenente informazioni su un vostro contatto:

=begin programlisting

    if ($info_contatto =~ /(?<tel>$numero_telefonico)/)
    {
        say "Ho trovato un numero telefonico $+{tel}";
    }

=end programlisting

Le regex possono sembrare un'accozzaglia di segni di punteggiatura se non ne raggruppate le diverse parti
in pezzi separati. La sintassi delle catture con nome è la seguente:

=begin programlisting

    (?<nome cattura> ... )

=end programlisting

X<C<%+>>
X<predefinite; variabili globali; C<%+>>

Le parentesi tonde racchiudono la cattura. Il costrutto C<< ?< nome > >>, che segue
immediatamente la parentesi aperta, assegna un nome alla cattura. Il
resto della cattura è un'espressione regolare. 

Quando il match di un pattern contenente la cattura
ha successo, Perl memorizza la parte di stringa che corrisponde
al pattern interno alla cattura nella variabile globale predefinita C<%+>. In tale hash, la chiave è
il nome della cattura e il valore è la rispettiva porzione di stringa.

=head2 Catture Numerate

X<regex; catture numerate>
X<regex; catture>

Perl supporta le I<catture numerate> dall'alba dei tempi:

=begin programlisting

    if ($info_contatto =~ /($numero_telefonico)/)
    {
        say "Ho trovato un numero telefonico $1";
    }

=end programlisting

X<regex; C<$1>>
X<regex; C<$2>>
X<C<$1>; metacarattere di regex>
X<C<$2>; metacarattere di regex>

Questa forma di catture non fornisce un nome identificativo e non usa C<%+> per la memorizzazione.
Invece, le sottostringhe catturate vengono memorizzate da Perl in una serie di variabili globali predefinite.
La parte di match della I<prima> cattura trovata finisce in C<$1>, la seconda in
C<$2> e così via. Il conteggio del numero di una cattura avviene quando si incontra la sua parentesi I<aperta>;
quindi dopo la prima parentesi aperta inizia la memorizzazione in C<$1>, dopo la
seconda in C<$2> e così via.

Anche se la sintassi per le catture con nome è più verbosa di quella per le catture numerate, in
genere risulta più chiara. Contare le parentesi aperte è un lavoro noioso e la complessità di
combinare diverse regex ognuna delle quali contiene delle catture numerate diventa proibitiva.
Le catture con nome aumentano il grado di manutenibilità delle regex--sebbene ci possano essere
collisioni di nome, esse sono relativamente rare. Per minimizzare i rischi,
usate le catture con nome solo nelle regex più esterne.

In contesto lista, il match di una regex restituisce una lista di sottostringhe
catturate:

=begin programlisting

    if (my ($numero) = $info_contatto =~ /($numero_telefonico)/)
    {
        say "Ho trovato un numero telefonico $numero";
    }

=end programlisting

Le catture numerate sono utili anche per semplici sostituzioni in cui le catture con nome
risulterebbero troppo verbose:

=begin programlisting

    my $ordine = 'Pasta per vegani!';

    $ordine =~ s/(\w+) per vegani/$1 per vegetariani/;
    # oppure
    $ordine =~ s/(?<cibo>\w+) per vegani/$+{cibo} per vegetariani/;

=end programlisting

=head1 Raggruppamento e Alternativa

In tutti gli esempi precedenti i quantificatori erano applicati a semplici atomi. In realtà è possibile
applicarli a qualunque elemento di una regex:

=begin programlisting

    my $maiale  = qr/maiale/;
    my $fagioli = qr/fagioli/;

    like( 'maiale con fagioli', qr/\A$maiale?.*?$fagioli/,
         'forse maiale, sicuramente fagioli' );

=end programlisting

Se espandete manualmente la regex, il risultato potrebbe sorprendervi:

=begin programlisting

    my $maiale_e_fagioli = qr/\Amaiale?.*fagioli/;

    like( 'maiale con fagioli', qr/$maiale_e_fagioli/,
        'forse maiale, sicuramente fagioli' );
    like( 'mai fagioli', qr/$maiale_e_fagioli/,
         'un momento... non c'e` il fillochinone!' );

=end programlisting

A volte essere specifici migliora l'accuratezza dei pattern:

=begin programlisting

    my $maiale  = qr/maiale/;
    my $con     = qr/con/;
    my $fagioli = qr/fagioli/;

    like( 'maiale con fagioli', qr/\A$maiale? $con? $fagioli/,
        'forse maiale, forse con, sicuramente fagioli' );

=end programlisting

X<regex; alternativa>
X<C<|>; metacarattere di alternativa nelle regex>

Alcune regex devono riconoscere una cosa oppure un'altra. Il metacarattere da usare in questi casi
è quello di I<alternativa> (C<|>):

=begin programlisting

    my $riso    = qr/riso/;
    my $fagioli = qr/fagioli/;

    like( 'riso',    qr/$riso|$fagioli/, 'Ho trovato il riso'  );
    like( 'fagioli', qr/$riso|$fagioli/, 'Ho trovato i fagioli' );

=end programlisting

Il metacarattere di alternativa indica che il match deve essere fatto con l'uno o l'altro dei frammenti adiacenti.
Ricordate che l'alternativa ha una precedenza (L<precedence>)
minore delle sequenze di atomi:

=begin programlisting

    like(   'riso',    qr/riso|fagioli/, 'Ho trovato il riso'   );
    like(   'fagioli', qr/riso|fagioli/, 'Ho trovato i fagioli' );
    unlike( 'risf',    qr/riso|fagioli/, 'Ho trovato un ibrido' );

=end programlisting

Anche se viene naturale interpretare C<riso|fagioli> come la stringa C<ris>, seguita dal
carattere C<o> oppure C<f>, seguito da C<agioli>, le alternative includono sempre l'I<intero>
frammento fino al delimitatore di regex più vicino, che può essere l'inizio o la fine
del pattern, una parentesi di raggruppamento, un altro carattere di alternativa oppure
una parentesi quadra.

X<regex; C<()>>
X<C<()>; metacaratteri di cattura nelle regex>

Per ridurre la possibilità di confusione, usate delle variabili per dare dei nomi ai frammenti (C<$riso|$fagioli>) oppure
raggruppate le possibili alternative in I<gruppi non-catturanti>:

=begin programlisting

    my $contiene_amido = qr/(?:pasta|patate|riso)/;

=end programlisting

X<C<(?:)>; raggruppamento non-catturante nelle regex>

La sequenza C<(?:)> raggruppa una serie di atomi senza definire una cattura.

=begin tip Non Catturata Per Proteggere Voi

Una espressione regolare convertita in stringa viene automaticamente racchiusa in un raggruppamento non-catturante;
C<qr/riso|fagioli/> diventa la stringa C<(?:riso|fagioli)>.

=end tip

=head1 Altre Sequenze di Escape

X<C<\>; metacarattere di escape nelle regex>
X<escaping>
X<regex; metacaratteri di escape>

Per fare il match I<letterale> di un metacarattere, fatene l'I<escape> con un
backslash (C<\>). L'avete visto fare negli esempi sopra, dove C<\(> si riferiva a una parentesi tonda
aperta e C<\]> si riferiva a una parentesi quadra chiusa. C<\.> si riferisce al
carattere letterale punto anziché all'atomo "fai il match con qualunque cosa eccetto un carattere
di a capo esplicito".

È probabile che vi succeda di dover fare l'escape del metacarattere di alternativa (C<|>), del metacarattere di fine linea (C<$>) e dei quantificatori (C<+>, C<?>, C<*>).

X<C<\Q>; metacarattere di disattivazione dei metacaratteri nelle regex>
X<C<\E>; metacarattere di riattivazione dei metacaratteri nelle regex>
X<regex; disattivazione dei metacaratteri>

I I<caratteri di disattivazione dei metacaratteri> (C<\Q> e C<\E>) disattivano
l'interpretazione dei metacaratteri nella parte di regex che si trova tra di essi. Possono essere particolarmente utili
quando ricevete l'espressione regolare da una sorgente sulla quale avete il controllo quando scrivete
il programma:

=begin programlisting

    my ($testo, $testo_letterale) = @_;

    return $testo =~ /\Q$testo_letterale\E/;

=end programlisting

Il parametro C<$testo_letterale> potrebbe contenere qualunque cosa--per esempio la stringa
C<** ALLARME **>. Nel frammento delimitato da C<\Q> e C<\E>, Perl interpreta la
regex come C<\*\* ALLARME \*\*> e quindi tenta di riconoscere letteralmente dei caratteri asterisco,
anziché applicare dei quantificatori greedy.

=begin tip Sicurezza Delle Regex

Siate prudenti quando elaborate delle espressioni regolari provenienti da dell'input utente non attendibile. Un
esperto di regex malintenzionato potrebbe provocare un attacco di denial-of-service contro il vostro
programma.

=end tip

=head1 Asserzioni

X<regex; asserzioni>

Le ancore di regex come C<\A>, C<\b>, C<\B> e C<\Z> sono una forma di I<asserzione
 di regex> che richiede alla stringa di soddisfare certe condizioni. Queste
asserzioni non fanno il match di singoli caratteri della stringa. Indipendentemente dal
contenuto della stringa, il match della regex C<qr/\A/> avrà I<sempre> successo.

X<regex; asserzione di lunghezza zero>

Le I<asserzioni di lunghezza zero> fanno il match di un I<pattern>. La loro peculiarità è che non
consumano la porzione della stringa che riconoscono. Per esempio, se vi serve trovare un'auto
e nulla di più, potete usare un'asserzione di limite di parola:

=begin programlisting

    my $auto_solitaria = qr/auto\b/;

=end programlisting

X<regex; asserzione di lunghezza zero con negazione in avanti>
X<C<(?!...)>; asserzione di lunghezza zero con negazione in avanti nelle regex>

... ma se volete trovare un'auto senza avere problemi con la polizia, potreste usare
un'I<asserzione di lunghezza zero con negazione in avanti>:

=begin programlisting

    my $auto_sicura = qr/auto(?!velox)/;

=end programlisting

Il costrutto C<(?!...)> riconosce la stringa C<auto> solo se non è seguita
immediatamente dalla stringa C<velox>.

X<regex; asserzione di lunghezza zero in avanti>
X<C<(?=...)>; asserzione di lunghezza zero in avanti nelle regex>

L'I<asserzione di lunghezza zero in avanti>:

=begin programlisting

    my $auto_problematica = qr/auto(?=velox)/;

=end programlisting

... riconosce la stringa C<auto> solo se è seguita immediatamente dalla stringa
C<velox>. Sebbene una normale espressione regolare possa ottenere lo stesso risultato,
considerate una regex per trovare tutte le parole del dizionario che iniziano con C<auto> e
vi evitano guai con la polizia:

=begin programlisting

    my $auto_sicura = qr/auto(?!velox)/;

    while (<$parole>)
    {
        chomp;
        next unless /\A(?<auto>$auto_sicura.*)\Z/;
        say "Trovata un'auto sicura '$+{auto}'";
    }

=end programlisting

L'asserzione di lunghezza zero non consuma alcun carattere della stringa in esame, lasciando
tutto il match al frammento ancorato <.*\Z>. Altrimenti, la parte catturata consisterebbe solo
nella porzione C<auto> della stringa in esame.

X<C<(?<!...)>; asserzione di lunghezza zero con negazione all'indietro nelle regex>
X<C<(?<=...)>; asserzione di lunghezza zero all'indietro nelle regex>
X<regex; asserzione di lunghezza zero all'indietro>
X<regex; asserzione di lunghezza zero con negazione all'indietro>

Per asserire che la vostra auto non occorre all'inizio di una linea, potete usare
l'I<asserzione di lunghezza zero con negazione all'indietro>. Le asserzioni di questo tipo devono avere
lunghezza prefissata; quindi, non potete usare dei quantificatori:

=begin programlisting

    my $auto_media = qr/(?<!\A)auto/;

=end programlisting

Il costrutto C< (?E<lt>!...) > contiene un pattern di lunghezza fissa. Potete anche
richiedere che l'C<auto> si trovi sempre dopo un carattere di spazio
con un'I<asserzione di lunghezza zero all'indietro>:

=begin programlisting

    my $auto_spaziale = qr/(?<=\s)auto/;

=end programlisting

Il costrutto C<< (?<=...) >> contiene un pattern di lunghezza fissa. Questo approccio
può esservi utile quando combinate un match globale di regex con il modificatore C<\G>, ma
è improbabile che vi troviate spesso ad usare questa funzionalità avanzata.

X<C<\K>; asserzione di keep nelle regex>
X<regex; asserzione di keep>

Una nuova funzionalità delle regex di Perl 5 è l'asserzione I<keep> C<\K>. Questa
asserzione di lunghezza zero all'indietro I<può> essere associata a un pattern di lunghezza variabile:

=begin programlisting

    my $auto_spaziale = qr/\s+\Kauto/;

    like( 'la mia auto e` andata nello spazio', $auto_spaziale );
    like( 'la  mia  auto  e`  andata  nello  spazio  doppio',
         $auto_spaziale );

=end programlisting

C<\K> è particolarmente utile per certe sostituzioni che rimuovono la parte finale
di un pattern:

=begin programlisting

    my $esclamazione = 'Ho visto l\'autovelox!';
    $esclamazione    =~ s/auto\K\w+!/./;

    like( $esclamazione, qr/\bauto\./,
                          "Forse non c'era da preoccuparsi tanto!" );

=end programlisting

=head1 Modificatori di Regex

X<regex; modificatori>
X<regex; modificatore C</i>>
X<C</i>; modificatore di regex di insensibilità tra maiuscole e minuscole>
X<regex; insensibilità tra maiuscole e minuscole>

Potete utilizzare svariati modificatori per cambiare il comportamento degli operatori delle espressioni regolari.
Tali modificatori compaiono alla fine degli operatori di match, di sostituzione e C<qr//>.
Per esempio, per attivare l'insensibilità tra maiuscole e minuscole in un match:

=begin programlisting

    my $fiore = 'CaMeLiA';

    like( $fiore, qr/Camelia/,  'Che bel fiore!'  );
    like( $fiore, qr/Camelia/i, 'tasto shift fuori uso' );

=end programlisting

Il primo C<like()> fallisce, perché le due stringhe contengono lettere diverse.
Invece il secondo C<like()> ha successo, perché il modificatore C</i> fa sì che la regex
ignori la distinzione tra maiuscole e minuscole. Nella seconda regex, C<M> e C<m> sono considerate equivalenti grazie
al modificatore.

X<regex; modificatori incorporati>

Potete anche incorporare i modificatori di regex in un pattern:

=begin programlisting

    my $trova_un_gatto = qr/(?<felino>(?i)gatto)/;

=end programlisting

La sintassi C<(?i)> attiva l'insensibilità tra maiuscole e minuscole solo nel raggruppamento in
cui è racchiuso: in questo caso, una cattura con nome. Potete attivare diversi modificatori in
questo modo. Per disattivare degli specifici modificatori fateli precedere dal carattere
trattino (C<->):

=begin programlisting

    my $trova_un_razionale = qr/(?<numero>(?-i)Raz)/;

=end programlisting

X<C</m>; modificatore di regex di multilinea>
X<regex; modificatore C</m>>
X<regex; multilinea>
X<C<\A>; metacarattere di inizio linea nelle regex>
X<C<\Z>; metacarattere di fine linea nelle regex>

Il modificatore di multilinea, C</m>, permette alle ancore C<\A> e C<\Z> di fare un match ad ogni occorrenza
del carattere di a capo contenuta nella stringa.

X<C</s>; modificatore di regex di linea singola>
X<regex; modificatore C</s>>
X<regex; linea singola>

Il modificatore C</s> tratta la stringa in esame come un'unica linea, quindi il metacarattere C<.>
riconosce anche il carattere di a capo. Damian Conway suggerisce un espediente
mnemonico per cui C</m> modifica il comportamento di I<molti> metacaratteri nella regex,
mentre C</s> modifica il comportamento di un I<singolo> metacarattere.

X<C</r>; modificatore di sostituzione non-distruttiva>
X<regex; modificatore C</r>>
X<regex; sostituzione non-distruttiva>

Il modificatore C</r> fa sì che un'operazione di sostituzione restituisca il risultato della
sostituzione, lasciando inalterata la stringa originale. Se la sostituzione ha successo,
il risultato è una copia modificata dell'originale. Se la sostituzione fallisce
(perché il pattern non viene riconosciuto), il risultato è una copia identica
all'originale:

=begin programlisting

    my $stato      = 'Sono affamato di crostata.';
    my $nuovostato = $stato =~ s/crostata/torta/r;
    my $statocopia = $stato
                   =~ s/fegato e cipolle/wurstel/r;

    is( $stato, 'Sono affamato di crostata.',
        'la stringa originale dovrebbe essere inalterata' );

    like( $nuovostato,   qr/torta/,   'voglio la torta'  );
    unlike( $statocopia, qr/wurstel/, 'niente insaccati' );

=end programlisting

X<C</x>; modificatore di regex di incremento di leggibilità>
X<regex; modificatore C</x>>
X<regex; incremento di leggibilità>

Il modificatore C</x> vi permette di inserire spaziatura e commenti aggiuntivi nei
pattern. Quando questo modificatore è attivo, il motore di regex ignora
la spaziatura e i commenti. Spesso la regex risultante è molto più leggibile:

=begin programlisting

    my $regex_attrib = qr{
        \A                    # inizio linea

        (?:
          [;\n\s]*            # spaziatura e punto e virgola
          (?:/\*.*?\*/)?      # commenti C
        )*

        ATTR

        \s+
        (   U?INTVAL
          | FLOATVAL
          | STRING\s+\*
        )
    }x;

=end programlisting

Questa regex non è per nulla I<semplice>, ma i commenti e la spaziatura migliorano la sua
leggibilità. Anche se componete una regex da frammenti precompilati, il
modificatore C</x> può comunque migliorare il vosto codice.

X<C</g>; modificatore di regex di match globale>
X<regex; match globale>
X<regex; modificatore C</g>>

Il modificatore C</g> fa il match di una regex globalmente nell'intera stringa. Il suo uso
ha senso nelle sostituzioni:

=begin programlisting

    # un po' di pace in Via col Vento
    my $contenuto = slurp( $file );
    $contenuto    =~ s/Rossella O'Hara/Camomilla Calmante/g;

=end programlisting

X<C<\G>; metacarattere di regex di ancora di match globale>
X<regex; C<\G>>
X<regex; ancora di match globale>

Quando è usato con un match--e non una sostituzione--il metacarattere C<\G> vi permette
di elaborare una stringa un pezzo alla volta all'interno di un ciclo. Il match di C<\G> ha successo
alla posizione dove è terminato il match precedente più recente. Per memorizzare in modo ordinato
i numeri telefonici americani contenuti in un file poco strutturato, potreste scrivere:

=begin programlisting

    while ($contenuto =~ /\G(\w{3})(\w{3})(\w{4})/g)
    {
        push @numeri, "($1) $2-$3";
    }

=end programlisting

Ricordate che l'ancora C<\G> riprende all'ultima posizione della stringa
riconosciuta dal match dell'iterazione precedente. Se il match precedente terminava con
un quantificatore greedy come C<.*>, il match successivo avrà a disposizione una parte più ridotta
di stringa. Anche le asserzioni in avanti possono esservi utili.

X<C</e>; modificatore di regex di valutazione di sostituzione>
X<regex; modificatore C</e>>
X<regex; valutazione di sostituzione>

Il modificatore C</e> vi permette di scrivere codice Perl 5 arbitrario nella parte destra
di un'operazione di sostituzione. Se il match ha successo, il motore di regex esegue
il codice e usa il valore restituito come valore per la sostituzione. L'esempio di sostituzione
globale visto prima potrebbe essere reso più semplice con del codice come quello che segue:

=begin programlisting

    # un po' di pace in Via col Vento
    $sequel  =~ s{Rossella( O'Hara)?}
                 {
                    'Camomilla' . defined $1
                                ? ' Calmante'
                                : ''
                 }ge;

=end programlisting

Ogni occorrenza aggiuntiva del modificatore C</e> provoca un'altra valutazione
del risultato dell'espressione, ma solo gli appassionati di golf in Perl si spingono oltre l'uso di C</ee>.
