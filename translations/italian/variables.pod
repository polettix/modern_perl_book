=head1 Variabili

Z<variables>
X<variabile>

Una I<variabile> in Perl è un'area per la memorizzazione di un valore (L<values>). Mentre
un programma triviale può manipolare direttamente dei valori, quasi tutti i programmi usano le
variabili per semplificare la logica del codice. Una variabile reppresenta valori; è
più semplice spiegare il teorema di Pitagora in termini di variabili C<a>, C<b> e
 C<c> che dover intuire il suo principio da una lunga lista di valori
validi. Questo concetto potrà sembrarvi banale, ma per programmare in modo efficace dovete
padroneggiare l'arte di bilanciare tra il generico e riusabile e lo specifico.

=head2 Scope delle Variabili

Z<variable_scopes>

X<variabili; scope>
X<scope>
X<predefinite; parole chiave; C<package>>

Le variabili sono visibili alle diverse parti del vostro programma in base al loro scope
(L<scope>). Molte delle variabili che incontrerete hanno uno scope lessicale
(L<lexical_scope>). I I<file sorgente> forniscono uno scope lessicale, mentre
una dichiarazione di C<package> non crea di per sè un nuovo scope:

=begin programlisting

    package Negozio::Giocattoli;

    my $sconto = 0.10;

    package Negozio::Musica;

    # $sconto ancora visibile
    say "Il nostro sconto è attualmente $sconto!";

=end programlisting

X<predefinite; parole chiave; C<package>; BLOCCO>

A partire da Perl 5.14, potete associare un blocco a una dichiarazione C<package>. Questa
sintassi I<fornisce> effettivamente uno scope lessicale:

=begin programlisting

    package Negozio::Giocattoli
    {
        my $sconto = 0.10;
    }

    package Negozio::Musica
    {
        # $sconto non disponibile
    }

    package Negozio::GiochiDaTavolo;

    # $sconto sempre non disponibile

=end programlisting

=head2 Sigilli delle Variabili

Z<sigils>

X<variabili; sigilli>
X<sigilli>

Il sigillo della variabile in una dichiarazione determina il tipo della variabile:
scalare, array o hash. Il sigillo usato quando si accede alla variabile varia invece
in base a ciò che volete fare con la variabile. Per esempio, dichiarate un array con
C<@valori>. Accedete al suo primo elemento--un singolo valore--con
C<$valori[0]>. E accedete a una lista di valori dentro l'array con C<@valori[ @indici ]>.

=head2 Variabili Anonime

X<variabili anonime>
X<variabili; anonime>

In Perl non è I<richiesto> che le variabili abbiano un nome. I nomi servono ad aiutare voi, i
programmatori, a tener traccia di una C<$mela>, delle C<@scatole> o dei C<%ristoranti_economici>.
Le variabili create I<senza> un nome dal vostro codice sorgente sono dette variabili I<anonime>.
L'unico modo per accedere a una variabile anonima è per riferimento
(L<references>).

=head2 Variabili, Tipi e Coercizione

X<variabili; tipi>
X<variabili; tipo contenitore>
X<variabili; tipo valore>

Una variabile in Perl 5 rappresenta sia un valore (un costo in euro, dei tipi di pizza
disponibili, dei negozi di chitarre con i loro numeri di telefono) che il contenitore che memorizza tale
valore. Il sistema dei tipi di Perl gestisce sia i I<tipi valore> che i I<tipi contenitore>.
Mentre il I<tipo contenitore> di una variabile--scalare, array o hash--non può cambiare,
Perl è flessibile riguardo al tipo valore. Potete memorizzare una stringa in una
variabile in una data linea di codice, assegnare un numero alla stessa variabile nella linea successiva e
quindi riassegnarle il riferimento a una funzione (L<function_references>).

Eseguire su una variabile una operazione che impone uno specifico tipo valore può
dar luogo a una coercizione (L<coercion>) dal precedente tipo valore della variabile stessa.

Per esempio, il modo ufficialmente documentato di determinare il numero di elementi in un array
è di valutare l'array in contesto scalare (L<context_philosophy>). Dato che una
variabile scalare può sempre e solo contenere uno scalare, assegnare un array a uno scalare
impone il contesto scalare all'operazione, e un array valutato in contesto scalare
restituisce il numero di elementi nell'array:

=begin programlisting

    my $conteggio = @elementi;

=end programlisting

Queste relazioni tra tipi delle variabili, sigilli e contesto sono di importanza fondamentale.
