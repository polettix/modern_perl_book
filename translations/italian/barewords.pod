=head1 Bareword

Z<barewords>

Perl è un linguaggio malleabile. Potete scrivere programmi nei modi più creativi,
manutenibili, criptici e bizzarri che preferite. I buoni programmatori si preoccupano
della manutenibilità, ma Perl non ha la presunzione di sapere che cos'è la manutenibilità
secondo il I<vostro> punto di vista.

X<bareword>
X<direttiva C<strict>>
X<direttive; C<strict>>

Il parser Perl riconosce le istruzioni native e gli operatori. Usa i  sigilli per
identificare le variabili e altri simboli di punteggiatura per riconoscere chiamate a funzioni e
metodi.  Tuttavia, qualche volta il parser deve cercare di indovinare le vostre intenzioni, specialmente quando
usate una I<bareword>--un identificatore senza sigilli o altra punteggiatura sintatticamente
significativa.

=head2 Usi Appropriati delle Bareword

X<bareword; pro>

Sebbene la direttiva C<strict> (L<pragmas>) sia rigida nel proibire l'uso di bareword ambigue,
accetta invece alcuni usi delle bareword.

=head3 Bareword come chiavi di hash

X<hash; bareword come chiavi>
X<C<+>; operatore unario>

Le chiavi di hash in Perl 5 sono generalmente I<non> ambigue poiché il parser le
può identificare come stringhe; in C<$giochi{flipper}>, C<flipper> è ovviamente una
stringa.

Occasionalmente, questa interpretazione non è ciò che desiderate, specialmente quando
intendete I<valutare> una funzione nativa o definita da voi per produrre la chiave di hash. In tal
caso, potete disambiguare fornendo degli argomenti, usando le parentesi degli argomenti di funzione
oppure anteponendo un operatore più unario per forzare la valutazione della funzione nativa:

=begin programlisting

    # la chiave e` il letterale 'shift'
    my $valore = $elementi{B<shift>};

    # la chiave e` il valore prodotto da shift
    my $valore = $elementi{B<shift @_>}

    # il + unario usa la funzione nativa shift
    my $valore = $elementi{B<+>shift};

=end programlisting

=head3 Bareword come nomi di package

X<package; bareword come nomi>

Anche i nomi di package in Perl 5 sono delle bareword. Se vi attenete alla convenzione
per cui i nomi di package hanno iniziali maiuscole e le funzioni no, vi imbatterete raramente
in collisioni di nomi, ma il parser di Perl 5 deve decidere come parsificare
C<< Package->metodo() >>. Significa "chiama una funzione di nome C<Package()> e
poi chiama C<metodo()> sul suo valore di ritorno"? oppure significa "Chiama un metodo di nome
C<metodo()> nel namespace C<Package>"?. La risposta cambia a seconda del codice
che il parser ha già incontrato nel namespace corrente.

Potete forzare il parser a trattare C<Package> come un nome di package appendendo il separatore di
package (C<::>)N<Anche tra le persone che capiscono perchè questo funziona, pochissime
lo usano.>:

=begin programlisting

    # probabilmente e` un metodo di classe
    Package->metodo();

    # sicuramente e` un metodo di classe
    Package::->metodo();

=end programlisting

=head3 Bareword come nomi di blocchi di codice

X<C<BEGIN>>
X<C<DESTROY>>
X<C<AUTOLOAD>>
X<C<INIT>>
X<C<UNITCHECK>>
X<C<CHECK>>
X<C<END>>

I blocchi di codice con i nomi speciali C<AUTOLOAD>, C<BEGIN>, C<CHECK>, C<DESTROY>,
C<END>, C<INIT> e C<UNITCHECK> sono bareword che I<dichiarano> delle funzioni
senza usare l'istruzione nativa C<sub>. Li avete già incontrati in questo libro (L<code_generation>):

=begin programlisting

    package Scimmia::Maggiordomo;

    BEGIN { inizializza_scimmie( __PACKAGE__ ) }

    sub AUTOLOAD { ... }

=end programlisting

Anche se I<potete> omettere C<sub> nelle dichiarazioni di C<AUTOLOAD()>, poche persone lo fanno.

=head3 Bareword come costanti

X<costanti; bareword>

Le costanti dichiarate con la direttiva C<constant> si usano come bareword:

=begin programlisting

    # non usatelo per una vera autenticazione
    use constant NAME     => 'Bob';
    use constant PASSWORD => '|38pesce!lesso74|';

    return unless $nome eq NAME && $pass eq PASSWORD;

=end programlisting

Notate che queste costanti I<non> vengono interpolate in una stringa con doppia quotatura.

X<prototipi; bareword>

Le costanti sono un caso speciale di funzioni prototipate (L<prototypes>). Quando
predichiarate una funzione con un prototipo, il parser sa come deve trattare tale
funzione e vi avverte in caso ci siano ambiguità di parsificazione. Tutti i problemi dei
prototipi si applicano anche alle costanti.

=head2 Usi Inappropriati delle Bareword

X<bareword; contro>

Indipendentemente da quanta cura mettete nel programmare, le bareword producono codice ambiguo. Nella maggior
parte dei casi potete evitare di usarle, ma incontrerete svariati tipi di bareword nel
codice preesistente.

=head3 Bareword nelle chiamate di funzione

X<bareword; chiamate di funzione>
X<C<B::Deparse>>

Il code scritto senza usare C<strict 'subs'> può usare delle bareword come nomi di funzione. Aggiungere
delle parentesi fa sì che il codice soddisfi le restrizioni.  Usate C<perl -MO=Deparse,-p> (vedete
C<perldoc B::Deparse>) per scoprire come Perl le parsifica, e quindi aggiungete le parentesi
appropriate.

=head3 Bareword come valori di hash

X<bareword; valori di hash>

Alcuni pezzi di codice poco recente non si preoccupavano di quotare i I<valori> nelle coppie degli hash:

=begin programlisting

    # pessimo stile; da evitare
    my %genitori =
    (
        madre => Anna,
        padre => Flavio,
    );

=end programlisting

Quando non esistono nè la funzione C<Flavio()> nè la funzione C<Anna()>, Perl interpreta
queste bareword come stringhe. C<strict 'subs'>, in questo caso, genera invece un errore.

=head3 Bareword come filehandle

X<bareword; filehandle>

Prima dell'introduzione dei filehandle lessicali (L<lexical_filehandles>), tutti gli handle di file e di directory
erano delle bareword. Potete quasi sempre riscrivere questo codice senza problemi in modo che usi dei
filehandle lessicali. Fanno eccezione C<STDIN>, C<STDOUT> e C<STDERR>,
ma fortunatamente il parser di Perl è in grado di riconoscerli.

=head3 Bareword come funzioni per sort

X<bareword; funzioni per sort>
X<C<sort>>
X<predefinite; funzioni; C<sort>>

Infine, la funzione nativa C<sort> può ricevere come secondo argomento il I<nome> di una
funzione da usare per l'ordinamento. Anche se raramente questo nome risulta ambiguo per il parser, esso può
invece confondere le I<persone> che leggono il codice. L'alternativa di fornire un riferimento a funzione in uno scalare è solo un poco migliore:

=begin programlisting

    # stile che usa bareword
    my @ordinato = sort confronta_lunghezze @nonordinato;

    # riferimento a funzione in scalare
    my $confronto = \&confronta_lunghezze;
    my @ordinato  = sort $confronto @nonordinato;

=end programlisting

La seconda opzione evita l'uso di bareword, ma il codice risultante ha una linea
in più. Purtropppo, il parser di Perl 5 I<non> accetta la versione con una sola
linea a causa delle speciali regole di parsing di C<sort>; non potete usare espressioni
arbitrarie (come ottenere un riferimento a una funzione con nome) dove il parser si attende un blocco oppure uno
scalare.

=begin programlisting

    # non funziona
    my @ordinato = sort \&confronta_lunghezze @nonordinato;

=end programlisting

In entrambi i casi, il modo in cui C<sort> invoca la funzione e le passa gli argomenti può essere
poco chiaro (vedete C<perldoc -f sort> per i dettagli). Dove possibile, prendete invece in
considerazione l'uso della forma a blocco di C<sort>. Se dovete usare una delle forme con funzione,
ricordate di aggiungere un commento esplicativo.
