=head1 Attributi

Z<attributes>

Le entità Perl con un nome--variabili e funzioni--possono essere associate a dei metadati aggiuntivi
in forma di I<attributi>. Gli attributi sono nomi e valori
arbitrari usati da determinati tipi di metaprogrammazione (L<code_generation>).

La sintassi per la dichiarazione degli attributi è poco elegante e usare gli attributi in modo efficace è
più un'arte che una scienza. La maggior parte dei programmi evita di utilizzarli, ma quando sono usati bene
essi possono offrire vantaggi in termini di chiarezza e manutenibilità.

=head2 Uso degli Attributi

Un attributo semplice è un identificatore preceduto dal carattere due punti e associato a una dichiarazione:

=begin programlisting

    my $fortezza         B<:nascosto>;

    sub eruzione_vulcano B<:ProgettoScientifico> { ... }

=end programlisting

Queste dichiarazioni causano l'invocazione degli handler di attributi di nome
C<nascosto> e C<ScienceProject>, se esistono per il tipo appropriato
(rispettivamente, scalare e funzione). Tali handler possono fare I<qualunque cosa>.  Se
non esistono degli handler appropriati, Perl solleva un'eccezione durante la
compilazione.

X<CPAN; C<Test::Class>>

Gli attributi possono specificare una lista di parametri. Perl tratta tali parametri come
liste composte da sole stringhe costanti. Il modulo CPAN C<Test::Class> fa un buon uso
degli attributi parametrici:

=begin programlisting

    sub configura_test            :Test(setup)    { ... }
    sub creazione_test_automatico :Test(10)       { ... }
    sub termina_test              :Test(teardown) { ... }

=end programlisting

L'attributo C<Test> identifica i metodi che contengono asserzioni di test e
specifica opzionalmente il numero di asserzioni che tali metodi intendono eseguire.
Anche se l'introspezione (L<reflection>) di queste classi, guidata da buone euristiche,
potrebbe identificare appropriatamente i metodi di test, l'attributo C<:Test>
rende più chiare le vostre intenzioni.

I parametri C<setup> e C<teardown> permettono alle classi di test di definire i propri
metodi di supporto senza preoccuparsi dei conflitti con metodi analoghi in
altre classi. In questo modo si separa il problema di specificare ciò che una classe deve 
fare da come funzionano altre classi, e in questo modo si offre molta
flessibilità al programmatore.

=begin tip Attributi in Pratica

X<Catalyst>

Anche il framework web Catalyst usa gli attributi per determinare la visibilità e il comportamento di alcuni metodi all'interno di applicazioni web.

=end tip

=head2 Svantaggi degli Attributi

X<direttive; C<attributes>>
X<direttiva C<attributes>>
X<CPAN; C<Attribute::Handlers>>
X<CPAN; C<Attribute::Lexical>>

Gli attributi hanno anche degli svantaggi. La direttiva canonica per usare gli attributi, C<attributes>,
 ha catalogato la propria interfaccia come sperimentale per molti anni. Il modulo C<Attribute::Handlers> di Damian Conways integrato nella
distribuzione semplifica la loro implementazione. C<Attribute::Lexical> di Andrew Main è un approccio più recente.
Ovunque sia possibile usarli, entrambi sono preferibili a C<attributes>.

X<CPAN; C<Memoize>>

La peggiore caratteristica degli attributi è la loro propensione a produrre strani effetti sintattici
a distanza. Dato un frammento di codice con attributi, come potete prevedere i loro
effetti? Una buona documentazione può essere d'aiuto, ma se la dichiarazione apparentemente innocente di
una variabile lessicale memorizza da qualche parte un riferimento a tale variabile,
le vostre attese sul suo tempo di vita potrebbero rivelarsi sbagliate. Analogamente, un handler
potrebbe racchiudere a vostra insaputa una funzione in un'altra funzione e sostituirla nella
tabella dei simboli--pensate a un attributo C<:memoize> che invochi automaticamente
il modulo C<Memoize> integrato nella distribuzione.

Gli attributi sono a vostra disposizione per risolvere alcuni problemi ostici. Possono
essere molto utili, se usati in modo appropriato--ma la maggior parte dei programmi non ne ha bisogno.
