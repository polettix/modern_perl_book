Z<style>

=head1 Scrivere Codice Perl Manutenibile

X<manutenibilità>

La I<manutenibilità> è il nebuloso concetto che misura la facilità di comprendere e
modificare un programma scritto in precedenza. Mettete via un pezzo di codice per sei mesi, e poi tornate
a guardarlo. La manutenibilità misura le difficoltà che dovete affrontare per modificarlo.

La manutenibilità non è né un problema sintattico né una misura di come il vostro codice
appare a un non-programmatore. Potete assumere che chi ha a che fare con il codice sia un programmatore competente
che ha una buona comprensione della natura del problema che il codice deve risolvere. Quali ostacoli 
si possono incontrare quando si tenta di risolvere un bug o di fare una miglioria in modo corretto?

La capacità di scrivere codice manutenibile deriva da esperienza guadagnata sul campo con fatica e
dalla padronanza degli idiomi, delle tecniche e dello stile dominante del linguaggio. Ciò nonostante,
anche i principianti possono migliorare la manutenibilità del loro codice osservando alcuni principi:

=over 4

=item * I<Eliminate le duplicazioni>. I bug si annidano nei pezzi di codice ripetuti in modo simile in
più di una parte di programma--quando risolvete un bug in una di tali parti, vi ricordate di risolverlo anche nelle altre? Quando
aggiornate una parte di codice, aggiornate anche le altre?

I sistemi ben progettati hanno poche duplicazioni. Utilizzano funzioni, moduli,
oggetti e ruoli per isolare il codice duplicato in componenti riusabili che
modellano in modo accurato il dominio del problema. I migliori progetti vi permettono di aggiungere
funzionalità I<rimuovendo> del codice.

=item * I<Scegliete con cura i nomi delle entità>. Il vostro codice racconta una storia. Ogni simbolo con un
nome--variabili, funzioni, modelli, classi--vi dà l'opportunità di chiarire o
di nascondere le vostre intenzioni. La facilità con cui scegliete i nomi rivela il vostro livello di comprensione del
problema e del vostro progetto. Scegliete i nomi con cura.

=item * I<Evitate di essere troppo intelligenti>. Il codice conciso è utile quando aiuta a chiarire
le intenzioni del programmatore. Invece, il codice troppo intelligente nasconde le vostre intenzioni dietro a giochi di prestigio.
Perl vi permette di scrivere il codice giusto nel momento giusto. Quando è possibile,
scegliete la soluzione più ovvia. Fatevi guidare dall'esperienza, dal senso estetico e dalla consapevolezza
di ciò che conta davvero.

Alcuni problemi richiedono soluzioni particolarmente intelligenti. Incapsulate questo codice dietro a semplici
interfacce e documentate bene i vostri colpi di genio.

=item * I<Sposate la semplicità>. A parità di condizioni, un programma più semplice è
più facile da manutenere di una sua controparte più complessa. Semplicità significa sapere
che cosa è importante e perseguirlo senza deviazioni.

La semplicità non è una scusa per evitare il controllo degli errori o la modularità o la validazione o
la sicurezza. Il codice semplice può usare funzionalità avanzate e moduli CPAN
in abbondanza; può anche richiedere un certo impegno per essere capito. Ciò che conta è
che risolve efficacemente i problemi senza sforzi inutili.

Certe volte vi serve codice robusto e potente. Altre volte ciò di cui avete bisogno è un programma lungo una linea.
Semplicità significa conoscere la differenza tra questi casi e ottenere il risultato desiderato.

=back

=head1 Scrivere in Perl Idiomatico

X<idiomi>

Perl prende a prestito liberamente da altri linguaggi e vi permette di scrivere il codice che volete.
I programmatori C scrivono spesso codice Perl in C-style, proprio come i programmatori Java
scrivono codice Perl in stile Java. I buoni programmatori Perl scrivono codice Perl in stile Perl, adottando
gli idiomi del linguaggio.

=over 4

=item * I<Fate vostre le conoscenze della comunità>. I programmatori Perl si impegnano spesso in
accesi dibattiti sulle diverse tecniche. Altrettanto spesso, condividono il proprio lavoro, non solo
su CPAN. Prestate loro attenzione e fatevi illuminare sui pro e contro
di principi e stili diversi.

Gli sviluppatori CPAN, i Perl Monger e i membri delle mailing list hanno esperienze
guadagnate sul campo nella soluzione di problemi in innumerevoli modi diversi. Parlategli. Leggete il loro codice. Fate
domande. Imparate da loro e lasciate che loro imparino da voi.

X<CPAN; C<Perl::Critic>>
X<CPAN; C<Perl::Tidy>>
X<CPAN; C<CPAN::Mini>>

=item * I<Seguite le regole della comunità>. La comunità Perl produce anzitutto strumenti. Tali strumenti
risolvono problemi generali, come l'analisi statica del codice (C<Perl::Critic>), la riformattazione
(C<Perl::Tidy>) e i sistemi privati di distribuzione (C<CPAN::Mini>). Sfruttate
l'infrastruttura CPAN; seguite il modello di scrittura, documentazione,
packaging, testing e distribuzione del codice di CPAN.

=item * I<Leggete del codice>. Iscrivetevi a una mailing list come Perl Beginners
(U<http://learn.perl.org/faq/beginners.html>), navigate sul sito PerlMonks
(U<http://perlmonks.org/>) e immergetevi in ogni modo nella
comunitàN<See U<http://www.perl.org/community.html>.>. Leggere del codice e tentare di
rispondere alle domande--anche se voi non ne ponete, costituisce una grande opportunità per
imparare.

=back

=head1 Scrivere Codice Perl Efficace

X<efficacia>

La manutenibilità è, in ultima analisi, un problema di progettazione. A sua volta, una buona capacità di progettazione
deriva dalla pratica di alcune buone abitudini:

=over 4

=item * I<Scrivete codice testabile>. La scrittura di una suite di test efficace esercita le stesse
capacità della scrittura di codice efficace. Il codice è sempre codice. Avere dei buoni test
accresce anche la vostra fiducia che un programma continui a funzionare dopo averlo modificato.

=item * I<Modularizzate>. Imponete delle barriere con l'incapsulamento e l'astrazione. Definite
le giuste interfacce tra i componenti. Scegliete con cura i nomi delle entità e collocatele nel
posto giusto. La modularità vi costringe a ragionare sulle astrazioni presenti nel vostro programma
e a comprendere come i diversi pezzi si combinano tra loro. Identificate i pezzi che si incastrano
a fatica. Continuate a raffinare il vostro codice finchè non vanno a posto.

=item * I<Seguite dei validi standard di codifica>. Ci sono linee guida efficaci per
la gestione degli errori, la sicurezza, l'incapsulamento, la progettazione delle API, la strutturazione dei progetti e altre
problematiche legate alla manutenibilità. Seguire le migliori linee guida aiuta i programmatori a comunicare
tra di loro attraverso il codice che scrivono. Il vostro lavoro è risolvere problemi; fatelo in modo chiaro.

=item * I<Avvantaggiatevi di CPAN>. I programmatori Perl affrontano problemi e condividono
le soluzioni trovate. Avvantaggiatevi di questo moltiplicatore delle vostre forze. Cercate sempre su CPAN
la soluzione, anche parziale, al vostro problema. Investite del tempo in queste ricerche;
ne sarete ricompensati.

Se trovate un bug, segnalatelo e, se possibile, risolvetelo. Se trovate un errore di battitura, correggetelo. Chiedete
nuove funzionalità. E ricordatevi di dire "Grazie!". Siamo meglio come comunità che come individui separati. E abbiamo
tutti più potenza ed efficacia se riusiamo il codice.

Quando avete risolto un nuovo problema e vi sentite pronti, condividetelo. Unitevi a noi. Anche noi risolviamo
problemi.

=back
