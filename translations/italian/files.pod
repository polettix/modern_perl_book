=head1 File

Z<files>

La maggior parte dei programmi interagisce in qualche modo con il mondo reale e, in particolare, effettua letture,
scritture e manipolazioni in genere sui file. Le origini di Perl come strumento per gli amministratori di sistema ne ha fatto un linguaggio adatto all'elaborazione del testo.

=head2 Input e Output

Z<filehandle>
X<filehandle>
X<filehandle; C<STDIN>>
X<filehandle; C<STDERR>>
X<filehandle; C<STDOUT>>
X<C<STDIN>>
X<C<STDERR>>
X<C<STDOUT>>

Un I<filehandle> rappresenta lo stato corrente di uno specifico canale di input
o di output. Ogni programma Perl 5 ha a disposizione tre filehandle standard,
C<STDIN> (l'input del programma), C<STDOUT> (l'output del programma)
e C<STDERR> (l'output degli errori del programma). Per default, ogni cosa che stampate con
C<print> e C<say> va su C<STDOUT>, mentre gli errori, i warning e tutto ciò che generate
con C<warn()> va su C<STDERR>. Questa separazione dell'output vi permette di
redirezionare l'output utile e gli errori in due posti diversi--per esempio, un file di output
e un log degli errori.

X<predefinite; funzioni; C<open>>

Usate la funzione predefinita C<open> per ottenere un filehandle. Per aprire un file in lettura scrivete:

=begin programlisting

    open my $fh, '<', $nomefile
        or die "Non posso leggere da '$nomefile': $!\n";

=end programlisting

Il primo operando è un lessicale che conterrà il filehandle risultante. Il
secondo operando è la I<modalità del file>, che determina il tipo delle operazioni permesse sul
filehandle. L'ultimo operando è il nome del file. Se C<open> fallisce, la clausola
C<die> solleva un'eccezione in cui il valore di C<$!> fornisce le
ragioni del fallimento.

Potete aprire i file in scrittura, append, lettura e scrittura e in altri modi ancora.
Alcune elle modalità di file più importanti sono:

=begin table Modalità di File

Z<file_modes_table>

=headrow

=cell B<Simboli>

=cell B<Spiegazione>

=bodyrows

=row

=cell C<< < >>

=cell Apri in lettura

=row

=cell C<< > >>

=cell Apri in scrittura, sovrascrivendo il contenuto precedente se il file esiste già e
creando il file in caso contrario.

=row

=cell C<<< >> >>>

=cell Apri in scrittura, aggiungendo in coda al contenuto precedente o creando un
nuovo file.

=row

=cell C<< +< >>

=cell Apri in lettura e scrittura.

=row

=cell C<< -| >>

=cell Apri una pipe in lettura verso un processo esterno.

=row

=cell C<< |- >>

=cell Apri una pipe in scrittura verso un processo esterno.

=end table

Potete anche create dei filehandle che leggono e scrivono su un semplice scalare Perl, usando una qualunque modalità di file:

=begin programlisting

    open my $fh_leggi,  '<', \$falso_input;
    open my $fh_scrivi, '>', \$output_catturato;

    fai_qualcosa_di_straordinario( $fh_leggi, $fh_scrivi );

=end programlisting

=begin tip Vi Ricordate C<autodie>?

Tutti gli esempi di questa sezione hanno la C<use autodie;> attivata, in modo che si possa
evitare senza problemi la gestione degli errori. Se non volete usare C<autodie>, potete farlo--ma
ricordatevi di controllare i valori restituiti da tutte le chiamate di sistema per gestire gli errori
in modo appropriato.

=end tip

X<predefinite; funzioni; C<sysopen>>

C<perldoc perlopentut> contiene molti più dettagli sugli usi più esotici di
C<open>, inclusa la possibilità di lanciare e controllare altri processi e
l'uso di C<sysopen> per un controllo più fine dell'input e dell'output.
C<perldoc perlfaq5> contiene del codice d'esempio per molti casi d'uso comuni dell'IO.

=head3 C<open> a Due Argomenti

Il codice meno recente usa la forma di C<open()> a due argomenti, che fonde la modalità e
il nome del file:

=begin programlisting

    open my $fh, B<< "> $un_file" >>
        or die "Non posso scrivere su '$un_file': $!\n";

=end programlisting

Il fatto che Perl debba estrarre la modalità del file dal nome del file è causa di potenziali
problemi. Ogni volta che Perl deve indovinare le vostre intenzioni, correte il rischio
che faccia la scelta sbagliata. Peggio ancora, se C<$un_file> proviene da dell'input utente
inaffidabile c'è un potenziale problema di sicurezza, dato che la presenza di caratteri indesiderati
potrebbe modificare il comportamento del vostro programma.

La C<open()> a tre argomenti è un sostituto più sicuro di questo codice.

=begin tip I Molti Nomi di C<DATA>

X<C<DATA>>
X<C<__DATA__>>
X<C<__END__>>

Il filehandle di package speciale C<DATA> rappresenta il file corrente. Quando
Perl termina la compilazione del file, lascia C<DATA> aperto alla fine
dell'unità di compilazione I<se> il file ha una sezione C<__DATA__> o C<__END__>. Tutto
il testo che segue tale token diventa disponibile tramite lettura da C<DATA>. Questo
meccanismo è utile per brevi programmi autocontenuti. Vedete C<perldoc perldata> per maggiori
dettagli.

=end tip

=head3 Lettura da File

X<predefinite; funzioni; C<readline>>
X<<< C<< <> >>; operatore di raggruppamento readline >>>
X<<< operatori; C<< <> >> >>>

Potete leggere da un filehandle aperto in lettura con la funzione predefinita C<readline>,
scritta anche C<< <> >>. Un idioma molto comune consiste nella lettura di una linea per volta in un
ciclo C<while()>:

=begin programlisting

    open my $fh, '<', 'un_file';

    while (<$fh>)
    {
        chomp;
        say "Ho letto la linea '$_'";
    }

=end programlisting

X<predefinite; funzioni; C<eof>>

In contesto scalare, C<readline> itera su tutte le linee del file finchè
non arriva alla fine del file (C<eof()>). Ogni iterazione restituisce la linea successiva.
Quando si arriva alla fine del file, viene restituito il valore C<undef>. L'idioma di esempio con
C<while> controlla esplicitamente che la variabile di iterazione sia definita, 
in modo che il ciclo termini soltanto quando si arriva alla fine del file. In altre parole,
il codice dell'idioma è una versione abbreviata di:

=begin programlisting

    open my $fh, '<', 'un_file';

    while (defined($_ = <$fh>))
    {
        chomp;
        say "Ho letto la linea '$_'";
        last if eof $fh;
    }

=end programlisting

=begin tip Perchè usare un C<while> e non un C<for>?

C<for> impone il contesto lista ai suoi operandi. Nel caso di C<readline>, Perl
leggerebbe l'I<intero> file prima di elaborarne una parte I<qualunque>. C<while> invece itera
leggendo una linea per volta. Quando la quantità di memoria può essere un problema, usate il
C<while>.

=end tip

X<predefinite; funzioni; C<chomp>>

Ogni linea letta da C<readline> contiene il carattere o i caratteri di marcatura di
fine linea. Nella maggior parte dei casi, tale marcatura è una sequenza di caratteri che varia da piattaforma a piattaforma
e consiste in un carattere di a capo (C<\n>), un carriage return (C<\r>) o una combinazione
dei due (C<\r\n>). Usate C<chomp> per rimuoverla.

Il modo più indicato per leggere un file linea per linea in Perl 5 è il seguente:

=begin programlisting

    open my $fh, '<', $nomefile;

    while (my $linea = <$fh>)
    {
        chomp $linea;
        ...
    }

=end programlisting

X<predefinite; funzioni; C<binmode>>

Per default, Perl accede ai file in modo testo. Se state leggendo dei dati I<binari>,
come un file multimediale o un file compresso--usate C<binmode> prima di effettuare qualunque operazione
di IO. In questo modo Perl preserverà i dati senza modificarli in alcun
modoN<Le possibili modifiche includono invece la conversione di C<\n> nella sequenza
di a capo specifica della piattaforma.>. Anche se le piattaforme in stile Unix non sempre
I<necessitano> di C<binmode>, i programmi portabili dovrebbero usare più cautela (L<unicode>).

=head3 Scrittura su File

X<predefinite; funzioni; C<print>>
X<predefinite; funzioni; C<say>>

Potete scrivere su un filehandle aperto in scrittura con C<print> e C<say>:

=begin programlisting

    open my $fh_out, '>', 'file_di_output.txt';

    print $fh_out "Ecco una linea di testo\n";
    say   $fh_out "... ed eccone un'altra";

=end programlisting

Notate l'assenza della virgola tra il filehandle e l'operando successivo.

=begin tip Disambiguazione di Filehandle

X<Conway, Damian>

I<Perl Best Practices> di Damian Conway raccommanda l'abitudine di racchiudere il filehandle tra
parentesi graffe.  Ciò è necessario per disambiguare il parsing di un
filehandle contenuto in una variabile aggregata e non fa danni negli
altri casi.

=end tip

X<C<$,>>
X<variabili globali; C<$,>>
X<C<$\>>
X<variabili globali; C<$\>>

Sia C<print> che C<say> ricevono una lista di operandi. Perl 5 usa la variabile globale predefinita
C<$,> come separatore tra i valori di una lista e il valore di C<$\>
come ultimo argomento di C<print> e C<say>. Pertanto, queste due linee di codice
producono lo stesso risultato:

=begin programlisting

    my @principi = qw( Corwin Eric Random ... );

    print @principi;
    print join( $,, @principi ) . $\;

=end programlisting

=head3 Chiusura dei File

X<predefinite; funzioni; C<close>>

Quando avete terminato di manipolare un file, fate una C<close> esplicita sul suo filehandle oppure
lasciate semplicemente che il programma esca dal suo scope. In quest'ultimo caso Perl chiuderà il file al vostro posto. Il vantaggio di chiamare
esplicitamete C<close> è che potete controllare--e ripristinare--specifiche
situazioni di errore, come l'esaurimento dello spazio su un dispositivo di memoria di massa o l'indisponibilità di una connessione
di rete.

Come al solito, C<autodie> può gestire questi controlli al vostro posto:

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

    ...

    close $fh;

=end programlisting

=head3 Variabili Speciali di Gestione dei File

Z<file_handling_variables>
X<C<$.>>
X<variabili globali; C<$.>>

Ad ogni linea letta Perl 5 incrementa il valore della variabile C<$.>, che serve
quindi da contatore di linee.

X<C<$/>>
X<variabili globali; C<$/>>

C<readline> usa il contenuto corrente di C<$/> come sequenza di fine linea.
Per default, il valore di questa variabile è la sequenza di caratteri di fine linea più appropriata
per i file di testo sulla vostra piattafiorma.  A dire il vero, la parola
I<linea> è fuorviante.  Potete impostare il contenuto di C<$/> con una qualunque sequenza di
caratteriN<... anche se, sfortunatamente, non con un'espressione regolare. Perl 5 non supporta
questo caso.>. Ciò può essere utile per dati fortemente strutturati da cui volete leggere un
I<record> alla volta. Dato un file i cui record sono separati da due linee vuote,
impostate C<$/> a C<\n\n> per leggere un record alla volta. Eseguendo C<chomp> su un record letto dal
file rimuoverete la sequenza di due caratteri di a capo.

X<C<$|>>
X<variabili globali; C<$|>>
X<buffering>

Per default Perl fa il I<buffering> del proprio output, ed effettua operazioni di IO solo quando la quantità
di output pendente supera una determinata soglia. In questo modo è possibile aggregare tra loro un certo numero di costose operazioni di IO
invece di scrivere separatamente delle piccole quantità di dati.  Tuttavia alcune volte
potreste desiderare di inviare i dati non appena sono disponibili, estromettendo il
buffering--specialmente se state scrivendo un filtro a linea di comando collegato ad altri
programmi oppure un servizio di rete che opera su singole linee.

La variabile C<$|> controlla il buffering sul filehandle di output corrente.
Quando è impostato a un valore diverso da zero, Perl fa il flush dell'output dopo
ciascuna scrittura sul filehandle.  Quando è impostato al valore zero, Perl adotta la propria
strategia di buffering di default.

=begin tip Flush Automatico

Per default i file adottano una strategia con buffering completo. Quando è connesso a un
terminale attivo--e I<non> a un altro programma--C<STDOUT>  adotta una
strategia di buffering a linee, secondo la quale Perl fa il flush di C<STDOUT> ogni volta che incontra un carattere di a capo
nell'output.

=end tip

X<C<autoflush()>>
X<C<IO::File>; C<autoflush()>>

Su un filehandle lessicale, usate il metodo C<autoflush()> al posto della variabile globale:

=begin programlisting

    open my $fh, '>', 'nocciole.log';
    $fh->autoflush( 1 );

    ...

=end programlisting

X<C<IO::File>>
X<C<FileHandle>>

A partire da Perl 5.14, potete invocare su un filehandle tutti i metodi forniti da
C<IO::File> senza dover caricare esplicitamente C<IO::File>. In Perl 5.12
dovete caricare manualmente C<IO::File> e in Perl 5.10 e versioni precedenti dovete caricare
invece C<FileHandle>.

X<C<IO::File>; C<input_line_number()>>
X<C<IO::File>; C<input_record_separator()>>
X<C<IO::Handle>>
X<C<IO::Seekable>; C<seek()>>

I metodi C<input_line_number()> e C<input_record_separator()> di C<IO::File>
vi permettono un accesso per singolo filehandle alle funzionalità per cui normalmente dovreste
usare le variabili globali C<$.> e C<$/>. Vedete la documentazione di C<IO::File>,
C<IO::Handle> e C<IO::Seekable> per maggiori informazioni.

=head2 Directory e Path

X<predefinite; funzioni; C<opendir>>

Manipolare le directory è simile a manipolare i file, eccetto che non è
possibile I<scrivere> sulle directoryN<Mentre potete salvare, spostare, rinominare e
rimuovere i file.>. Per aprire un directory handle usate la funzione nativa C<opendir>:

=begin programlisting

    opendir my $dirh, '/home/scimmiotto/compiti/';

=end programlisting

X<predefinite; funzioni; C<readdir>>

La funzione predefinita C<readdir> legge da una directory. Analogamente a C<readline>, potete
iterare sul contenuto delle directory un elemento alla volta o potete assegnarlo a una
lista in un'unica operazione:

=begin programlisting

    # iterazione
    while (my $file = readdir $dirh)
    {
        ...
    }

    # appiattimento in una lista
    my @listafile = readdir $altrodirh;

=end programlisting

In Perl 5.12 è stata aggiunta una funzionalità per cui all'interno di un C<while> C<readdir> imposta C<$_>:

=begin programlisting

    use 5.012;

    opendir my $dirh, 'compiti/circo/';

    while (readdir $dirh)
    {
        next if /^\./;
        say "Ho trovato il compito $_!";
    }

=end programlisting

X<Unix>
X<file; nascosti>

La strana espressione regolare in questo esempio permette di ignorare i cosiddetti I<file nascosti>
su sistemi Unix e simili, in cui per default la presenza di un punto iniziale fa sì che essi non compaiano
negli elenchi del contenuto delle directory. Vengono ignorati anche i due file speciali C<.> e
C<..>, che rappresentano rispettivamente la directory corrente e la sua directory genitore.

X<file; path relativi>
X<file; path assoluti>

I nomi restituiti da C<readdir> sono I<relativi> alla directory stessa.  In
altre parole, se la directory F<compiti/> contiene tre file con i nomi F<mangiare>,
F<bere> e F<scimmiottare>, C<readdir> restituisce C<mangiare>, C<bere> e
C<scimmiottare> e I<non> F<compiti/mangiare>, F<compiti/bere> e F<compiti/scimmiottare>.
Invece, un path I<assoluto> è un path fully qualified del filesystem.

X<predefinite; funzioni; C<closedir>>

Per chiudere un directory handle lasciate lasciate che il programma esca dal suo scope oppure invocate la funzione predefinita C<closedir>.

=head3 Manipolazione di Path

Perl 5 offre una visione ``alla Unix'' del vostro filesystem e interpreta
i path in stile Unix nel modo appropriato al vostro sistema operativo e al vostro filesystem.  In
altre parole, se siete su Microsoft Windows, potete usare sia il path F<C:/Miei
Documenti/Robot/Bender/> che il path F<C:\Miei
Documenti\Robot\Caprica Sei\>.

X<C<File::Spec>>

Sebbene le operazioni di Perl seguano la semantica dei file Unix, l'uso di un modulo può rendere molto
più facile la manipolazione multi-piattaforma di file. La famiglia di moduli C<File::Spec> distribuiti con Perl
fornisce astrazioni che vi permettono di manipolare path di file in modo sicuro e
portabile. È venerando e consolidato, ma è anche piuttosto macchinoso.

X<CPAN; C<Path::Class>>
X<CPAN; C<Path::Class::Dir>>
X<CPAN; C<Path::Class::File>>

La distribuzione CPAN C<Path::Class> fornisce un'interfaccia migliore. Usate la funzione
C<dir()> per creare un oggetto che rappresenta una directory e la funzione
C<file()> per creare un oggetto che rappresenta un file:

=begin programlisting

    use Path::Class;

    my $pasti = dir( 'compiti', 'cucina' );
    my $file  = file( 'compiti', 'salute', 'robot.txt' );

=end programlisting

Potete ottenere oggetti File da directory e viceversa:

=begin programlisting

    my $pranzo     = $pasti->file( 'calzone_ai_funghi' );
    my $dir_robot  = $lista_robot->dir();

=end programlisting

Potete anche aprire filehandle di directory e file:

=begin programlisting

    my $fh_dir   = $dir->open();
    my $fh_robot = $lista_robot->open( 'r' )
                        or die "Open non riuscita: $!";

=end programlisting

Sia C<Path::Class::Dir> che C<Path::Class::File> offrono altra funzionalità
interessanti--ma ricordate che se usate un oggetto C<Path::Class> di un qualche tipo
con un operatore o una funzione Perl 5 che si aspettano una stringa
contenente un path di file, dovete effettuare voi stessi la conversione in stringa dell'oggetto. 
Si tratta comunque di un piccolo difetto, anche se di lunga data.

=begin programlisting

    my $contenuti = leggi_da_nomefile( B<">$pranzoB<"> );

=end programlisting

=head2 Manipolazione di File

X<C<-X>; operatori di test di file>
X<operatori; C<-X>>

Oltre a leggere e scrivere sui file, potete anche manipolarli come fareste
direttamente da linea di comando o da un gestore di file.  Gli operatori di test di file,
chiamati collettivamente ``operatori C<-X>'' dato che consistono in un trattino seguito da un'unica
lettera, esaminano gli attributi di file e directory. Per esempio, per verificare se un file
esiste:

X<C<-e>; operatore di esistenza di file>
X<operatori; C<-e>>

=begin programlisting

    say 'Presente!' if -e $nomefile;

=end programlisting

L'operatore C<-e> ha un unico operando, ovvero il nome di un file, un filehandle o un
directory handle. Se il file esiste, l'espressione valuta a un valore
vero. C<perldoc -f -X> elenca tutti gli altri test di file; i più comuni sono:

X<C<-d>; operatore di test di directory>
X<C<-f>; operatore di test di file>
X<C<-r>; operatore di test di leggibilità di file>
X<C<-s>; operatore di test di file non vuoto>
X<operatori; C<-d>>
X<operatori; C<-f>>
X<operatori; C<-r>>
X<operatori; C<-s>>

=over 4

=item C<-f>, che restituisce vero se il suo operando è un file regolare

=item C<-d>, che restituisce vero se il suo operando è una directory

=item C<-r>, che restituisce vero se i permessi associati al suo operando
consentono all'utente corrente di leggerlo

=item C<-s>, che restituisce vero se il suo operando è un file non vuoto

=back

A partire da Perl 5.10.1, potete accedere alla documentazione di ciascuno di questi operatori,
per esmepio con C<perldoc -f -r>.

X<predefinite; funzioni; C<rename>>

La funzione predefinita C<rename> vi permette di ridenominare un file o di spostarlo da una directory ad un'altra.  RIceve due
operandi, ovvero il vecchio nome e il nuovo nome del file:

=begin programlisting

    rename 'stella_morta.txt', 'blocco_di_carbonio.txt';

    # oppure se volete essere stilosi:
    rename 'stella_morta.txt' => 'blocco_di_carbonio.txt';

=end programlisting

X<C<File::Copy>>
X<predefinite; funzioni; C<unlink>>
X<predefinite; funzioni; C<delete>>
X<file; copiare>
X<file; spostare>
X<file; rimuovere>
X<file; cancellare>

Non c'è alcuna funzione predefinita per copiare un file, ma il modulo C<File::Copy> distribuito con Perl
fornisce sia una funzione C<copy()> che una funzione C<move()>. Usate la funzione predefinita C<unlink> per
cancellare uno o più file (la funzione predefinita C<delete> cancella un elemento da un
hash, e non un file dal filesystem.). Tutte queste funzioni restituiscono un
valore vero in caso di successo e impostano C<$!> in caso di errore.

=begin tip Meglio di C<File::Spec>

C<Path::Class> fornisce metodi convenienti per controllare alcuni attributi di file e
per rimuovere file in modo portabile.

=end tip

X<predefinite; funzioni; C<chdir>>
X<C<Cwd>>
X<C<Cwd>; C<cwd()>>

Perl tiene traccia della directory di esecuzione corrente. Per default, essa è la
directory da cui avete lanciato il programma. La funzione C<cwd()> del
modulo C<Cwd> distribuito con Perl restituisce il nome della directory di esecuzione corrente. La
funzione predefinita C<chdir> tenta di cambiare la directory di esecuzione corrente. Eseguire il codice
nella directory corretta è essenziale per manipolare i file con path relativi.
