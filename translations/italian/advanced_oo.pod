=head1 OO Avanzato in Perl

Z<advanced_oo>

Creare e usare oggetti in Perl 5 con Moose (L<moose>) è facile.
Invece, I<progettare> dei buoni programmi non lo è affatto. Dovete trovare il giusto compromesso tra l'eccesso
e il difetto di progettazione.  Soltanto l'esperienza pratica può aiutarvi a comprendere le
tecniche fondamentali di progettazione, ma potete farvi guidare da alcuni principi.

=head2 Preferite la Composizione all'Ereditarietà

X<OO: composizione>
X<OO; ereditarietà>

I progetti OO fatti da principianti tendono a utilizzare eccessivamente l'ereditarietà per il riutilizzo del codice e
il polimorfismo. Il risultato è spesso una gerarchia di classi troppo profonda, in cui le responsabilità sono
sparpagliate nei posti sbagliati. La manutenzione di questo codice risulta molto difficile--come si fa a sapere
dove aggiungere o modificare un comportamento? Che cosa succede quando una parte di codice è in conflitto
con del codice dichiarato altrove?

X<OO; is-a>
X<OO; has-a>

L'ereditarietà è solo uno strumento tra tanti. Un'C<Automobile> potrebbe estendere C<Veicolo::A::Ruote>
(con una I<relazione is-a>), ma potrebbe più propriamente I<contenere> diversi oggetti C<Ruota>
come attributi di istanza (una I<relazione has-a>).

Decomporre classi complesse in entità più piccole e specifiche (che siano classi o
ruoli) migliora l'incapsulamento e riduce la possibilità che una singola classe o
ruolo cresca troppo. Delle entità più piccole, più semplici e più incapsulate
sono più facili da capire, testare e manutenere.

=head2 Principio di Singola Responsabilità

X<OO; principio di singola responsabilità>

Quando progettate il vostro sistema ad oggetti, considerate le responsabilità di ciascuna
entità. Per esempio, un oggetto C<Impiegato> potrebbe rappresentare informazioni specifiche
sul nome di una persona, gli indirizzi per contattarla e altri dati personali, mentre un
oggetto C<Lavoro> potrebbe rappresentare i compiti lavorativi all'interno di un'azienda. Separare queste
entità in base alla loro responsabilità permette alla classe C<Impiegato> di
considerare solo il problema della gestione di informazioni su chi è la persona
e alla classe C<Lavoro> di rappresentare che cosa fa quella persona (per esempio, due oggetti C<Impiegato>
potrebbero condividere un C<Lavoro>).

Affidando a ogni classe un'unica responsabilità, si migliora l'incapsulamento dei
suoi dati e comportamenti specifici e si riduce la quantità di accoppiamento tra classi.

=head2 Non Ripetetevi

X<DRY>

La complessità e le duplicazioni rendono più difficili sia lo sviluppo che la manutenzione. Il principio DRY
(Don't Repeat Yourself--Non ripetetevi, NdT) è un ammonimento a cercare di eliminare
le duplicazioni all'interno del sistema. La duplicazione interessa anche i dati oltre al codice.
Invece di ripetere informazioni di configurazione, informazioni sugli utenti e altri dati
nel vostro sistema, create un'unica rappresentazione canonica di tali
dati da cui potete poi estrarre quelli che vi servono nel formato opportuno.

Questo principio aiuta a ridurre la possibilità che parti importanti del vostro sistema
diventino disallineate e vi aiuta a trovare una rappresentazione ottimale
del sistema e dei suoi dati.

=head2 Principio di Sostituzione di Liskov

X<OO; Principio di Sostituzione di Liskov>

Il principio di sostituzione di Liskov suggerisce che dovrebbe essere possibile
sostituire una classe o un ruolo con una loro specializzazione senza
violare l'API dell'originale. In altre parole, tali specializzazioni dovrebbero essere altrettanto o più
generali riguardo a ciò che si aspettano e almeno altrettanto specifiche riguardo a ciò che
producono.

Immaginate due classi, C<Dessert> e la sua derivata C<TortaDiNoci>. Se tali
classi osservano il principio di sostituzione di Liskov, potete rimpiazzare ciascun uso di
un oggetto C<Dessert> con un oggetto C<TortaDiNoci> nel codice di test, e tutti i test
dovrebbero passareN<Vedete "IS-STRICTLY-EQUIVALENT-TO-A" di Reg Braithwaite
all'URL U<http://weblog.raganwald.com/2008/04/is-strictly-equivalent-to.html>
per maggiori dettagli.>.

=head2 Sottotipi e Coercizioni

Z<subtypes>
Z<coercions>
X<tipi>
X<sottotipi>
X<coercizione>

Moose vi permette di dichiarare e usare dei tipi e di estenderli con dei sottotipi
per dare descrizioni ancora più specifiche di ciò che i vostri dati rappresentano e di come
si comportano. Tali annotazioni di tipo sono d'aiuto per verificare che i dati su cui volete operare
in funzioni o metodi specifici siano appropriati e vi permettono anche di specificare
i meccanismi con cui fare la coercizione dei dati da un tipo ad un altro.

X<C<Moose::Util::TypeConstraints>>
X<C<MooseX::Types>>

Vedete C<Moose::Util::TypeConstraints> e C<MooseX::Types> per maggiori informazioni.

=head2 Immutabilità

Z<immutability>

X<OO; immutabilità>

I principianti della programmazione OO trattano spesso gli oggetti come se fossero agglomerati di record che utilizzano
dei metodi per leggere e scrivere dei valori interni. Questa tecnica semplicistica porta
alla sventurata tentazione di spargere le responsabilità dell'oggetto nell'intero
sistema.

Un oggetto ben progettato si aspetta che gli diciate che cosa deve fare e non come deve farlo. Come
regola pratica, se vi trovate ad accedere ai dati d'istanza dell'oggetto (anche
se attraverso i metodi accessori), potreste avere troppa visibilità sui suoi dettagli interni.

Un approccio che aiuta a prevenire questo comportamento è quello di considerare gli oggetti come immutabili.
Dopo aver fornito i dati necessari ai loro costruttori vietate ulteriori
modifiche di queste informazioni dall'esterno della classe. Non esponete alcun metodo per
cambiare i dati d'istanza. Gli oggetti costruiti in questo modo, una volta creati, saranno sempre validi
e non potranno divenire inconsistenti a causa di manipolazioni esterne. Seguire
questo approccio richiede un'enorme dose di disciplina, ma i sistemi risultanti sono robusti,
testabili e manutenibili.

Alcuni stili di progettazione si spingono fino a proibire la modifica dei dati d'istanza
I<dentro> alla classe stessa, ma quest'obiettivo è molto più difficile da raggiungere.
