=head1 Riferimenti Blessed

Z<blessed_references>

Il sistema ad oggetti base di Perl 5 è deliberatamente minimale. È basato su tre sole regole:

=over 4

=item * Una classe è un package.

=item * Un metodo è una funzione.

=item * Un riferimento (blessed) è un oggetto.

=back

Potete costruire tutto il resto su queste tre regole, ma esse sono tutto ciò che vi viene offerto
come default. Questo minimalismo può essere poco adatto a progetti di grandi dimensioni--in particolare,
le possibilità di avere una maggiore astrazione con la metaprogrammazione
(L<code_generation>) sono scomode e limitate. Moose (L<moose>) è una scelta
migliore per programmi moderni con più di un paio di centinaia di linee di codice, sebbene
ci sia moltissimo codice legacy che usa ancora il sistema OO di default di Perl 5.

X<OO; C<bless>>
X<predefinite; funzioni; C<bless>>

Il terzo e ultimo pezzo del sistema OO base di 5 sono i riferimenti blessed.  L'istruzione predefinita C<bless>
associa il nome di una classe ad un riferimento. Tale riferimento diventa così
un invocante valido, e Perl esegue il dispatch di metodi su di esso usando la classe
associata.

X<OO; costruttori>
X<OO; metodi di classe>
X<metodi; classe>

Un costruttore è un metodo che crea un riferimento e ne fa il bless. Per convenzione,
il nome dei costruttori è C<new()>, ma non è obbligatorio.
Quasi sempre i costruttori sono I<metodi di classe>.

C<bless> riceve due argomenti, un riferimento e un nome di classe, e restituisce il
riferimento. Il riferimento può essere vuoto e non è neanche richiesto che la classe esista già.
Potete usare C<bless> anche al di fuori di un costruttore o di una classe, ma tutti i programmi
eccetto i più semplici dovrebbero usarlo all'interno di un vero costruttore. La forma canonica di un
costruttore è simile a questa:

=begin programlisting

    sub new
    {
        my $classe = shift;
        bless {}, $classe;
    }

=end programlisting

Un costruttore come questo è progettato per ricevere il nome della classe come invocante del metodo.
Potreste anche specificare il nome della classe nel codice, ma perdereste in flessibilità.
Un costruttore parametrico permette infatti il riuso con l'ereditarietà, la delega e
l'esportazione.

X<OO; dati di istanza>

Il tipo del riferimento usato è rilevante solo per quanto riguarda il modo in cui l'oggetto memorizza i propri
I<dati di istanza>. Non ha altri effetti sull'oggetto risultante. I riferimenti
a hash sono i più comuni, ma potete fare il bless di qualunque tipo di riferimento:

=begin programlisting

    my $ogg_array   = bless [], $classe;
    my $ogg_scalare = bless \$scalare, $classe;
    my $ogg_sub     = bless \&una_sub, $classe;

=end programlisting

Le classi Moose definiscono gli attributi degli oggetti in modo dichiarativo, ma il sistema OO di default di Perl 5
non è altrettanto solerte. Una classe che rappresenta giocatori di basket mememorizzandone il numero e
la posizione potrebbe usare un costruttore come questo:

=begin programlisting

    package Giocatore
    {
        sub new
        {
            my ($classe, %attr) = @_;
            bless \%attr, $classe;
        }
    }

=end programlisting

... e creare i giocatori con:

=begin programlisting

    my $joel  = Giocatore->new( numero    => 10,
                                posizione => 'centro' );

    my $dante = Giocatore->new( numer     => 33,
                                posizione => 'attacco' );

=end programlisting

I metodi della classe possono accedere agli attributi dell'oggetto direttamente come elementi dell'hash:

=begin programlisting

    sub formatta
    {
        my $self = shift;
        return '#'          . $self->{numero}
             . ' gioca in ' . $self->{posizione};
    }

=end programlisting

... ma la stessa cosa può essere fatta da qualunque pezzo di codice, con la conseguenza che una modifica nella rappresentazione interna dell'oggetto
può invalidare del codice esterno alla classe. L'uso di metodi accessori è più sicuro:

=begin programlisting

    sub numero    { return shift->{numero}    }
    sub posizione { return shift->{posizione} }

=end programlisting

... e così iniziate a scrivere a mano ciò che Moose vi fornisce gratuitamente.
Meglio ancora, nascondendo il codice di generazione degli accessori, Moose incoraggia le persone a usarli
 al posto degli accessi diretti. E addio tentazioni.

=head2 Ricerca di Metodi e Ereditarietà

X<dispatch di metodi>
X<OO; metodi>

Dato un riferimento blessed, una chiamata di metodo come questa:

=begin programlisting

    my $numero = $joel->numero();

=end programlisting

... cerca anzitutto il nome della classe associata al riferimento blessed
C<$joel>--in questo caso, C<Giocatore>. Quindi, Perl cerca una funzioneN<Ricordate
che Perl 5 non distingue tra funzioni di un namespace e metodi.>
di nome C<numero()> in C<Giocatore>. Se tale funzione non esiste e se C<Giocatore>
estende una classe, Perl cerca nella superclasse (e così via) finchè
non trova una funzione C<numero()>. Quando C<numero()> è stata trovata, viene chiamata come metodo con
invocante C<$joel>.

=begin tip Mantenere l'Ordine nei Namespace

X<CPAN; C<namespace::autoclean>>

Il modulo CPAN C<namespace::autoclean> può aiutare ad evitare collisioni accidentali tra le funzioni importate e i metodi.

=end tip

X<C<@ISA>>
X<OO; C<@ISA>>

Mentre Moose fornisce l'istruzione C<extends> per specificare le relazioni di ereditarietà, Perl 5 usa una
variabile globale di package di nome C<@ISA>. Il dispatcher di metodi scorre l'array C<@ISA>
di ciascuna classe per trovare i nomi delle sue superclassi. Se C<GiocatoreInfortunato>
estende C<Giocatore>, potreste scrivere:

=begin programlisting

    package GiocatoreInfortunato
    {
        @GiocatoreInfortunato::ISA = 'Giocatore';
    }

=end programlisting

X<direttiva C<parent>>
X<direttive; C<parent>>

È preferibile usare la direttiva C<parent> (L<pragmas>)N<Il vecchio codice potrebbe usare la direttiva
C<base>, ma in Perl 5.10 C<parent> ha rimpiazzato C<base>.>:

=begin programlisting

    package GiocatoreInfortunato
    {
        use parent 'Giocatore';
    }

=end programlisting

Moose ha il proprio metamodello per memorizzare informazioni di ereditarietà estese che offrono
funzionalità aggiuntive.

X<ereditarietà multipla>
X<OO; ereditarietà>

Potete ereditare da diverse superclassi:

=begin programlisting

    package GiocatoreInfortunato;
    {
        use parent qw( Giocatore Ospedale::Paziente );
    }

=end programlisting

... sebbene vadano tenuti presenti gli avvertimenti dati prima sulla complessità dell'ereditarietà multipla
e del dispatch di metodi. Considerate piuttosto l'uso dei ruoli (L<roles>) oppure i modificatori di metodo di Moose.

=head2 AUTOLOAD

X<C<AUTOLOAD>>
X<OO; C<AUTOLOAD>>
X<metodi; C<AUTOLOAD>>

Se non trova alcun metodo appropriato nella classe dell'invocante e nelle sue
superclassi, Perl 5 cerca una funzione C<AUTOLOAD()> (L<autoload>)
in ciascuna classe seguendo l'ordine di risoluzione selezionato. Ciascuna
C<AUTOLOAD()> trovata viene invocata e può fornire o declinare il metodo desiderato.

C<AUTOLOAD()> rende molto difficile capire l'ereditarietà multipla.

=head2 Sovrascrittura di Metodi e SUPER

Come in Moose, anche nel sistema OO base di Perl potete sovrascrivere dei metodi. Al contrario di Moose,
però, il sistema base non fornisce meccanismi per indicare la vostra I<intenzione> di sovrascrivere un metodo
di una superclasse. Peggio ancora, ogni funzione che predichiarate, dichiarate o importate
nella classe derivata potrebbe sovrascrivere accidentalmente un metodo della superclasse semplicemente perché hanno lo
stesso nome. Anche quando vi dimenticate di usare il sistema di C<override> di Moose, almeno esso
esiste. Nel sistema OO base di Perl 5, invece, tale protezione è del tutto assente.

X<predefinite; classi; C<SUPER::>>

Per sovrascrivere un metodo in una classe derivata, dichiarate un metodo con lo stesso nome del
metodo nella superclasse. All'interno di un metodo che ne sovrascrive un altro, chiamate il metodo sovrascritto usando
il suggerimento C<SUPER::> per farne il dispatch:

=begin programlisting

    sub sovrascritto
    {
        my $self = shift;
        warn 'Chiamata a sovrascritto() nella classe derivata!';
        return $self->SUPER::sovrascritto( @_ );
    }

=end programlisting

Il prefisso C<SUPER::> al nome del metodo indica al dispatcher di metodi di
chiamare un metodo sovrascritto col nome appropriato. Potete passare dei vostri
argomenti al metodo sovrascritto, ma gran parte del codice riusa semplicemente C<@_>. In quest'ultimo caso,
occorre ricordare di fare lo C<shift> dell'invocante.

=begin tip Il Problema di C<SUPER::>

X<CPAN; C<SUPER>>

C<SUPER::> ha una funzionalità dannosa: fa il dispatch alla superclasse del
package in cui il metodo che sovrascrive è stato I<compilato>. Se avete importato
tale metodo da un altro package, Perl non avrà problemi a fare il dispatch alla suprclasse
I<sbagliata>. Il desiderio di mantenere la retrocompatibilità ha fatto sì che questa funzionalità
dannosa fosse mantenuta. Il modulo CPAN C<SUPER> offre una soluzione. La funzione C<super()> di Moose è
invece del tutto esente da questo problema.

=end tip

=head2 Strategie per Sopravvivere ai Riferimenti Blessed

Se i riferimenti blessed vi sembrano minimali e complicati e confusi, ebbene: lo sono davvero. Moose rappresenta
un enorme miglioramento, quindi usatelo ogni volta che vi è possibile. Se invece vi trovate a fare la
manutenzione di codice che usa i riferimenti blessed oppure proprio non siete ancora riusciti a convincere il vostro
gruppo ad abbracciare completamente Moose, potete aggirare alcuni dei problemi dei riferimenti blessed
con un'opportuna disciplina.

X<C<Class::Accessor>>

=over 4

=item * Usate i metodi accessori in modo pervasivo, anche all'interno dei metodi della vostra classe.
Considerate di usare un modulo come C<Class::Accessor> per evitare un eccessivo 
copia e incolla.

=item * Evitate C<AUTOLOAD()> ogni volta che potete. Se proprio I<dovete> usarlo, fate delle
dichiarazioni in avanti delle vostre funzioni (L<functions>) per aiutare Perl a scoprire quale
C<AUTOLOAD()> fornisce l'implementazione del metodo.

=item * Tenete a mente che qualcuno, da qualche parte dovrà prima o poi derivare dalle vostre classi (o
usarle per delegare, o reimplementarne l'interfaccia). Facilitate la vita di queste persone
evitando assunzioni sui dettagli interni del vostro codice, usando la forma
di C<bless> a due argomenti e suddividendo le vostre classi in unità di codice
il più piccole possibile.

=item * Non mescolate funzioni e metodi nella stessa classe.

=item * Usate un unico file F<.pm> per ciascuna classe, a meno che una classe sia piccola,
autocontenuta e serva da supporto in un unico punto.

=back
