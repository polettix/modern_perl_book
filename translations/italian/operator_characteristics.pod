=encoding utf8

=head1 Caratteristiche degli Operatori

Z<operator_characteristics>
X<operators; characteristics>

Ogni operatore ha molte importanti caratteristiche che ne determinano
il comportamento: il numero di operandi su cui opera, le sue relazioni con altri
operatori e le sue possibilità sintattiche.

C<perldoc perlop> e C<perldoc perlsyn> contengono molte informazioni sugli
operatori Perl, ma la documentazione assume che abbiate già familiarità con
alcuni dettagli sul loro funzionamento. I concetti di informatica di base richiesti possono
forse sembrare altisonanti a prima vista, ma se andate al di là dei loro nomi risultano
semplici. E anche se non li avete mai usati esplicitamente, ne conoscete già il significato.

=head2 Precedenza

Z<precedence>
X<precedence>

La I<precedenza> di un operatore determina quando esso viene valutato da Perl in una
espressione. L'ordine di valutazione va dalla precedenza più alta a quella più bassa.
Poichè la precedenza della moltiplicazione è più alta della precedenza dell'addizione,
C<7 + 7 * 10> valuta a C<77> e non C<140>.

Per forzare la valutazione di un operatore prima di un altro, raggruppate le sue
sottoespressioni tra parentesi. Se scrivete C<(7 + 7) * 10>, raggruppando l'addizione in una
singola unità forzate la sua valutazione prima della moltiplicazione. Il risultato diventa
C<140>.

C<perldoc perlop> contiene una tabella delle precedenze. Leggetela, cercate di capirne il contenuto, ma
non preoccupatevi di impararla a memoria (quasi nessuno lo fa). Impegnatevi piuttosto a mantenere semplici
le vostre espressioni e aggiungete delle parentesi per chiarire le vostre intenzioni.

Quando due operatori hanno la stessa precedenza, altri fattori quali
l'associatività (L<associativity>) e la posizione (L<fixity>) aiutano a eliminare l'ambiguità.

=head2 Associatività

Z<associativity>
X<associativity>
X<associativity; left>
X<left associativity>
X<associativity; right>
X<right associativity>

L'I<associatività> di un operatore determina se esso valuta da sinistra verso destra
o da destra verso sinistra. L'addizione è associativa a sinistra, quindi C<2 + 3 + 4>
valuta prima C<2 + 3> e poi aggiunge C<4> al risultato. L'elevamento a potenza è associativo a
destra, quindi C<2 ** 3 ** 4> valuta prima C<3 ** 4> e poi eleva
C<2> all'81esima potenza.

Può valere la pena memorizzare la precedenza e l'associatività degli operatori
matematici più comuni, ma come detto sopra la regola aurea è comunque la semplicità. Usate le parentesi per
rendere chiare le vostre intenzioni.

=begin sidebar

X<C<B::Deparse>>
X<precedence; disambiguation>
X<associativity; disambiguation>

Il modulo core C<B::Deparse> è uno strumento indispensabile di debugging. Eseguite C<perl
-MO=Deparse,-p> su un pezzo di codice per vedere esattamente come Perl gestisce la precedenza e
l'associatività degli operatori. Il flag C<-p> aggiunge parentesi extra di raggruppamento
che aiutano a chiarire l'ordine di valutazione.

Ricordate che l'ottimizzatore del Perl semplifica le operazioni matematiche come quelle negli
esempi precedenti di questa sezione; per evitarlo usate delle variabili, ad esempio C<$x ** $y **
$z>.

=end sidebar

=head2 Arità

Z<arity>

X<arity>
X<operators; arity>
X<nullary>
X<unary>
X<binary>
X<trinary>
X<listary>

L'I<arità> di un operatore è il numero di operandi su cui opera.  Un operatore
I<nullario> opera su zero operandi. Un operatore I<unario> opera su
un operando. Un operatore I<binario> opera su due operandi. Un operatore I<ternario>
opera su tre operandi. Un operatore I<poliadico> opera su una lista
di operandi. La documentazione di un operatore e i relativi esempi dovrebbero chiarire qual è la sua
arità.

Per esempio, gli operatori aritmetici sono operatori binari e di solito sono
associativi a sinistra. C<2 + 3 - 4> valuta prima C<2 + 3>; infatti l'addizione e la
sottrazione hanno la stessa precedenza, ma essendo binari e associativi a sinistra
un corretto ordine di valutazione applica l'operatore più a sinistra (C<+>) ai due
operandi più a sinistra (C<2> e C<3>) e quindi
applica l'operatore più a destra (C<->) al risultato della prima operazione e
all'operando più a destra (C<4>).

I principianti Perl trovano sono spesso confusi dall'interazione tra gli operatori
poliadici--specialmente le chiamate di funzione--e le espressioni nidificate. Se è vero che spesso le parentesi
aiutano, attenzione alle complicazioni del parsing di:

=begin programlisting

    # probabilmente codice bacato
    say ( 1 + 2 + 3 ) * 4;

=end programlisting

... che stampa il valore C<6> e (probabilmente) valuta complessivamente a C<4>
(il valore di ritorno di C<say> moltiplicato per C<4>). Il parser di Perl interpreta
tranquillamente le parentesi come un operatore di post-raggruppamento (L<fixity>) che denota
gli argomenti di C<say>, non come un operatore di raggruppamento di un'espressione usato per cambiare
le precedenze.

=head2 Posizione

Z<fixity>
X<fixity>
X<operators; fixity>
X<infix>
X<fixity; infix>
X<prefix>
X<fixity; prefix>
X<postfix>
X<fixity; postfix>
X<circumfix>
X<fixity; circumfix>
X<postcircumfix>
X<fixity; postcircumfix>

La I<posizione> di un operatore determina il suo posizionamento rispetto ai suoi operandi:

X<C<.>; infix operator>
X<C<.=>; infix operator>
X<C<..>; infix operator>
X<C<...>; infix operator>
X<C<=~>; infix operator>
X<C<!~>; infix operator>
X<C<|>; infix operator>
X<C<||>; infix operator>
X<C<//>; infix operator>
X<C<|=>; infix operator>
X<C<||=>; infix operator>
X<C<//=>; infix operator>

=over 4

=item * Gli operatori I<infissi> compaiono tra i loro operandi. Molti operatori
matematici sono operatori infissi, per esempio l'operatore di moltiplicazione in C<$length
* $width>.

X<C<\>; prefix operator>
X<C<~>; prefix operator>
X<C<++>; prefix operator>
X<C<-->; prefix operator>
X<C<+>; prefix operator>
X<C<->; prefix operator>
X<C<!>; prefix operator>
X<C<!!>; prefix operator>

=item * Gli operatori I<prefissi> precedono i loro operandi. Gli operatori I<postfissi> li
seguono. Questi operatori tendono ad essere unari, come la negazione numerica (C<-$x>),
la negazione booleana (C<!$y>) e l'incremento postfisso (C<$z++>).

X<C<()>; circumfix operator>
X<C<{}>; circumfix operator>
X<C<[]>; circumfix operator>
X<C<//>; circumfix operator>
X<C<``>; circumfix operator>
X<C<''>; circumfix operator>
X<C<"">; circumfix operator>

=item * Gli operatori di I<raggruppamento> racchiudono i loro operandi, ad esempio il cotruttore di hash
anonimo (C<{ ... }>) e gli operatori di quotatura (C<qq[ ... ]>).

X<C<()>; postcircumfix operator>
X<C<{}>; postcircumfix operator>
X<C<[]>; postcircumfix operator>

=item * Gli operatori di I<post-raggruppamento> seguono certi operandi e ne racchiudono altri,
come nell'accesso agli elementi di hash e array (C<$hash{$x}> e C<$array[$y]>).

=back
