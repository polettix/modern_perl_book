=head1 Distribuzioni

Z<distributions>

X<distribuzioni>

Il modo più semplice per gestire la configurazione, il build, l'impacchettamento, il testing
e l'installazione del software è quello di seguire le convenzioni per le distribuzioni CPAN. Una
I<distribuzione> è una collezione di metadati e di uno o più moduli
(L<modules>) che formano un'unità redistribuibile, testabile e installabile.

Tutte queste linee guida--per l'impacchettamento di una distribuzione, per la risoluzione delle sue
dipendenze, per determinare dove installare software, per verificare che funziona, per
visualizzare la documentazione, per gestire un archivio--sono emerse dal
generale consenso di migliaia di collaboratori impegnati a lavorare su decine di migliaia di
progetti. Una distribuzione che segue gli standard CPAN può essere testata su svariate
versioni di Perl 5 e svariate piattaforme hardware entro poche ore
da quando viene caricata--il tutto senza
necessità dell'intervento umano e con la segnalazione automatica agli autori di eventuali errori.

Anche se decidete di non rilasciare il vostro codice come distribuzione pubblica su CPAN,
potete usare gli strumenti e le convenzioni di CPAN anche per gestire il vostro codice privato. La
comunità Perl ha creato un'eccellente infrastruttura; perchè non dovreste avvantaggiarvene?

=head2 Attributi di una Distribuzione

Oltre ad uno o più moduli, una distribuzione contiene svariati altri file e
directory:

=over 4

=item * F<Build.PL> o F<Makefile.PL>, un programma usato per configurare,
fare il build, testare, impacchettare e installare la distribuzione.

=item * F<MANIFEST>, una lista di tutti i file contenuti nella distribuzione. Ha lo scopo
di aiutare altri strumenti a verificare che un pacchetto sia completo.

=item * F<META.yml> e/o F<META.json>, un file contenente metadati relativi alla
distribuzione e alle sue dipendenze.

=item * F<README>, una descrizione della distribuzione, del suo scopo e
del suo copyright e licenza d'uso.

=item * F<lib/>, la directory contenente i moduli Perl.

=item * F<t/>, una directory contenente i file di test.

=item * F<Changes>, una traccia di ogni cambiamento fatto alla distribuzione.

=back

X<CPAN; CPANTS>

Una distribuzione ben-formata deve contenere un nome univoco e un singolo numero di versione
(spesso derivato dal suo modulo pricipale). Ogni distribuzione pubblica che scaricate da
CPAN dovrebbe rispettare questi standard. Il servizio pubblico CPANTS
(U<http://cpants.perl.org/>) valuta ogni distribuzione caricata in base alle
linee guida di impacchettamento e alle convenzioni, e suggerisce eventuali migliorie. Se il codice segue le linee guida
di CPANTS non significa che funzioni, ma che gli strumenti di impacchettamento di CPAN
dovrebbero essere in grado di gestire tale distribuzione.

=head2 Strumenti CPAN per Gestire le Distribuzioni

Perl 5 vi mette direttamente a disposizione svariati strumenti per installare, sviluppare e gestire le vostre
distribuzioni:

X<C<CPAN>>
X<C<CPANPLUS>>

=over 4

=item * C<CPAN.pm> è il client CPAN ufficiale; C<CPANPLUS> è un client alternativo.
Per molti aspetti potete considerarli equivalenti. Anche se per default questi client installano
distribuzioni pubbliche da CPAN, potete farli puntare ad un vostro archivio
al posto di, o insieme a, quello pubblico.

X<C<Module::Build>>

=item * C<Module::Build> è una suite di strumenti scritti in Perl per configurare, fare il build,
installare e testare distribuzioni. Utilizza i file F<Build.PL>.

X<C<ExtUtils::MakeMaker>>

=item * C<ExtUtils::MakeMaker> è uno strumento storico che col tempo potrebbe essere sostituito da
C<Module::Build>. È ancora molto usato, sebbene venga soltanto più manutenuto risolvendone
i bug critici. Utilizza i file F<Makefile.PL>.

X<C<Test::More>>

=item * C<Test::More> (L<testing>) è il modulo di testing basilare e maggiormente usato
per scrivere test automatici del software Perl.

X<C<Test::Harness>>
X<C<prove>>

=item * C<Test::Harness> e C<prove> (L<running_tests>) eseguono test e
interpretano e riportano i loro risultati.

=back

Inoltre, potete installare molti moduli CPAN che rendono più facile la vostra vita di sviluppatori:

X<CPAN; C<App::cpanminus>>
X<cpanminus>
X<cpanm>

=over 4

=item * C<App::cpanminus> è un client CPAN che non richiede configurazione. Gestisce le esigenze
più comuni, usa poca memoria ed è veloce.

X<CPAN; C<App::perlbrew>>
X<perlbrew>

=item * C<App::perlbrew> vi aiuta a gestire installazioni multiple di Perl 5.
Potete installare nuove versioni di Perl 5 a scopo di testing o di produzione e potete isolare
specifiche applicazioni insieme alle loro dipendenze.

X<CPAN; C<CPAN::Mini>>
X<CPAN; C<cpanmini>>

=item * C<CPAN::Mini> e il comando associato C<cpanmini> vi permettono di creare il vostro
mirror (privato) di CPAN.  Potete aggiungere le vostre distribuzioni
a questo archivio e controllare le versioni dei moduli pubblici 
disponibili nella vostra organizzazione.

X<CPAN; C<Dist::Zilla>>
X<CPAN; C<Module::Build>>
X<C<ExtUtils::MakeMaker>>

=item * C<Dist::Zilla> automatizza alcuni compiti comuni legati alle distribuzioni. Anche se
utilizza C<Module::Build> o C<ExtUtils::MakeMaker>, per quanto riguarda I<voi>
esso rappresenta una loro sostituzione. Vedete U<http://dzil.org/> per un tutorial interattivo.

X<CPAN; C<Test::Reporter>>

=item * C<Test::Reporter> vi permette di riportare i risultati dell'esecuzione delle
test suite automatiche delle distribuzioni che installate, fornendo agli autori maggiori dettagli
in caso di fallimenti.

=back

=head2 Progettazione delle Distribuzioni

X<CPAN; C<Module::Starter>>

Il processo di progettazione di una distribuzione meriterebbe un libro a sè (vedete
I<Writing Perl Modules for CPAN> di Sam Tregar), ma alcuni principi possono comunque esservi utili.
Avviate il vostro progetto con una utility come C<Module::Starter> o C<Dist::Zilla>. Il costo iniziale
per apprenderne la configurazione e le regole può sembrare un investimento faticoso,
ma i benefici di avere ogni cosa impostata correttamente (e, nel caso di
C<Dist::Zilla>, I<sempre> aggiornato) vi solleva da gran parte del lavoro
gestionale più noioso.

A questo punto, considerate le seguenti regole:

=over 4

=item * I<Ogni distribuzione deve avere un unico scopo ben definito>. Anche quello di
raggruppare delle distribuizioni correlate in un'unità installabile può essere
uno scopo valido. Decomporre il vostro software in distribuzioni separate
vi permette di gestire le loro dipendenze in modo appropriato e di rispettare il loro
incapsulamento.

=item * I<Ogni distribuzione deve avere un unico numero di versione>. I numeri di versione
devono sempre crescere nel tempo. La politica delle versioni semantiche (U<http://semver.org/>) è
solida ed è compatibile con l'approccio di Perl 5.

=item * I<Ogni distribuzione richiede un'API ben definita>. Una
suite automatica di test sufficientemente ampia può verificare che manteniate tale API tra diverse versioni.  Se
usate un mirror locale di CPAN per installare le vostre distribuzioni, potete riusare
l'infrastruttura CPAN per il test delle distribuzioni e delle loro dipendenze. In questo modo
potete facilmente effettuare test di integrazione di componenti riusabili.

=item * I<Automatizzate i test della vostra distribuzione focalizzandovi sulla loro ripetibilità e
utilità>. L'infrastruttura CPAN supporta la generazione automatica di rapporti di test. Usatela!

=item * I<Esponete un'interfaccia semplice ed efficace>. Evitate di usare simboli globali
e esportazioni di default; lasciate che le persone usini solo ciò di cui hanno bisogno. Non
inquinate i loro namespace.

=back
