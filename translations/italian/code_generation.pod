=head1 Generazione di Codice

Z<code_generation>

I programmatori principianti scrivono più codice del necessario, in parte perché
non hanno familiarità col linguaggio, le librerie e gli idiomi, e in parte perché
mancano di esperienza. Cominciano scrivendo lunghi pezzi di codice procedurale, poi
scoprono le funzioni, poi i parametri, poi gli oggetti e--in qualche caso--le funzioni
di ordine superiore e le chiusure.

Man mano che migliorate come programmatori, vi troverete a scrivere sempre meno codice per risolvere uno stesso
problema. Userete delle astrazioni migliori e scriverete codice più generico. Potrete
riutilizzare il codice--e quando arriverete ad aggiungere funzionalità cancellando del codice potrete considerarvi
davvero soddisfatti.

X<metaprogrammazione>
X<generazione di codice>

La scrittura di programmi che scrivono programmi al vostro posto--detta I<metaprogrammazione> o I<generazione
di codice>--offre ulteriori possibilità di astrazione. Anche se in questo modo potete fare
enormi pasticci, potete anche creare cose eccellenti. Per esempio, ciò che rende
possibile Moose (L<moose>) sono proprio delle tecniche di metaprogrammazione.

L'uso di C<AUTOLOAD> (L<autoload>) per le funzioni e metodi mancanti
è un esempio limitato di questa tecnica; il sistema di dispatch di funzioni e metodi
di Perl 5 vi permette di controllare che cosa succede quando essi non vengono trovati normalmente.

=head2 eval

X<C<eval>; stringa>
X<predefinite; funzioni; C<eval>>

La tecnica più semplice di generazione di codice consiste nel definire una stringa contenente un
pezzetto di codice Perl valido e compilarla con la forma dell'operatore C<eval> che riceve una stringa. Contrariamente
alla forma a blocco dell'operatore C<eval> usata per catturare eccezioni, la C<eval> di una stringa compila il
suo contenuto nello scope corrente, che include il package corrente e
le proprie istanze dei lessicali.

Un utilizzo comune di questa tecnica è quello di fornire una soluzione di ripiego quando non potete (o non
volete) caricare una dipendenza opzionale:

=begin programlisting

    eval { require Scimmia::Rintracciata }
        or eval 'sub Scimmia::Rintracciata::log {}';

=end programlisting

Se C<Scimmia::Rintracciata> non è disponibile, questo codice fa in modo che la sua funzione C<log()> esista, anche
se non fa nulla. Tuttavia questo esempio è ingannevolmente semplice. Usare C<eval> nel modo
giusto richiede degli sforzi; dovete gestire i problemi di quotatura per poter includere delle variabili nel vostro
codice passato a C<eval>. Interpolare alcune variabili ma non altre è ancora più
complesso:

=begin programlisting

    sub genera_accessori
    {
        my ($nomemet, $nomeattr) = @_;

        eval <<"FINE_ACCESSORE";
        sub leggi_$nomemet
        {
            my \$self = shift;
            return \$self->{$nomeattr};
        }

        sub scrivi_$nomemet
        {
            my (\$self, \$valore) = \@_;
            \$self->{$nomeattr}  = \$valore;
        }
    FINE_ACCESSORE
    }

=end programlisting

Guai a dimenticare un backslash! E buona fortuna a spiegare al vostro evidenziatore di sintassi
che cosa state facendo! Peggio ancora, ogni invocazione di C<eval> su stringa
genera una nuova struttura dati che rappresenta l'intero codice, e anche compilarla
non è certo gratis. Pur con tutti i suoi limiti questa tecnica ha però il vantaggio di essere semplice.

=head2 Chiusure Parametriche

X<chiusure; parametriche>

Mentre creare semplici accessori e mutatori con C<eval> è banale, le chiusure
(L<closures>) vi permettono di aggiungere parametri al codice generato durante la sua compilazione,
senza richiedere ulteriori elaborazioni:

=begin programlisting

    sub genera_accessori
    {
        my $nomeattr = shift;

        my $lettore = sub
        {
            my $self = shift;
            return $self->{$nomeattr};
        };

        my $scrittore = sub
        {
            my ($self, $valore) = @_;
            $self->{$nomeattr} = $valore;
        };

        return $lettore, $scrittore;
    }

=end programlisting

Questo codice evita i noiosi problemi di quotatura e compila ogni chiusura una sola volta.
Usa anche meno memoria dato che tutte le istanze della
chiusura condividono il codice compilato. L'unica cosa che differisce tra due istanze è il lessicale C<$nomeattr> associato. In un
processo con un lungo tempo di vita o con molti accessori questa tecnica può rivelarsi molto
utile.

X<chiusure; installazione nella tabella dei simboli>
X<tabelle dei simboli>

Installare delle chiusure nella tabella dei simboli è piuttosto semplice, anche se poco elegante:

=begin programlisting

    {
        my ($leggi, $scrivi) = genera_accessori( 'torta' );

        no strict 'refs';
        *{ 'leggi_torta' } = $leggi;
        *{ 'scrivi_torta' } = $scrivi;
    }

=end programlisting

X<C<*>; sigillo>
X<sigilli; C<*>>
X<typeglob>

La strana sintassi con l'asteriscoN<Pensate ad esso come a un I<sigillo di typeglob>, dove un
I<typeglob> è un'espressione gergale Perl che sta per "symbol table".> che dereferenzia un hash si riferisce alla
I<tabella dei simboli> corrente, che è una porzione del namespace
corrente contenente i simboli accessibili globalmente come le variabili globali di package, le
funzioni e i metodi. Assegnando un riferimento ad un elemento della tabella dei simboli si effettua l'installazione
o la sostituzione di tale elemento. Per promuovere una funzione anonima a
metodo memorizzate il riferimento a tale funzione nella tabella dei simboli.

=begin tip Tabelle dei Simboli Facilitate

X<CPAN; C<Package::Stash>>

Il modulo CPAN C<Package::Stash> offre un'interfaccia migliore per la manipolazione delle
tabelle dei simboli.

=end tip

X<direttiva C<strict>>
X<direttive; C<strict>>

L'assegnamento in una tabella dei simboli tramite stringa, anziché tramite un nome letterale di variabile,
è detto riferimento simbolico. Durante questa operazione dovete disattivare il controllo dei riferimenti effettuato da C<strict>.
Molti programmi contengono un errore sottile in pezzi di codice simili a quello sopra, quando generano la chiusura e fanno l'assegnamento
in un'unica linea:

=begin programlisting

    {
        no strict 'refs';

        *{ $nomemet } = sub {
            # errore sottile: strict refs e` disattivato anche qui
        };
    }

=end programlisting

Questo esempio disattiva le restrizioni sia nel blocco esterno che nel corpo stesso della
funzione. Dato che a violare le restrizioni dei controlli sui riferimenti è soltanto l'assegnamento, è meglio
disattivarle soltanto durante tale operazione.

Se il nome del metodo è un letterale stringa nel vostro codice sorgente, anziché il valore
contenuto in una variabile, potete fare direttamente l'assegnamento al simbolo rilevante:

=begin programlisting

    {
        no warnings 'once';
        (*leggi_torta, *scrivi_torta) =
             genera_accessori( 'torta' );
    }

=end programlisting

Assegnare direttamente al glob non viola le restrizioni, ma menzionare ciascun
glob una sola volta I<genera> invece un warning di "used only once" (usato una sola volta, NdT) a meno che lo sopprimiate
esplicitamente nel relativo scope.

=head2 Manipolazioni Durante la Compilazione

X<predefinite; funzioni; C<eval>>

Diversamente dal codice scritto esplicitamente, il codice generato con una C<eval> di stringa
viene compilato durante l'esecuzione.  Mentre potete ragionevolmente assumere che una funzione normale sia
disponibile durante l'intera vita del vostro programma, una funzione generata potrebbe
non essere disponibile quando vi serve.

X<C<BEGIN>>

Potete forzare Perl ad eseguire il codice che genera altro codice durante la compilazione racchiudendolo
in un blocco C<BEGIN>.  Quando il parser Perl 5 incontra un blocco etichettato con
C<BEGIN>, esegue il parsing dell'intero blocco. Se il blocco non contiene errori di sintassi
viene eseguito immediatamente. Al termine dell'esecuzione, il parsing continua come se non
fosse stato interrotto.

La differenza tra scrivere:

=begin programlisting

    sub leggi_eta   { ... }
    sub scrivi_eta  { ... }

    sub leggi_nome  { ... }
    sub scrivi_nome { ... }

    sub leggi_peso  { ... }
    sub scrivi_peso { ... }

=end programlisting

... e:

=begin programlisting

    sub crea_accessori { ... }

    BEGIN
    {
        for my $accessore (qw( eta nome peso ))
        {
            my ($leggi, $scrivi) =
                crea_accessori( $accessore );

            no strict 'refs';
            *{ 'leggi_' . $accessore  } = $leggi;
            *{ 'scrivi_' . $accessore } = $scrivi;
        }
    }

=end programlisting

... è essenzialmente una differenza nel grado di manutenibilità.

X<C<BEGIN>; implicito>
X<moduli; C<BEGIN> implicito>

In un modulo, ogni pezzo di codice al di fuori delle funzioni viene eseguito quando fate la C<use> del modulo,
poiché Perl aggiunge implicitamente un C<BEGIN> che racchiude la C<require> e la C<import>
(L<importing>). Il codice del modulo al di fuori delle funzioni viene eseguito
I<prima> della chiamata a C<import()>. Se fate soltanto la C<require> del modulo,
non viene generato implicitamente un blocco C<BEGIN>. In tal caso, il codice al di fuori
delle funzioni viene eseguito alla I<fine> del parsing.

Fate attenzione alle interazioni tra una I<dichiarazione> lessicale (l'associazione di un nome
ad uno scope) e un I<assegnamento> lessicale. La prima avviene durante
la compilazione, mentre il secondo avviene al momento dell'esecuzione. Il seguente codice ha un errore
sottile:

X<CPAN; C<UNIVERSAL::require>>

=begin programlisting

    # aggiunge un metodo require() a UNIVERSAL
    use UNIVERSAL::require;

    # errato; non usatelo
    my $package_desiderato = 'Scimmia::A::Propulsione';

    BEGIN
    {
        $package_desiderato->require();
        $package_desiderato->import();
    }

=end programlisting

... dato che il blocco C<BEGIN>  viene eseguito I<prima> dell'assegnamento del
valore stringa a C<$package_desiderato>.  Il risultato è un'eccezione
relativa al tentativo di invocare il metodo C<require()> su un valore non definito.

=head2 Class::MOP

Z<class_mop>

X<C<Class::MOP>>
X<Moose>
X<oggetti; protocollo di meta-oggetti>
X<protocollo di meta-oggetti>

Contrariamente alla possibilità di installare riferimenti a funzione per popolare dei namespace e creare dei
metodi, non esiste un modo semplice per creare delle classi da programma in Perl 5.
Fortunatamente, Moose ci viene in soccorso con la sua libreria C<Class::MOP> che fornisce il
I<protocollo di meta-oggetti>--un meccanismo grazie al quale si possono creare sistemi
ad oggetti che manipolano se stessi.

Anziché scrivere il vostro codice in una stringa potenzialmente sbagliata da passare ad C<eval> oppure tentare di accedere
manualmente alle tabelle dei simboli, potete manipolare le entità e le astrazioni del
vostro programma attraverso oppurtuni oggetti e metodi.

Per creare una classe, scrivete:

=begin programlisting

    use Class::MOP;

    my $classe = Class::MOP::Class->create(
                     'Scimmia::Cacciavite'
                 );

=end programlisting

X<metaclasse>
X<OO; metaclasse>

Potete aggiungere attributi e metodi alla classe quando la create:

=begin programlisting

    my $classe = Class::MOP::Class->create(
        'Scimmia::Cacciavite' =>
        (
            attributes =>
            [
                Class::MOP::Attribute->new('$materiale'),
                Class::MOP::Attribute->new('$colore'),
            ]
            methods =>
            {
                stringi  => sub { ... },
                allenta  => sub { ... },
            }
        ),
    );

=end programlisting

... oppure attraverso la metaclasse (l'oggetto che rappresenta la classe) dopo la creazione:

=begin programlisting

    $classe->add_attribute(
        esperienza  => Class::MOP::Attribute->new('$xp')
    );

    $classe->add_method( uccidi_zombie => sub { ... } );

=end programlisting

... e potete ispezionare la metaclasse:

=begin programlisting

    my @attr = $class->get_all_attributes();
    my @met  = $class->get_all_methods();

=end programlisting

X<CPAN; C<Class::MOP::Attribute>>
X<CPAN; C<Class::MOP::Method>>

Analogamente, C<Class::MOP::Attribute> e C<Class::MOP::Method> vi consentono di
creare, manipolare e fare introspezione su attributi e metodi.
