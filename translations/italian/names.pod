=head1 Nomi

Z<names>

X<names>
X<identifiers>

I I<nomi> (o I<identificatori>) sono dappertutto nei programmi Perl: variabili,
funzioni, package, classi e perfino filehandle. Tutti questi nomi iniziano con
una lettera o un underscore e possono includere opzionalmente qualunque combinazione di
lettere, numberi e underscore.  Quando la pragma C<utf8> (L<unicode>) è attivata,
potete usare negli identificatori qualunque carattere ammesso da UTF-8 in una parola. Questi sono tutti identificatori
validi in Perl:

=begin programlisting

    my $name;
    my @_private_names;
    my %Names_to_Addresses;

    sub anAwkwardName3;

    # with use utf8; enabled
    package Ingy::DE<ouml>t::Net;

=end programlisting

Questi invece sono identificatori non validi:

=begin programlisting

    my $invalid name;
    my @3;
    my %~flags;

    package a-lisp-style-name;

=end programlisting

X<symbolic lookups>

I<I nomi esistono principalmente a beneficio del programmatore>. Queste regole si applicano
solo ai nomi che compaiono esplicitamente nel vostro codice sorgente, come C<sub
fetch_pie> oppure C<my $waffleiron>. Infatti, è il parser del Perl a controllare che le regole sui
nomi siano rispettate.

La natura dinamica del Perl vi permette anche di riferirvi a delle entità attraverso nomi generati a
runtime o dati in input al programma. Questi I<lookup simbolici> vi danno maggiore flessibilità
al costo di una minore sicurezza. In particolare, invocando indirettamente delle funzioni e
dei metodi o effettuando il lookup dei simboli di un namespace, potete bypassare il parser del Perl.

Tutto questo può portare a del codice confuso. Come raccomanda molto efficacemente Mark Jason Dominus N<U<http://perl.plover.com/varvarname.html>>, usate piuttosto un hash (L<hashes>) oppure una struttura dati nidificata (L<nested_data_structures>).

=head2 Nomi di Variabili e Sigilli

X<variables; names>
X<scalar variables>
X<variables; scalars>
X<scalars>
X<arrays>
X<variables; arrays>
X<hashes>
X<variables; hashes>
X<sigil>

I I<nomi di variabile> iniziano sempre con un I<sigillo> (o simbolo) che indica
il tipo del valore della variabile. Le I<variabili scalari> (L<scalars>) usano il simbolo
del dollaro (C<$>). Le I<variabili array> (L<arrays>) usano il simbolo chiocciola (C<@>).
Le I<variabili hash> (L<hashes>) usano il simbolo della percentuale (C<%>):

=begin programlisting

    my $scalar;
    my @array;
    my %hash;

=end programlisting

I sigilli costituiscono una sorta di namespace visuale per i nomi di variabili. È possibile
dichiarare più variabili con lo stesso nome e tipi diversi, ma crea confusione:

=begin programlisting

    my ($bad_name, @bad_name, %bad_name);

=end programlisting

Questo codice non confonde il Perl, ma confonde le persone che lo leggono.

X<variant sigils>

I sigilli di Perl 5 sono I<varianti>. Così come il contesto determina quanti elementi vi
aspettate da un'operazione o quali tipi di dati vi aspettate di ottenere, i sigilli determinano
il modo in cui manipolate i dati in una variabile.  Per esempio, per accedere a un
singolo elemento di un array o di un hash, dovete usare il sigillo scalare (C<$>):

=begin programlisting

    my $hash_element  = $hash{ $key };
    my $array_element = $array[ $index ]

    $hash{ $key }     = 'value';
    $array[ $index ]  = 'item';

=end programlisting

X<lvalue>
X<rvalue>

L'analogia con il contesto di numero è importante. Usare un elemento scalare di un
aggregato come I<lvalue> (parte di un assegnmento a sinistra del carattere
C<=>) impone un contesto scalare (L<context_philosophy>) all'I<rvalue>
(parte a destra del carattere C<=>).

X<slices>

In modo simile, un accesso a più elementi di un hash o di un array--una operazione
nota come I<slicing>--usa il simbolo chiocciola (C<@>) e impone un contesto listaN<...
anche se la lista stessa ha zero o un solo elemento>:

=begin programlisting

    my @hash_elements  = @hash{ @keys };
    my @array_elements = @array[ @indexes ];

    my %hash;
    @hash{ @keys }     = @values;

=end programlisting

Il modo più affidabile di determinare il tipo di una variabile--scalare, array o
hash--è di considerare le operazioni che le vengono applicate. Gli scalari supportano tutte le operazioni di base,
come le manipolazioni di stringhe, numeriche e booleane. Gli array supportano
accessi indicizzati che usano le parentesi quadre. Gli hash supportano accessi per chiave che usano le parentesi graffe. 

=head2 Namespace

X<fully-qualified name>
X<namespaces>

Perl fornisce un meccanismo per raggruppare funzioni e variabili correlate in un proprio
spazio dei nomi univoco--i I<namespace> (L<packages>). Un namespace è una collezione di simboli
con un suo nome. Perl permette di definire namespace multi-livello, i cui nomi sono composti
con doppi due punti (C<::>); per esempio, C<Pasticceria::Gelato> si riferisce a una collezione di
variabili e funzioni logicamente correlate, come C<cono()> e C<versa_cioccolata_calda()>.

All'interno di un namespace, potete usare dei nomi abbreviati per i suoi membri. Al di fuori del
namespace, vi riferite invece a un membro usando il suo I<fully-qualified name>. Ovvero, all'interno di
C<Pasticceria::Gelato>, C<aggiungi_praline()> si riferisce alla stessa funzione di
C<Pasticceria::Gelato::aggiungi_praline()> al di fuori del namespace.

Oltre alle regole standard per i nomi, che si applicano anche ai nomi di package, per convenzione i nomi di package
definiti dagli utenti iniziano con lettere maiuscole. Il core del Perl riserva infatti i nomi di package
tutti minuscoli per le pragma (L<pragmas>) come C<strict> e C<warnings>.
Questa politica è imposta essenzialmente attraverso il rispetto delle linee guida della comunità.

Tutti i namespace in Perl 5 sono visibili a livello globale. Quando Perl deve fare il lookup di un simbolo in
C<Pasticceria::Gelato::Frigo>, inizia col cercare nella symbol table C<main::> un
simbolo che rappresenti il namespace C<Pasticceria::>, quindi cerca al suo interno il namespace
C<IceCream::>, e così via. Il C<Frigo::> è quindi visibile dall'esterno del namespace C<IceCream::>.
Il fatto che i due namespace siano nidificati è solo un meccanismo di memorizzazione,
e non ha alcuna implicazione su ulteriori relazioni tra package padre e figlio o tra package fratelli.
Sta al programmatore usare questo meccanismo per rendere evidenti le relazioni I<logiche> tra entità--attraverso una buona scelta
e organizzazione dei nomi.
