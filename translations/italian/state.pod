=head1 State e Chiusure

Z<state>

Le chiusure (L<closures>) sfruttano lo scope lessicale (L<scope>) per mediare
l'accesso a variabili semi-private. Anche le funzioni con nome possono sfruttare i
legami imposti dallo scope lessicale:

=begin programlisting

    {
        my $sicurezza = 0;

        sub abilita_sicurezza    { $sicurezza = 1 }
        sub disabilita_sicurezza { $sicurezza = 0 }

        sub fai_qualcosa_di_straordinario
        {
            return if $sicurezza;
            ...
        }
    }

=end programlisting

L'incapsulamento delle funzioni che (dis)attivano la sicurezza permette alle tre funzioni
di condividere uno stato senza esporre la variabile lessicale direttamente al codice esterno.
Questo idioma funziona bene nei casi in cui il codice esterno deve poter cambiare lo
stato interno, ma è un po' ingombrante quando tale stato deve essere gestito da una singola funzione.

Immaginate di voler contare il numero di clienti della vostra
gelateria. Ogni cento persone, una riceve gratis un'aggiunta di panna:

=begin programlisting

    {
        my $conta_cli = 0;

        sub servi_cliente
        {
            $conta_cli++;

            my $ordine = shift;

            aggiungi_panna($ordine)
                if ($conta_cli % 100 == 0);

            ...
        }
    }

=end programlisting

X<state>
X<builtins; C<state>>

Questo approccio I<funziona>, ma creare un nuovo scope lessicale per un'unica funzione
introduce più complessità di quanto sembri necessario. L'istruzione nativa C<state>
vi permette di dichiarare una variabile con scope lessicale il cui valore persiste
tra un'invocazione e l'altra:

=begin programlisting

    sub servi_cliente
    {
        B<state $conta_cli = 0;>
        $conta_cli++;

        my $ordine = shift;
        aggiungi_panna($ordine)
            if ($conta_cli % 100 == 0);

        ...
    }

=end programlisting

X<C<feature>>
X<C<feature>; C<state>>

Dovete attivare questa funzionalità usando un modulo come
C<Modern::Perl>, la direttica C<feature> (L<pragmas>) o richiedendo una versione
specifica di Perl che sia la 5.10 o una successiva (per esempio, con C<use 5.010;> o C<use 5.012;>).

C<state> funziona anche nelle funzioni anonime:

=begin programlisting

    sub crea_contatore
    {
        return sub
        {
             B<state $cont = 0;>
             return $cont++;
         }
    }

=end programlisting

... anche se questo approccio non presenta molti vantaggi evidenti.

=head1 State e Pseudo-State

A partire da Perl 5.10 è stata deprecata una tecnica usata con le versioni precedenti del Perl per
emulare il comportamento di C<state>. Una funzione con nome poteva fare una chiusura sul suo scope lessicale
precedente abusando di un'idiosincrasia dell'implementazione. L'aggiunta di un condizionale postfisso
che valutasse a falso in coda a una dichiarazione C<my> evitava
di I<reinizializzare> una variabile lessicale a C<undef> o al suo valore iniziale.

Adesso la presenza di un'espressione condizionale postfissa come modificatore di una dichiarazione di variabile lessicale
viene deprecato con un warning. In effetti, con questa tecnica è troppo facile introdurre inavvertitemente
dei bug nel codice; usate invece C<state> dove è
possibile o in alternativa una vera chiusura. Riscrivete in modo corretto questo idioma quando lo incontrate:

=begin programlisting

    sub cattivo_stato
    {
        # my $contatore  = 1 if 0; # DEPRECATO; non usatelo
        state $contatore = 1;      # usate invece questo

        ...
    }

=end programlisting
