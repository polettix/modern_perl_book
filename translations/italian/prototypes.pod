=head1 Prototipi

Z<prototypes>

X<prototipi>

Un I<prototipo> è un insieme opzionale di metadati associato ad una funzione che
cambia il modo in cui il parser interpreta i suoi argomenti. Anche se, a un'analisi
superficiale, i prototipi ricordano le segnature di funzione di altri linguaggi, in realtà sono
molto diversi.

X<predefinite; funzioni; C<push>>

I prototipi permettono agli utenti di definire delle funzioni che si comportano come
quelle native. Considerate la funzione nativa C<push>, che riceve un array e una lista. Mentre
normalmente Perl 5 appiattirebbe l'array e la lista in un'unica lista da passare a
C<push>, il parser sa che non deve appiattire l'array, in modo che C<push> possa modificarlo
sul posto.

I prototipi di funzione sono parte delle dichiarazioni:

=begin programlisting

    sub qui        B<(&@)>;
    sub quo        B<($$)> { ... }
    my  $qua = sub B<(&&)> { ... };

=end programlisting

Un prototipo associato a una dichiarazione anticipata deve corrispondere al prototipo
associato alla dichiarazione della funzione; in caso contrario, Perl genera un warning.
Curiosamente, potete omettere il prototipo nella dichiarazione anticipata e
includerlo nella dichiarazione vera e propria--ma non ci sono ragioni per farlo.

X<predefinite; funzioni; C<prototype>>

La funzione nativa C<prototype> riceve il nome di una funzione e restituisce una stringa
che rappresenta il suo prototipo. Per vedere il prototipo di una funzione nativa, usate la forma C<CORE::>:

=begin screen

    $ B<perl -E "say prototype 'CORE::push';">
    \@@
    $ B<perl -E "say prototype 'CORE::keys';">
    \%
    $ B<perl -E "say prototype 'CORE::open';">
    *;$@

=end screen

C<prototype> restituisce C<undef> per le funzioni native che non potete
emulare:

=begin screen

    B<say prototype 'CORE::system' // 'undef'>
    # undef; non potete emulare la funzione nativa C<system>

    B<say prototype 'CORE::prototype' // 'undef'>
    # undef; la funzione nativa C<prototype> non ha un prototipo

=end screen

Vi ricordate di C<push>?

=begin screen

    $ B<perl -E "say prototype 'CORE::push';">
    \@@

=end screen

Il carattere C<@> rappresenta una lista. Il backslash impone l'uso di un
I<riferimento> all'argomento corrispondente. Quindi, questo prototipo significa che C<push>
riceve un riferimento ad array e una lista di valori. Potreste scrivere la seguente funzione
C<miapush>:

=begin programlisting

    sub miapush (\@@)
    {
        my ($array, @resto) = @_;
        push @$array, @resto;
    }

=end programlisting

Altri caratteri usati nei prototipi sono C<$>, per forzare un argomento scalare, C<%> per
indicare un hash (usato spesso come riferimento) e C<&> per indicare un blocco di
codice. Vedete C<perldoc perlsub> per la documentazione completa.

=head2 Il Problema dei Prototipi

I prototipi modificano il modo in cui Perl fa il parsing del vostro codice e possono causare delle conversioni
di tipo. Non servono né a documentare il numero o il tipo degli argomenti delle funzioni,
né a mappare gli argomenti su parametri per nome.

Le coercizioni di tipo causate dai prototipi hanno comportamenti insidiosi, come quello di forzare il contesto scalare sugli
argomenti:

=begin programlisting

    sub uguaglianza_numerica($$)
    {
        my ($sinistro, $destro) = @_;
        return $sinistro == $destro;
    }

    my @num = 1 .. 10;

    say 'Sono uguali, qualunque cosa questo significhi!'
        if uguaglianza_numerica @num, 10;

=end programlisting

... ma funzionano solo con espressioni semplici:

=begin programlisting

    sub miapush(\@@);

    # errore di compilazione: prototipo non corrispondente
    # (assegnamento scalare dove ci si aspettava un array)
    miapush( my $elems = [], 1 .. 20 );

=end programlisting

Per fare il debug di questo errore, gli utenti di C<miapush> devono sapere che esiste un prototipo e
conoscere le limitazioni dei prototipi di array. Peggio ancora, errori come questo sono tra i più I<semplici>
tra quelli causati dai prototipi.

=head2 Usi Appropriati dei Prototipi

X<predefinite; funzioni; sovrascrittura>
X<direttive; C<subs>>
X<direttiva C<subs>>

Ci sono pochi casi in cui i vantaggi nell'uso dei prototipi superano i problemi, ma
tali casi esistono.

Par prima cosa, i prototipi vi permettono di sovrascrivere le funzioni native. Dovete anzitutto verificare se è possibile
sovrascrivere una funzione nativa esaminandone il prototipo con un semplice programma di test. Quindi,
usate la direttiva C<subs> per comunicare a Perl che intendete sovrascrivere una funzione nativa,
e infine dichiarate la vostra sovrascrittura con il prototipo appropriato:

=begin programlisting

    use subs 'push';

    sub push (\@@) { ... }

=end programlisting

Ricordate che la direttiva C<subs> è attiva per tutto il resto del I<file>,
indipendentemente dagli scope lessicali.

X<costanti>

La seconda ragione valida per usare i prototipi è per la definizione di costanti durante la compilazione. Quando
Perl si imbatte in una funzione dichiarata con un prototipo vuoto (I<non>
senza prototipo) I<e> tale funzione valuta a una singola espressione
costante, l'ottimizzatore sostituisce tutte le chiamate alla funzione con costanti:

=begin programlisting

    sub PI_GRECO () { 4 * atan2(1, 1) }

=end programlisting

Tutto il codice seguente usa il valore calcolato di pi greco al posto della
bareword C<PI_GRECO> o di una chiamata a C<PI_GRECO()>, in base allo scope e alla visibilità.

X<direttiva C<constant>>
X<direttive; C<constant>>
X<CPAN; C<Const::Fast>>

La direttiva nativa C<constant> gestisce questi dettagli al vostro posto. Il modulo
CPAN C<Const::Fast> crea delle costanti scalari che potete interpolare all'interno
di stringhe.

X<CPAN; C<Test::Exception>>
X<CPAN; C<Test::Fatal>>

Un uso ragionevole dei prototipi è quello di estendere la sintassi di Perl per operare su
funzioni anonime in forma di blocchi. Il modulo CPAN C<Test::Exception> sfrutta efficacemente
questa possibilità per fornire una interessante API con computazione ritardataN<Vedete anche
C<Test::Fatal>>. La sua funzione C<throws_ok()> riceve tre argomenti: un blocco di
codice da eseguire, un'espressione regolare di cui fare il match con la stringa dell'eccezione
e una descrizione opzionale del test:

=begin programlisting

    use Test::More tests => 1;
    use Test::Exception;

    throws_ok
        { my $nonoggetto; $nonoggetto->regala() }
        qr/Can't call method "regala" on an undefined/,
        'Un metodo chiamato su un invocante non definito deve fallire';

=end programlisting

La funzione esportata C<throws_ok()> ha il prototipo C<&$;$>. Il suo primo
argomento è un blocco che diventa una funzione anonima. Il secondo argomento
è uno scalare. Il terzo argomento è opzionale.

I lettori attenti avranno forse notato che manca la virgola dopo il blocco. Si tratta
di una idiosincrasia del parser Perl 5, che si aspetta un carattere di spaziatura dopo un blocco con
prototipo invece dell'operatore virgola. È un altro dei problemi della sintassi dei prototipi.

Potete usare C<throws_ok()> senza usare i prototipi:

=begin programlisting

    use Test::More tests => 1;
    use Test::Exception;

    throws_okB<(>
        B<sub> { my $nonoggetto; $nonoggetto->regala() }B<,>
        qr/Can't call method "regala" on an undefined/,
        'Un metodo chiamato su un invocante non definito deve fallire' B<)>;

=end programlisting

X<predefinite; funzioni; C<sort>>

Un ultimo caso di uso appropriato dei prototipi è quando definite una vostra funzione con nome da usare
con C<sort>N<Questo esempio è stato suggerito da Ben Tilly.>:

=begin programlisting

    sub ordina_per_lunghezza ($$)
    {
        my ($sinistro, $destro) = @_;
        return length($sinistro) <=> length($destro);
    }

    my @ordinato = sort ordina_per_lunghezza @nonordinato;

=end programlisting

Il prototipo C<$$> forza Perl a passare le coppie considerate da sort nell'array C<@_>. La documentazione
di C<sort> segnala che questo metodo è un po' meno veloce di usare le variabili globali di package
C<$a> e C<$b>, ma spesso l'uso di variabili lessicali compensa ampiamente la riduzione di velocità.
