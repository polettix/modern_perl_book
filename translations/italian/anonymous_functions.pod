=head1 Funzioni Anonime

Z<anonymous_functions>

X<funzioni; anonime>

Una I<funzione anonima> è una funzione senza nome. Per il resto si comporta
esattamente come una funzione con nome--potete invocarla, passarle degli argomenti, farle
restituire dei valori e copiare riferimenti ad essa. Tuttavia, l'unico modo per potervi accedere
è attraverso un riferimento (L<function_references>).

X<funzioni; tabella di dispatch>
X<idiomi; tabella di dispatch>
X<tabella di dispatch>

Un idioma comune in Perl 5 noto come I<tabella di dispatch> usa gli hash per associare
i valori di un input a dei comportamenti specifici:

=begin programlisting

    my %dispatch =
    (
        piu  => \&somma_due_numeri,
        meno => \&sottrai_due_numeri,
        per  => \&moltiplica_due_numeri,
    );

    sub somma_due_numeri      { $_[0] + $_[1] }
    sub sottrai_due_numeri    { $_[0] - $_[1] }
    sub moltiplica_due_numeri { $_[0] * $_[1] }

    sub dispatch
    {
        my ($sinistro, $op, $destro) = @_;

        return unless exists $dispatch{ $op };

        return $dispatch{ $op }->( $sinistro, $destro );
    }

=end programlisting

La funzione C<dispatch()> riceve argomenti nella forma C<(2, 'per', 2)> e
restituisce il risultato dell'operazione.

=head2 Dichiarazione di Funzioni Anonime

X<predefinite; parole chiave; C<sub>>

L'istruzione nativa C<sub> usata senza un nome crea e restituisce il riferimento a una funzione
anonima. Potete usare questo riferimento ovunque è ammissibile usare un riferimento a
una funzione con nome, per esempio per dichiarare le funzioni di una tabella di dispatch direttamente:

=begin programlisting

    my %dispatch =
    (
        piu     => sub { $_[0]  + $_[1] },
        meno    => sub { $_[0]  - $_[1] },
        per     => sub { $_[0]  * $_[1] },
        diviso  => sub { $_[0]  / $_[1] },
        elevato => sub { $_[0] ** $_[1] },
    );

=end programlisting

=begin tip Dispatch Difensivo

Questa tabella di dispatch presenta un certo grado di sicurezza; soltanto le funzioni mappate
nella tabella stessa sono disponibili per essere chiamate dagli utenti. Se la vostra funzione di dispatch
assumesse ciecamente che la stringa passata come nome dell'operatore corrisponde
direttamente al nome di una funzione da chiamare, un utente malintenzionato potrebbe
chiamare qualunque funzione in qualunque namespace passando
C<'Funzioni::Interne::funzione_maligna'>.

=end tip

Potreste anche vedere delle funzioni anonime passate come argomenti ad altre funzioni:

=begin programlisting

    sub invoca_funzione__anonima
    {
        my $funz = shift;
        return $funz->( @_ );
    }

    sub funzione_con_nome
    {
        say 'Sono una funzione con nome!';
    }

    invoca_funzione__anonima( \&named_func );
    invoca_funzione__anonima( B<sub { say 'Indovina chi sono!' }> );

=end programlisting

=head2 Nomi di Funzioni Anonime

X<funzioni anonime; nomi>

X<CPAN; C<Sub::Identify>>

Dato un riferimento a una funzione, è possibile determinare se la funzione ha
un nome oppure è anonima usando l'introspezioneN<oppure C<sub_name> del modulo CPAN C<Sub::Identify>.>:

=begin programlisting

    package MostraChiamante;

    sub mostra_chiamante
    {
        my ($package, $file, $linea, $sub) = caller(1);
        say "Chiamata da $sub in $package:$file:$linea";
    }

    sub main
    {
        my $sub_anonima = sub { mostra_chiamante() };
        mostra_chiamante();
        $sub_anonima->();
    }

    main();

=end programlisting

Il risultato potrebbe cogliervi un po' di sorpresa:

    Chiamata da MostraChiamante::B<main>
             in MostraChiamante:chiamante_anonimo.pl:20
    Chiamata da MostraChiamante::B<__ANON__>
             in MostraChiamante::chiamante_anonimo.pl:17

X<CPAN; C<Sub::Name>>

La stringa C<__ANON__> nella seconda linea dell'output mostra che la funzione anonima
non ha un nome che Perl possa identificare. Questo può rendere il debugging più complicato.
La funzione C<subname()> del modulo CPAN C<Sub::Name> vi permette di associare dei nomi alle
funzioni anonime:

=begin programlisting

    use Sub::Name;
    use Sub::Identify 'sub_name';

    my $anonima  = sub {};
    say sub_name( $anonima );

    my $con_nome = subname( 'pseudo-anonima', $anonima );
    say sub_name( $con_nome );
    say sub_name( $anonima );

    say sub_name( sub {} );

=end programlisting

Questo programma produce l'output:

    __ANON__
    pseudo-anonima
    pseudo-anonima
    __ANON__

Notate che entrambi i riferimenti sono relativi alla stessa funzione anonima sottostante.
Chiamando C<subname()> con un riferimento a una funzione anonima, il nome di tale funzione viene
modificato in modo tale che tutti gli altri riferimenti ad essa vedono il nuovo nome.

=head2 Funzioni Anonime Implicite

X<funzioni anonime; implicite>

X<CPAN; C<Test::Fatal>>

Perl 5 permette la dichiarazione implicita di funzioni anonime attraverso l'uso
dei prototipi (L<prototypes>). Sebbene questa funzionalità ufficialmente sia presente per permettere
ai programmatori di definire una propria sintassi come fanno C<map> e C<eval>, un
esempio interessante è l'uso di funzioni I<ritardate> che non sembrano
funzioni. 

Considerate il modulo CPAN C<Test::Fatal>, che riceve una funzione anonima come primo argomento della sua
funzione C<exception>:

=begin programlisting

    use Test::More;
    use Test::Fatal;

    my $muore = exception { die 'Sto morendo!' };
    my $vive  = exception { 1 + 1 };

    like( $muore, qr/Sto morendo/, 'die() causa la morte'   );
    is(   $vive,  undef,           'la somma lascia vivere' );

    done_testing();

=end programlisting

Potete riscrivere questo codice in modo più verboso:

=begin programlisting

    my $muore = exception( sub { die 'Sto morendo!' } );
    my $vive  = exception( sub { 1 + 1 } );

=end programlisting

...o passare riferimenti a funzioni con nome:

=begin programlisting

    B<sub muore { die 'Sto morendo!' }>
    B<sub vive  { 1 + 1 }>

    my $muore = exception \&muore;
    my $vive  = exception \&vive;

    like( $muore, qr/Sto morendo/, 'die() causa la morte'   );
    is(   $vive,  undef,           'la somma lascia vivere' );

=end programlisting

... ma I<non> potete invece passare tali riferimenti come scalari:

=begin programlisting

    B<my $rif_a_muore = \&muore;>
    B<my $rif_a_vive  = \&vive;>

    # BUG: non funziona
    my $muore   = exception $rif_a_muore;
    my $vive    = exception $rif_a_vive;

=end programlisting

... perché il prototipo modifica il modo in cui il parser di Perl 5 interpreta questo
codice. Non potendo essere sicuro al 100% di I<che cosa> conterranno C<$muore> e C<$vive>,
il parser solleva un'eccezione.

=begin screen

    Type of arg 1 to Test::Fatal::exception
       must be block or sub {} (not private variable)

=end screen

Ricordate anche che una funzione che riceve una funzione anonima come il primo di diversi argomenti
non ammette la virgola dopo il blocco della funzione:

=begin programlisting

    use Test::More;
    use Test::Fatal 'dies_ok';

    dies_ok { die 'La Forza sia con te!' }
            'Non mi piacciono le citazioni dai film';

=end programlisting

Questo piccolo neo, dovuto a un'idiosincrasia del parser di Perl 5, può occasionalmente causare confusione nell'uso di una sintassi altrimenti utile.
La pulizia sintattica che deriva dalla promozione di blocchi isolati a funzioni anonime può essere vantaggiosa, ma usatela con parsimonia e documentate
la vostra API con cura.
