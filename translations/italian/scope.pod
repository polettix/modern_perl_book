=head1 Scope

Z<scope>

X<scope>
X<encapsulation>

In Perl il concetto di I<scope> si riferisce al tempo di vita e alla visibilità delle entità con un nome.
Ogni entità Perl con un nome (una variabile, una funzione) ha uno scope. Il meccanismo di scope
favorisce l'I<incapsulamento>--che consiste nel mantenere insieme i concetti collegati ed
evitare che essi fuoriescano dall'ambito in cui il programmtore li ha confinati.

=head2 Scope Lessicale

Z<lexical_scope>

X<lexical scope>
X<scope; lexical>

Lo I<scope lessicale> è uno scope visibile mente I<leggete> un programma. Il compilatore Perl
risolve questo tipo di scope durante la compilazione. Un blocco delimitato da parentesi
graffe crea un nuovo scope, sia che si tratti di un blocco a se stante, di un blocco di un costrutto
di ciclo, del blocco di una dichiarazione C<sub>, di un blocco C<eval> o di qualunque altro blocco
purchè non sia di quotatura.

X<variables; lexical>

Lo cope lessicale determina la visibilità delle variabili dichiarate con
C<my>--le variabili dette I<lessicali>. Una variabile lessicale dichiarata in uno scope è
visibile in quello scope e negli scope nidificati, ma è invisibile agli scope
dello stesso livello e a quelli esterni:

=begin programlisting

    # scope lessicale esterno
    {
        package Robot::Maggiordomo

        # scope lessicale interno
        my $livello_batteria;

        sub pulisci_stanza
        {
            # scope ancora piu' interno
            my $timer;

            do {
                # scope lessicale ancora piu' interno
                my $paletta;
                ...
            } while (@_);

            for (@_)
            {
                # altro scope lessicale ancora piu' interno
                my $straccio;
                ...
            }
        }
    }

=end programlisting

... C<$livello_batteria> è visibile in tutti e quattro gli scope. C<$timer> è visibile nel
metodo, nel blocco C<do> e nel ciclo C<for>.  C<$paletta> è visibile soltanto
nel blocco C<do> e C<$straccio> è visibile soltanto nel ciclo C<for>.

X<lexical shadowing>
X<scope; lexical shadowing>

Dichiarare un lessicale in uno scope con lo stesso nome di un lessicale in uno
scope più esterno nasconde, o I<oscura>, il lessicale esterno nello scope interno.
Spesso, è proprio ciò che desiderate:

=begin programlisting

    my $nome = 'Jacob';

    {
        my $nome = 'Edward';
        say $nome;
    }

    say $nome;

=end programlisting

=begin tip Name Collisions

L'oscuramento di lessicali può essere accidentale. Limitate lo scope delle variabili e la
nidificazione degli scope per ridurre questo rischio.

=end tip

Questo programma stampa C<Edward> e quindi C<Jacob>N<Famigliari dell'autore, non
i noti vampiri.>, sebbene ridichiarare una variabile lessicale con lo stesso nome e lo stesso
tipo I<nello stesso scope lessicale> produca un messaggio di warning. La possibilità di oscurare un
lessicale è una funzionalità dell'incapsulamento.

Ci sono alcune sottigliezze relative alle dichiarazioni di lessicali, per esempio quando una variabile lessicale viene usata
come variabile iteratore di un ciclo C<for>. La sua dichiarazione è al di fuori del
blocco del ciclo, ma il suo scope è all'I<interno> del blocco stesso:

=begin programlisting

    my $gatto = 'Brad';

    for my $gatto (qw( Jack Daisy Petunia Tuxedo Choco ))
    {
        say "L'iteratore gatto ha il valore $gatto";
    }

    say "Il gatto esterno ha sempre valore $gatto";

=end programlisting

X<lexical topic>
X<topic; lexical>

Analogamente, C<given> (L<given_when>) crea un I<topic lessicale> (come C<my $_>)
nel proprio blocco:

=begin programlisting

    $_ = 'fuori';

    given ('dentro')
    {
        say;
        $_ = 'questo assegnamento e' inutile';
    }

    say;

=end programlisting

... in modo che l'uscita dal blocco ripristina il valore precedente di C<$_>.

Le funzioni--sia con nome che anonime--forniscono uno scope lessicale al proprio corpo. Grazie a questo
è possibile definire le closure (L<closures>).

=head2 Lo Scope Our

Z<our>
X<builtins; C<our>>
X<packages; scope>
X<scope; packages>

Dentro a un certo scope, potete dichiarare un alias a una variabile di package con l'istruzione C<our>.
Come C<my>, C<our> impone uno scope lessicale all'alias. Il nome
fully-qualified è disponibile ovunque, ma l'alias lessicale è visibile
solo all'interno dello scope.

C<our> è particolarmente utile per le variabili di package globali come C<$VERSION> e
C<$AUTOLOAD>.

=head2 Scope Dinamico

Z<dynamic_scope>

X<dynamic scope>
X<scope; dynamic>

Lo scope dinamico è simile allo scope lessicale per ciò che riguarda le sue regole di visibilità, ma la ricerca dei nomi, invece di
procedere dagli scope più interni a quelli più esterni durante la compilazione, procede all'indietro nei contesti
di chiamata. Anche se un variabile di package globale è I<visibile> in tutti gli
scope, il suo I<valore> cambia a seconda della sua C<local>izzazione e relativo assegnamento:

=begin programlisting

    our $scope;

    sub interno
    {
        say $scope;
    }

    sub main
    {
        say $scope;
        local $scope = 'scope del main()';
        intermedio();
    }

    sub intermedio
    {
        say $scope;
        interno();
    }

    $scope = 'scope esterno';
    main();
    say $scope;

=end programlisting

Il programma inizia con la dichiarazione di una variabile C<our>, C<$scope>, e di tre
funzioni. Quindi, fa un assegnamento a C<$scope> e chiama la funzione C<main()>.

X<builtins; C<local>>

Dentro a C<main()>, il programma stampa il valore corrente di C<$scope>, C<scope esterno>,
e poi C<local>izza la variabile. Questo cambia la visibilità del simbolo
nello scope lessicale corrente I<così come> in ogni funzione chiamata dallo scope lessicale
I<corrente>. Quindi, C<$scope> contiene C<scope del main()> sia nel corpo
di C<intermedio()> che di C<interno()>.  Quando C<main()> termina perchè il controllo di
flusso raggiunge la fine del suo blocco, Perl ripristina il valore originale
della variabile C<$scope> C<local>izzata. Quindi, l'ultimo C<say> stampa di nuovo C<scope esterno>.

X<lexicals; pads>
X<lexpads>
X<symbol tables>

Le variabili di package e quelle lessicali hanno regole di visibilità e meccanismi di
memorizzazione diversi nel Perl. Ogni scope che contiene variabili lessicali
ha una speciale struttura dati chiamata I<pad lessicale> o I<lexpad> che può
memorizzare i valori delle variabili lessicali incluse nello scope. Ogni volta che il controllo di flusso
entra in uno di questi scope, Perl crea un nuovo lexpad per i valori delle variabili lessicali
in quella particolare chiamata. Questo determina la corretta esecuzione delle funzioni,
specialmente nelle chiamate ricorsive (L<recursion>).

Ogni package ha un'unica I<tabella dei simboli> che contiene sia le variabili di package che
le funzioni con nome. L'importazione (L<importing>) si basa sull'ispezione e la
manipolazione di tale tabella dei simboli. Lo stesso vale per C<local>. Potete C<local>izzare
solo le variabili globali e di package--e non le variabili lessicali.

X<C<$/>>
X<magic variables; C<$/>>
X<C<$!>>
X<magic variables; C<$!>>
X<C<$@>>
X<magic variables; C<$@>>
X<C<$|>>
X<magic variables; C<$|>>

C<local> è particolarmente utile con le variabili predefinite. Per esempio, il
separatore di record in input C<$/> determina quanti dati vengono letti da un filehandle da un'operazione C<readline>.
C<$!>, la variabile di errore di sistema, contiene il numero di errore
della chiamata di sistema più recente. C<$@>, la variabile Perl di errore di C<eval>,
contiene l'errore generato dalla operazione C<eval> più recente. C<$|>, la variabile di flush
automatico, determina se Perl deve eseguire il flush del filehandle corrente impostato con C<select>
dopo ogni operazione di scrittura.

C<local>izzare queste variabili in uno scope il più ristretto possibile limita gli effetti delle vostre
modifiche. In questo modo, potete evitare strani comportamenti in altre parti del vostro codice.

=head2 Scope di Variabili State

Z<state_scope>

X<C<state>>
X<builtins; C<state>>
X<scope; state>

Perl 5.10 ha aggiunto un nuovo scope per supportare l'istruzione nativa C<state>. Lo scope di state
è simile allo scope lessicale per quanto riguarda la visibilità, ma impone un'unica
initializzazione e la persistenza del valore:

=begin programlisting

    sub contatore
    {
        B<state> $cont = 1;
        return $cont++;
    }

    say contatore();
    say contatore();
    say contatore();

=end programlisting

Nella prima chiamata a C<contatore>, Perl esegue l'unica inizializzazione di
C<$cont>. Nelle chiamate successive, C<$cont> mantiene il suo valore precedente. Questo
programma stampa quindi C<1>, C<2> e C<3>. Se cambiate C<state> in C<my> il programma
stamperà C<1>, C<1> e C<1>.

Potete anche usare un'espressione per impostare il valore iniziale di una variabile C<state>:

=begin programlisting

    sub countatore
    {
        state $cont = shift;
        return $cont++;
    }

    say contatore(B<2>);
    say contatore(B<4>);
    say contatore(B<6>);

=end programlisting

Sebbene a prima vista si potrebbe pensare che l'output del codice sia
C<2>, C<4>, and C<6>, tale output è invece C<2>, C<3>, and C<4>. La prima
chiamata alla funzione C<contatore> inizializza la variabile C<$cont>. Nelle chiamate successive
la parte di inizializzazione non viene più eseguita.

C<state> può essere utile sia per impostare un valore di default che per predisporre una cache,
ma se la usate fate attenzione ad avere compreso il suo comportamento con le inizializzazioni:

=begin programlisting

    sub contatore
    {
        state $cont = shift;
        say 'Il secondo arg ha valore: ', shift;
        return $cont++;
    }

    say contatore(2, 'due');
    say contatore(4, 'quattro');
    say contatore(6, 'sei');

=end programlisting

In questo programma il contatore stampa C<2>, C<3> e C<4> come vi aspettate, ma i
valori del presunto secondo argomento nelle chiamate a C<contatore()> sono C<due>,
C<4> e C<6>--dato che lo C<shift> del primo argumento ha luogo soltanto nella
prima chiamata a C<contatore()>. Per evitare questo problema potete cambiare l'interfaccia di C<contatore()>, 
oppure gestirlo nel modo seguente:

=begin programlisting

    sub contatore
    {
        my ($valore_iniziale, $testo) = @_;

        state $cont = $valore_iniziale;
        say "Il secondo arg ha valore: $testo";
        return $cont++;
    }

    say contatore(2, 'due');
    say contatore(4, 'quattro');
    say contatore(6, 'sei');

=end programlisting
