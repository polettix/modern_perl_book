=head1 Il Package UNIVERSAL

Z<universal>

X<C<UNIVERSAL>>

Il package C<UNIVERSAL> predefinito in Perl 5 è l'antenato comune di tutti gli altri package--in
un senso orientato agli oggetti (L<moose>). C<UNIVERSAL> fornisce alcuni metodi che i suoi
derivati possono ereditare o sovrascrivere.

=head2 Il Metodo isa()

X<C<UNIVERSAL::isa>>
X<C<isa()>>

Il metodo C<isa()> riceve una stringa contenente il nome di una classe o di un tipo
predefinito. Potete invocarlo come metodo di classe o di istanza su un
oggetto.  Restituisce un valore vero se il suo invocante è la classe
data o una sua derivata, oppure se il suo invocante è un riferimento blessed al tipo dato.

Dato un oggetto C<$pepe> (un riferimento a hash su cui si è fatto il bless alla classe C<Scimmia>,
che deriva dalla classe C<Mammifero>):

=begin programlisting

    say $pepe->isa(   'Monkey'    );  # stampa 1
    say $pepe->isa(   'Mammal'    );  # stampa 1
    say $pepe->isa(   'HASH'      );  # stampa 1
    say Scimmia->isa( 'Mammifero' );  # stampa 1

    say $pepper->isa( 'Delfino'   );  # stampa 0
    say $pepper->isa( 'ARRAY'     );  # stampa 0
    say Monkey->isa(  'HASH'      );  # stampa 0

=end programlisting

X<C<SCALAR>>
X<C<ARRAY>>
X<C<HASH>>
X<C<Regexp>>
X<C<IO>>
X<C<CODE>>

I tipi predefiniti di Perl 5 sono C<SCALAR>, C<ARRAY>, C<HASH>, C<Regexp>, C<IO> e
C<CODE>.

X<CPAN; C<Test::MockObject>>
X<CPAN; C<Test::MockModule>>

Ogni classe può sovrascrivere C<isa()>. Ciò può essere utile quando si usano oggetti emulati
(vedete C<Test::MockObject> e C<Test::MockModule> su CPAN) e con il
codice che non usa i ruoli (L<roles>). Tenete presente che ciascuna classe che I<sovrascrive>
C<isa()> deve avere in genere una buona ragione per farlo.

=head2 Il Metodo can()

X<C<UNIVERSAL::can>>
X<C<can()>>

Il metodo C<can()> riceve una stringa contenente il nome di un metodo. Restituisce
un riferimento alla funzione che implementa tale metodo, se esso esiste.
Altrimenti, restituisce un valore falso. Potete chiamarlo su una classe, su un oggetto
o sul nome di un package. In quest'ultimo caso, viene restituito un riferimento a una
funzione anzichè a un metodoN<... anche se non potete distinguerli, dato tale
riferimento.>.

=begin tip Questa Classe Esiste?

Anche se C<UNIVERSAL::isa()> e C<UNIVERSAL::can()> sono metodi
(L<method_sub_equivalence>), potete I<tranquillamente> usare quest'ultimo come funzione
allo scopo di determinare se una classe esiste in Perl 5.  Se C<UNIVERSAL::can(
$nomeclasse, 'can' )> restituisce un valore vero, significa che qualcuno da qualche parte ha definito una
classe di nome C<$nomeclasse>. Tale classe potrebbe non essere utilizzabile, ma esiste.

=end tip

Data una classe di nome C<ScimmiaRagno> con un metodo di nome C<strilla>, potete ottenere un
riferimento al metodo con:

=begin programlisting

    if (my $met = ScimmiaRagno->can( 'strilla' )) {...}

    if (my $met = $sm->can( 'strilla' )
    {
        $sm->$met();
    }

=end programlisting

X<builtin; C<require>>
X<CPAN; C<UNIVERSAL::require>>

Usate C<can()> per testare se un package implementa una specifica funzione o metodo:

=begin programlisting

    use Class::Load;

    die "Caricamento di $modulo non riuscito!"
        unless load_class( $modulo );

    if (my $registra = $modulo->can( 'registra' ))
    {
        $registra->();
    }

=end programlisting

=begin tip C<Module::Pluggable>

X<CPAN; C<Class::Load>>
X<CPAN; C<Module::Pluggable>>

Mentre il modulo CPAN C<Class::Load> semplifica il caricamento di classi per
nome--evitando il balletto dei C<require>--C<Module::Pluggable> vi solleva
da gran parte del lavoro necessario per creare e gestire sistemi plugin. Imparate a usare entrambe le
distribuzioni.

=end tip

=head2 Il Metodo VERSION()

X<C<UNIVERSAL::VERSION>>
X<C<VERSION()>>

Il metodo C<VERSION()> restituisce il valore della variabile C<$VERSION> per il package o la classe
appropriata. Se fornite un numero di versione come parametro opzionale,
il metodo solleva un'eccezione quando la variabile
C<$VERSION> considerata non è uguale o maggiore al parametro.

Dato un modulo C<ScimmiaUrlatrice> con versione C<1.23>:

=begin programlisting

    say ScimmiaUrlatrice->VERSION();    # stampa 1.23
    say $su->VERSION();                 # stampa 1.23
    say $su->VERSION( 0.0  );           # stampa 1.23
    say $su->VERSION( 1.23 );           # stampa 1.23
    say $su->VERSION( 2.0  );           # eccezione!

=end programlisting

Non ci sono molte ragioni validi per sovrascrivere C<VERSION()>.

=head2 Il Metodo DOES()

X<C<UNIVERSAL::DOES>>
X<C<DOES()>>

Il metodo C<DOES()> è stato introdotto in Perl 5.10.0. Il suo scopo è quello di supportare l'uso dei
ruoli (L<roles>) nei programmi. Passategli un invocante e il nome di un ruolo, e
il metodo restituirà  vero se la classe appropriata ha in qualche modo quel
ruolo--attraverso l'ereditarietà, la delega, la composizione, l'applicazione di ruolo
o un qualunque altro meccanismo.

L'implementazione di default di C<DOES()> si riconduce a C<isa()>, in quanto
l'ereditarietà è uno dei meccanismi con cui una classe assume un ruolo. Data una scimmia
C<Cappuccina>:

=begin programlisting

    say Cappuccina->DOES( 'Scimmia'      );  # stampa 1
    say $cappy->DOES(     'Scimmia'      );  # stampa 1
    say Cappuccina->DOES( 'Invertebrato' );  # stampa 0

=end programlisting

Sovrascrivete C<DOES()> se fornite manualmente un ruolo o un altro comportamento
allomorfico.

=head2 Estendere UNIVERSAL

Potreste essere tentati di memorizzare altri metodi in C<UNIVERSAL> per renderli disponibili a
tutte le altre classi e oggetti Perl 5. Resistete a questa tentazione; un comportamento globale
può avere effetti collaterali sottili proprio perchè non è vincolato.

X<CPAN; C<UNIVERSAL::ref>>
X<CPAN; C<UNIVERSAL::isa>>
X<CPAN; C<UNIVERSAL::can>>
X<CPAN; C<Perl::Critic>>

Detto questo, talvolta può essere accettabile abusare di C<UNIVERSAL> a scopo di I<debugging> o per
correggere un comportamento di default improprio. Per esempio, la distribuzione
C<UNIVERSAL::ref> di Joshua ben Jore rende usabile l'operatore C<ref()>
che normalmente è inutile. Le distribuzioni C<UNIVERSAL::can> e C<UNIVERSAL::isa> possono aiutarvi
a fare il debug di errori di anti-polimorfismo (L<method_sub_equivalence>).
C<Perl::Critic> può rilevare questi ed altri problemi.

Al di fuori di codice molto controllato e di esigenze pragmatiche molto specifiche,
non c'è ragione di aggiungere direttamente del codice a C<UNIVERSAL>. Quasi sempre
ci sono alternative di progettazione migliori.
