=head1 Idiomi

Z<idioms>

Ogni linguaggio--di programmazione o naturale--ha dei pattern comuni di espressione, o
I<idiomi>. La Terra gira, ma noi parliamo della nascita e tramonto del Sole. Tutti noi ci
vantiamo delle trovate intelligenti e ci vergognamo di quelle stupide quando buttiamo fuori il nostro codice.

Gli idiomi Perl non sono nè funzionalità del linguaggio nè tecniche di progettazione. Sono piuttosto
manierismi e meccanismi che, presi tutti insieme, danno al vostro codice un accento
"alla Perl". Non è necessario che li usiate, ma sappiate che sono dei punti di forza di Perl.

=head2 L'Oggetto C<$self>

X<C<$self>>
X<variabili; C<$self>>
X<oggetti; invocante>
X<metodi; invocante>
X<CPAN; C<MooseX::Method::Signatures>>

Il sistema a oggetti di Perl 5 (L<moose>) tratta l'invocante di un metodo come un
semplice parametro. Indipendentemente dal fatto che invochiate un metodo di classe o di istanza, il
primo elemento di C<@_> è sempre l'invocante del metodo. La maggior parte del codice Perl
5 usa per convenzione C<$class> come nome dell'invocante di un metodo di classe e C<$self> come
nome dell'oggetto invocante. Questa convenzione è talmente consolidata che alcune utili
estensioni come C<MooseX::Method::Signatures> assumono che usiate C<$self>
come nome degli oggetti invocanti.

=head2 Parametri per Nome

X<parametri; per nome>
X<argomenti; per nome>
X<CPAN; C<segnature>>
X<CPAN; C<MooseX::MultiMethods>>

L'elaborazione di liste è un componente fondamentale della valutazione di espressioni in Perl.
La possibilità che hanno i programmatori Perl di concatenare espressioni che valutano a
liste di lunghezza variabile fornisce innumerevoli opportunità di manipolare efficacemente
i dati.

Anche se la semplicità del passaggio di argomenti in Perl (ogni cosa viene appiattita in C<@_>) risulta
talvolta persino eccessiva, assegnando da C<@_> in contesto lista potete
spacchettare i parametri per nome come coppie. L'operatore fat comma (L<declaring_hashes>)
trasforma in modo ovvio una normale lista in una lista di coppie di argomenti:

=begin programlisting

    prepara_coppa_di_gelato(
        panna_montata => 1,
        praline       => 1,
        banana        => 0,
        gelato        => 'menta e cioccolato',
    );

=end programlisting

La funzione chiamata può spacchettare questi parametri in un hash e trattare tale hash come
un singolo argomento:

=begin programlisting

    sub prepara_coppa_di_gelato
    {
        B<my %arg   = @_;>
        my $dessert = compra_gelato( $arg{gelato} );

        ...
    }

=end programlisting

=begin tip Hash oppure Riferimento ad Hash?

I<Perl Best Practices> suggerisce di passare dei riferimenti ad hash anzichè degli hash. Questo permette
a Perl di effettuare la validazione del riferimento ad hash nel chiamante.

=end tip

Quetsa tecnica funziona bene con C<import()> (L<importing>) e altri metodi;
elaborate tutti i parametri che desiderate prima di inghiottire tutto ciò che resta in un
hash:

=begin programlisting

    sub import
    {
        B<my ($class, %arg)  = @_;>
        my $package_chiamante = caller();

        ...
    }

=end programlisting

=head2 La Trasformata di Schwartz

Z<schwartzian_transform>

X<trasformata di Schwartz>
X<C<map>; trasformata di Schwartz>
X<C<sort>; trasformata di Schwartz>
X<builtin; C<map>>
X<builtin; C<sort>>

La I<trasformata di Schwartz> è un'elegante dimostrazione della pervasività della gestione di liste in Perl
in quanto è un idioma preso agevolmente a prestito dalla famiglia di linguaggi Lisp.

Supponete di avere un hash che associa i nomi dei vostri colleghi con le loro
estensioni telefoniche:

=begin programlisting

    my %estensioni =
    (
        '001' => 'Anna',
        '002' => 'Walter',
        '003' => 'Gerardo',
        '005' => 'Rudy',
        '007' => 'Brenda',
        '008' => 'Patrizio',
        '011' => 'Luca',
        '012' => 'Lidia',
        '017' => 'Cristina',
        '020' => 'Maurizio',
        '023' => 'Marco',
        '024' => 'Andrea',
        '052' => 'Giorgia',
        '088' => 'Nicola',
    );

=end programlisting

=begin tip Regole di Quotatura delle Chiavi di Hash

La quotatura delle chiavi di hash con l'operatore fat comma funziona soltanto su entità interpretabili come bareword;
le chiavi di questo esempio sono invece numeri--in particolare numeri ottali, poiché iniziano con lo zero. Quasi
tutti cascano in questo tranello.

=end tip

Per ordinare questa lista per nome in ordine alfabetico, dovete ordinare l'hash in base ai suoi valori
anzichè in base alle sue chiavi. Ordinare i valori è facile:

=begin programlisting

    my @nomi_ordinati = sort values %estensioni;

=end programlisting

... ma dovete fare un ulteriore passo per preservare l'associazione tra nomi ed
estensioni, e qui entra in gioco la trasformata di Schwartz. Per prima cosa, convertite l'hash in una
lista di strutture dati facili da ordinare--in questo caso, array anonimi
di due elementi:

=begin programlisting

    my @coppie = map  { [ $_, $estensioni{$_} ] }
                 keys %estensioni;

=end programlisting

C<sort> riceve tale lista di array anonimi e confronta i loro secondi elementi
(i nomi) come stringhe:

=begin programlisting

    my @coppie_ordinate = sort { $a->[1] cmp $b->[1] }
                          @coppie;

=end programlisting

X<C<$a>>
X<C<$b>>
X<builtin; C<sort>>

Il blocco fornito a C<sort> riceve i suoi argomenti in due variabili di package
(L<scope>) C<$a> e C<$b>N<Vedete C<perldoc -f sort> per una esaustiva
discussione delle implicazioni di questa scelta degli scope.>. Il blocco di C<sort> prende due
argomenti per volta; il primo diventa il contenuto di C<$a> e il secondo
il contenuto di C<$b>. Se C<$a> deve precedere C<$b> nel risultato, il
blocco restituisce -1. Se i due valori sono equivalenti per quanto riguarda l'ordinamento,
il blocco restituisce 0. Infine, se C<$a> deve seguire C<$b> nel
risultato, il blocco restituisce 1. Qualunque altro valore di ritorno è considerato un errore.

=begin tip Conosci i Tuoi Dati

Invertire un hash I<sul posto> funziona se non avete colleghi con lo stesso nome. I dati del nostro
esempio non presentano problemi, ma il vostro codice deve difendervi da questa eventualità.

=end tip

X<operatori; C<cmp>>
X<< operatori; C<< <=> >> >>

L'operatore C<cmp> effettua confronti tra stringhe mentre l'operatore C<< <=> >> effettua 
confronti numerici.

Una seconda operazione C<map> su C<@coppie_ordinate> converte la struttura dati in una forma
più usabile:

=begin programlisting

    my @est_formattate = map { "$_->[1], est. $_->[0]" }
                         @coppie_ordinate;

=end programlisting

... e finalmente potete stampare il risultato:

=begin programlisting

    say for @est_formattate;

=end programlisting

La trasformata di Schwartz sfrutta  la pervasività della gestione di liste in Perl
per evitare l'uso delle variabili temporanee. La combinazione risultante è:

=begin programlisting

    say for
        map  { " $_->[1], est. $_->[0]"          }
        sort {   $a->[1] cmp   $b->[1]           }
        map  { [ $_      =>    $estensioni{$_} ] }
            keys %estensioni;

=end programlisting

Leggete l'espressione da destra verso sinistra, nell'ordine di valuazione. Per ciascuna
chiave dell'hash delle estensioni, viene creato un array anonimo di due elementi contenente la chiave
e il corrispondente valore nell'hash. Tale lista di array anonimi viene ordinata in base ai secondi
elementi, ovvero ai valori dell'hash. Infine per ciascuno di questi array ordinati viene generata una stringa di output
nel formato opportuno.

La cascata C<map>-C<sort>-C<map> della trasformata di Schwartz converte una struttura dati
in una forma più facile da ordinare e quindi in una terza forma.

Mentre l'esempio di ordinamento descritto è semplice, considerate il caso in cui dovete calcolare
hash crittografici per grandi file. La trasformata di Schwartz è particolarmente vantaggiosa
poiché fa il caching dei risultati delle computazioni costose, eseguendole una sola volta
nel C<map> più a destra.

=head2 Slurp Semplificato di File

Z<easy_file_slurping>

X<builtin; C<local>>
X<C<$/>>
X<file; slurping>
X<variabili globali; C<$/>>

C<local> è fondamentale per gestire le variabili globali predefinite di Perl 5. Dovete
aver compreso bene gli scope (L<scope>) per usare efficacemente C<local>--ma in tal caso potete
usere degli scope brevi e leggeri in modi interessanti. Per esempio, per fare lo slurp
di file in uno scalare in un'unica espressione:

=begin programlisting

    my $file = do { local $/ = <$fh> };

    # oppure
    my $file = do { local $/; <$fh> };

    # oppure
    my $file; { local $/; $file = <$fh> };

=end programlisting

C<$/> è il separatore dei record di input. Quando viene C<local>izzato, il suo valore viene impostato a
C<undef> fino al suo assegnmento. Tale C<local>izzazione ha luogo I<prima>
dell'assegnmento e, dato che il valore del separatore non è definito, Perl non ha problemi a leggere
l'intero contenuto del filehandle in una volta e ad assegnare il suo valore a C<$/>.
Poiché il valore di un blocco C<do> è quello dell'ultima espressione valutata
al suo interno, n questo caso il blocco valuta al valore dell'assegnamento, ovvero il contenuto
del file. Sebbene al termine del blocco il valore di C<$/> venga immediatamente ripristinato al suo stato precedente, 
il valore finale di C<$file> sarà il contenuto del file.

Nel secondo esempio il blocco non contiene assegnamenti e restituisce semplicemente la singola linea
letta dal filehandle.

Il terzo esempio evita una seconda copia della stringa che rappresenta il contenuto
del file; non è elegante come gli altri, ma usa una quantità minore di memoria.

=begin tip C<File::Slurp>

X<CPAN; C<File::Slurp>>

Questo utile esempio è sicuramente esasperante per le persone che non comprendono a fondo sia C<local> che gli scope.
Il modulo CPAN C<File::Slurp> è una buona
alternativa e spesso è anche più veloce.

=end tip

=head2 Gestire il Main

Perl no ha una sintassi speciale per la creazione delle chiusure (L<closures>); può quindi succedere che
facciate involontariamente la chiusura di una variabile lessicale. Molti programmi impostano
svariate variabili lessicali nello scope del file prima di trasferire l'elaborazione ad altre
funzioni. Potreste essere tentati di usare queste variabili direttamente, anzichè passare e ricevere
i loro valori dalle funzioni, specialmente quando il programma cresce di dimensioni.
Sfortunatamente, in questo modo i programmi diventano dipendenti da sottigliezze riguardanti ciò che succede
durante il processo di compilazione di Perl 5; una variabile che I<credevate> di
inizializzare subito ad uno specifico valore potrebbe essere inizializzata in un momento di molto successivo.

Per evitare che questo accada, racchiudete il codice principale del vostro programma in una semplice funzione
C<main()>. Incapsulate le vostre variabili negli scope appropriati. Quindi, aggiungete una singola
linea all'inizio del vostro programma, dopo aver usato tutti i moduli e
le direttive di cui avete bisogno:

=begin programlisting

    #!/usr/bin/perl

    use Modern::Perl;

    ...

    B<exit main( @ARGS );>

=end programlisting

Chiamare C<main()> I<prima> di qualunque altra cosa nel programma vi impone di essere
espliciti riguardo all'inizializzazione e all'ordine di compilazione. Chiamare C<exit> con
il valore restituito da C<main()> previene l'esecuzione dell'eventuale codice successivo, ma fate attenzione
a restituire C<0> dal C<main()> quando la sua esecuzione ha successo.

=head2 Esecuzione Controllata

Z<controlled_execution>

La vera differenza tra un programma e un modulo è nell'uso che intendete farne.
Gli utenti invocano i programmi direttamente, mentre i programmi caricano i moduli dopo l'inizio
dell'esecuzione. Tuttavia, un modulo è fatto di codice Perl allo stesso modo di un programma.
Rendere eseguibile un modulo è facile, così come fare in modo che un programma si comporti come un modulo
(cosa utile per testare parti di un programma esistente senza creare formalmente un
modulo). Tutto ciò che dovete fare è scoprire I<come> Perl ha iniziato a eseguire un pezzo
di codice.

X<builtin; C<caller>>

L'unico argomento, peraltro opzionale, di C<caller> è il numero di contesti di chiamata
(L<recursion>) di cui riportare informazioni. C<caller(0)> riporta informazioni sul
contesto di chiamata corrente. Per permettere a un modulo di essere eseguito correttamente I<sia> come programma I<sia> come
modulo, mettete tutto il codice eseguibile all'interno di funzioni, aggiungete una funzione C<main()> e
scrivete la seguente linea all'inizio del modulo:

=begin programlisting

    main() unless caller(0);

=end programlisting

Se I<non> c'è alcun chiamante per il modulo, significa che qualcuno lo ha invocato direttamente come
programma (con C<perl path/del/Modulo.pm> invece di C<use Modulo;>).

=begin tip Migliorare l'Ispezione del Chiamante

L'ottavo elemento della lista restituita da C<caller> in contesto lista è un
valore vero se il contesto di chiamata rappresenta C<use> o C<require>, altrimenti è
C<undef>. Nonostante sia molto accurato, poche persone lo usano.

=end tip

=head2 Validazione Postfissa dei Parametri

Z<postfix_parameter_validation>

X<CPAN; C<Params::Validate>>
X<CPAN; C<MooseX::Params::Validate>>

CPAN contiene svariati moduli che vi aiutano a verificare i parametri delle vostre
funzioni; C<Params::Validate> e C<MooseX::Params::Validate> sono due opzioni
valide. Una validazione basilare è facile anche senza tali moduli.

Supponete che la vostra funzione accetti esattamente due argomenti. I<Potreste>
scrivere:

=begin programlisting

    use Carp 'croak';

    sub sposa_scimmie
    {
        if (@_ != 2)
        {
            croak 'Il matrimonio richiede due scimmie!';
        }
        ...
    }

=end programlisting

... ma, da un punto di vista linguistico, le conseguenze sono più importanti del
controllo e meritano di essere all'I<inizio> dell'espressione:

=begin programlisting

    croak 'Il matrimonio richiede due scimmie!' if @_ != 2;

=end programlisting

... che potrebbe essere scritto in modo ancora più chiaro come:

=begin programlisting

    croak 'Il matrimonio richiede due scimmie!'
        unless @_ == 2;

=end programlisting

Queste tecniche di terminazione prematura--specialmente quella con i condizionali postfissi--possono semplificare
il resto del vostro codice. Ognuna di tali asserzioni è come una singola riga in una
tabella di verità.

=head2 Regex En Passant

Z<regex_en_passant>

X<regex; modifica>
X<regex; sostituzione>

Molti degli idiomi di Perl 5 si basano sul fatto che le espressioni hanno dei valori:

=begin programlisting

    say my $num_est = my $estensione = 42;

=end programlisting

Pur essendo chiaramente poco elegante, questo codice illustra come usare il valore di
un'espressione in un'altra espressione.  Non è un'idea nuova; avrete quasi sicuramente
già usato il valore di ritorno di una funzione in una lista o come argomento di un'altra
funzione. Forse però non avete pensato a tutte le sue implicazioni.

X<regex; cattura>

Supponete di voler estrarre un nome di battesimo da una combinazione di nome e cognome
con un'espressione regolare precompilata in C<$nome_battesimo_regex>:

=begin programlisting

    my ($nome_di_battesimo) = $nome =~ /($nome_battesimo_regex)/;

=end programlisting

In contesto lista, un match riuscito di una regex restituisce una lista di tutte le catture
(L<regex_captures> e Perl assegna la prima di esse a C<$nome_di_battesimo>.

Per modificare il nome, ad esempio per rimuovere tutti i caratteri non di parola per create un nome
utente da usare per le credenziali di un sistema, potete scrivere:

=begin programlisting

    (my $nome_normalizzato = $nome) =~ tr/A-Za-z//dc;

=end programlisting

=begin tip /r in Perl 5.14

In Perl 5.14 è stato aggiunto il modificatore non distruttivo C</r> delle sostituzioni, quindi potete
scrivere anche C<my $nome_normalizzato = $nome =~ tr/A-Za-z//dcB<r>;>.

=end tip

Per prima cosa, assegnate il valore di C<$nome> a C<$nome_normalizzato>, dato che le parentesi
modificano la precedenza in modo che l'assegnamento venga eseguito per primo.  L'espressione di
assegnamento valuta alla I<variabile> C<$nome_normalizzato>, quindi tale
variabile diventa il primo operando all'operatore di traslitterazione.

Questa tecnica è applicabile ad altri operatori di modifica sul posto:

=begin programlisting

    my $eta = 14;
    (my $nuova_eta = $eta)++;

    say "Il prossimo anno avro` $nuova_eta anni";

=end programlisting

=head2 Coercizioni Unarie

Z<unary_coercions>

X<coercizione>
X<tipi>

Il sistema di tipi di Perl 5 fa quasi sempre la cosa giusta quando usate gli
operatori corretti. Se usate l'operatore di concatenazione di stringhe, Perl tratterà
entrambi gli operando come sringhe. Se usate l'operatore di addizione, Perl tratterà entrambi
gli operandi come numeri.

Tuttavia, qualche volta dovete dare a Perl un suggerimento su ciò che intendete fare, usando una I<coercizione
unaria> per forzare un modo specifico di valutare un valore.

X<conversioni unarie; numerica>

Per garantire che Perl tratti un valore come numerico, sommategli zero:

=begin programlisting

    my $valore_numerico = 0 + $valore;

=end programlisting

X<conversioni unarie; booleana>

Per garantire che Perl tratti un valore come booleano, fatene una doppia negazione:

=begin programlisting

    my $valore_booleano = !! $valore;

=end programlisting

X<conversioni unarie; stringa>

Per garantire che Perl tratti un valore come stringa, concatenatelo con la stringa vuota:

=begin programlisting

    my $valore_stringa = '' . $valore;

=end programlisting

Sebbene sia estremamente improbabile che dobbiate usare queste coercizioni, è importante riconoscere
questi idiomi quando li incontrate.
Infatti, anche quando vi sembra una buona idea rimuovere un "inutile"
C<+ 0> da un'espressione, ciò potrebbe danneggiare il codice.
