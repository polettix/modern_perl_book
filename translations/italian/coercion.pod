=head1 Coercizione

Z<coercion>

X<DWIM>
X<dwimmery>
X<coercion>

Una variabile Perl può contenere diversi tipi di valori in momenti diversi--stringhe,
interi, numeri razionali, ecc.. Anzichè associare dell'informazione di tipo alle
variabili, Perl sfrutta il contesto fornito dagli operatori (L<value_contexts>)
per decidere come deve interpretare i loro valori. Per scelta di progetto, Perl tenta di fare quello che
intendeteN<Abbreviato come I<DWIM>, che sta per I<do what I mean> (fai quello che intendo), o I<dwimmery>.>, quindi dovete essere
sufficientemente specifici sulle vostre intenzioni. Se trattate una variabile che contiene
un numero come se fosse una stringa, Perl farà del suo meglio per forzare quel numero a 
una stringa con una I<coercizione>.

=head2 Coercizione Booleana

Z<boolean_coercion>
X<coercion; boolean>
X<truthiness>

La coercizione booleana ha luogo quando testate la I<verità> di un valore, per esempio nella
condizione di un C<if> o di un C<while>. Il numero 0, C<undef>, la stringa vuota e la stringa
C<'0'> valutano tutti a falso. Tutti gli altri valori--incluse le stringhe
che sarebbero I<numericamente> uguali a zero come C<'0.0'>, C<'0e'> e C<'0 ma
vero'>--valutano a vero.

Qaundo uno scalare ha I<sia> una componente stringa che una componente numerica (L<dualvars>), Perl 5
preferisce testare la verità booleana della componente stringa. C<'0 ma vero'>
valuta a zero come numero, ma non è una stringa vuota, quindi in contesto booleano
valuta a vero.

=head2 Coercizione a Stringa

X<coercion; string>
X<stringification>

La coercizione a stringa ha luogo quando usate degli operatori stringa come il confronto (C<eq>
e C<cmp>), la concatenazione, C<split>, C<substr> e le espressioni regolari, e quando
usate un valore come chiave di hash. Il valore C<undef> diventa la
stringa vuota e produce un warning di "use of uninitialized value" ("uso di valore non inizializzato").
I numberi diventano stringhe contenenti i loro valori, per esempio il valore C<10>
diventa la stringa C<'10'>. Potete fare lo C<split> di un numero in singole cifre con:

=begin programlisting

    my @cifre = split '', 1234567890;

=end programlisting

=head2 Coercizione Numerica

Z<numeric_coercion>
X<coercion; numeric>
X<numification>

La coercizione numerica ha luogo quando usate operatori di confronto numerico (come C<==>
e C<< <=> >>), quando effettuate operazioni matematiche e quando usate un valore
come indice di un array o di una lista. Il valore C<undef> diventa il numero zero e produce
un warning di "Use of uninitialized value". Anche le stringhe che non iniziano con una parte numerica
diventano il numero zero e producono un warning di "Argument isn't numeric" ("L'argomento non è numerico").
Le stringhe che iniziano con caratteri permessi nei letterali numerici diventano dei numeri
corrispondenti a tali caratteri e non producono warning; per esempio C<10 salti di leptoni> diventa
C<10> e C<6.022e23 scorrerie di talpe> diventa C<6.022e23>.

X<Scalar::Util>
X<Scalar::Util; looks_like_number>

Il modulo core C<Scalar::Util> contiene una funzione C<looks_like_number()>
che usa le stesse regole di parsing della grammatica del Perl 5 per estrarre un numero
da una stringa.

=begin tip Mathematicians Rejoice

Le stringhe C<Inf> e C<Infinity> rappresentano il valore infinito e si comportano come
numeri. La stringa C<NaN> rappresenta il concetto "not a number" ("non è un numero"). In contesto
numerico non danno luogo al warning "Argument isn't numeric".

=end tip

=head2 Coercizione di Riferimento

X<coercion; reference>
X<autovivification>

Usare un'operazione di dereferenza su un valore che non sia un riferimento trasforma quel valore I<in> un
riferimento. Questo processo di autovivificazione (L<autovivification>) è utile quando manipolate
strutture dati nidificate (L<nested_data_structures>):

=begin programlisting

    my %utenti;

    $utenti{Paolo}{id} = 228;
    $utenti{Giacomo}{id} = 229;

=end programlisting

Anche se l'hash non conteneva valori per C<Paolo> e C<Giacomo>, Perl
si è preso il disturbo di creare dei riferimenti ad hash in queste chiavi e di assegnare una coppia chiave/valore
con chiave C<id> a ciascuno di essi.

=head2 Cache di Coercizioni

Z<cached_coercions>

X<coercion; cached>

La rappresentazione interna dei valori in Perl 5 memorizza sia un valore stringa che un valore
numerico. La coercizione di un valore numerico a stringa non I<rimpiazza> il valore numerico.
Invece, I<attacca> un nuovo valore stringa, in modo che la rappresentazione
contiene I<entrambi> i componenti. Analogamente, la coercizione di una stringa a numero popola la
componente numerica lasciando la componente stringa inalterata.

Certe operazioni del Perl preferiscono usare una componente di un valoro piuttosto
che l'altra--per esempio, i test booleani preferiscono la stringa. Se un valore ha fatto il cache
di una rappresentazione in una forma che non vi aspettate, affidarvi a una conversione implicita
può dare delle sorprese. Non avrete quasi mai la necessità di esplicitare che cosa vi aspettate
N<Il vostro autore ricorda di averlo dovuto fare solo due volte in oltre dieci anni di programmazione in
Perl 5>, ma sapere che questo caching ha luogo potrebbe aiutarvi una volta o l'altra a
fare la diagnosi di qualche strana situazione.

=head2 Dualvar

Z<dualvars>

X<coercion; dualvars>
X<C<dualvar()>>
X<C<Scalar::Util>>
X<dualvars>

La natura multi-componente dei valori Perl è disponibile agli utenti in forma di
I<dualvar>. Il modulo core C<Scalar::Util> fornisce una funzione C<dualvar()>
che vi permette di bypassare la coercizione del Perl e manipolare separatamente le componenti stringa e numerica
di un valore:

=begin programlisting

    use Scalar::Util 'dualvar';
    my $nome_falso = dualvar 0, 'Gioie & Dolori';

    say 'Vero come booleano!'  if      !! $nome_falso;
    say 'Falso come numero!'   unless  0  + $nome_falso;
    say 'Vero come stringa!'   if      ''  . $nome_falso;

=end programlisting
