=head1 Oggetti Indiretti

Z<indirect_objects>

Perl 5 non ha un operatore C<new>; un costruttore è una qualunque cosa che restituisce
un oggetto. Per convenzione, i costruttori sono metodi di classe con nome
C<new()>, ma potete scegliere qualunque alternativa vi piaccia. Molti vecchi tutorial sugli oggetti Perl 5
promuovevano l'uso di chiamate di costruttori in stile C++ e Java:

=begin programlisting

    my $q = B<new> CGI; # NON USARE

=end programlisting

... invece della più esplicita chiamata di metodo:

=begin programlisting

    my $q = CGI->new();

=end programlisting

Queste due sintassi sono equivalenti in tutti i casi, tranne quelli in cui non lo sono.

=head2 Invocazioni Indirette con Bareword

X<notazione a oggetti indiretta>
X<notazione dativa>

Nella forma indiretta (e, più precisamente, nel caso I<dativo>) del primo
esempio, il verbo (il metodo) precede il nome a cui si riferisce (l'oggetto).
Questo va bene nei linguaggi naturali, ma in Perl 5 introduce delle ambiguità
di interpretazione.

Dato che il nome del metodo è una bareword (L<barewords>), il parser deve indovinare
qual è l'interpretazione corretta del codice attraverso l'uso di svariate euristiche. Anche se tali
euristiche sono ampiamente testate e I<quasi> sempre corrette, nei casi in cui falliscono
possono creare confusione. Peggio ancora, esse dipendono dall'ordine di compilazione del codice
e dei moduli.

Le difficoltà del parsing aumentano ulteriormente quando il costruttore riceve degli argomenti. In stile
indiretto si potrebbe scrivere:

=begin programlisting

    # NON USARE
    my $ogg = new Class( arg => $valore );

=end programlisting

... facendo assomigliare il nome della classe a una chiamata di funzione. Perl 5 I<può>
disambiguare molti di questi casi, ma le sue euristiche dipendono dai nomi di package
che il parser ha già incontrato, dalle bareword che ha già interpretato (e da come le
ha interpretate) e dai I<nomi> di funzione che sono già stati dichiarati nel package
corrente.

Immaginate di imbattervi in una funzione prototipata (L<prototypes>) il cui nome
va in qualche modo in conflitto con il nome di una classe o di un metodo
chiamato indirettamente. Anche se è una situazione rara, farne il debug è così problematico che vale la pena
evitare le invocazioni indirette.

=head2 Limitazioni Scalari della Notazione Indiretta

Un altro problema legato alla sintassi indiretta è che il parser si aspetta una singola espressione scalare
come oggetto. Stampare su un filehandle memorizzato in una variabile
aggregata I<sembra> facile, ma non lo è:

=begin programlisting

    # NON FUNZIONA COME CI SI ASPETTA
    say $config->{output} 'Messaggio diagnostico divertente!';

=end programlisting

Perl tenterà di chiamare C<say> sull'oggetto C<$config>.

X<predefinite; funzioni; C<print>>
X<predefinite; funzioni; C<close>>
X<predefinite; funzioni; C<say>>

C<print>, C<close> e C<say>--che sono tutte funzioni native che operano sui
filehandle--operano in modo indiretto. Questo comportamento era appropriato quando i filehandle
erano globali ai package, ma i filehandle lessicali (L<lexical_filehandles>) evidenziano
i problemi della sintassi a oggetti indiretta. Per risolvere tali problemi, disambiguate la
sottoespressione che produce l'invocante desiderato:

=begin programlisting

    say B<{>$config->{output}B<}> 'Messaggio diagnostico divertente!';

=end programlisting

=head2 Alternative alla Notazione Indiretta

La notazione diretta di invocazione non ha questi problemi di ambiguità.  Per
costruire un oggetto, chiamate il metodo costruttore direttamente sul nome della classe:

=begin programlisting

    my $q   = CGI->new();
    my $ogg = Class->new( arg => $valore );

=end programlisting

Questa sintassi contiene I<ancora> un problema di bareword dato che, se esiste una funzione
di nome C<CGI>, Perl interpreta la bareword del nome di classe come una chiamata alla
funzione, ovvero:

=begin programlisting

    sub CGI;

    # avete scritto CGI->new(), ma Perl lo ha letto
    my $q = CGI()->new();

=end programlisting

Anche se questo problema si presenta raramente, potete disambiguare i nomi di classe appendendo il
separatore di package (C<::>) oppure contrassegnando esplicitamente i nomi di classe come letterali
stringa:

=begin programlisting

    # separatore di package
    my $q = CGI::->new();

    # letterale stringa non ambiguo
    my $q = 'CGI'->new();

=end programlisting

Tuttavia, nella pratica nessuno lo fa.

X<C<IO::File>>

Per il caso specifico delle operazioni su filehandle, l'uso del dativo è talmente prevalente
che potete usare l'approccio di invocazione indiretta se racchiudete l'invocante desiderato
tra parentesi graffe. Se usate Perl 5.14 (o se caricate
C<IO::File> oppure C<IO::Handle>), potete usare dei metodi sui filehandle
lessicaliN<Anche se quasi nessuno li usa con C<print> e C<say>.>.

X<CPAN; C<Perl::Critic>>
X<CPAN; C<Perl::Critic::Policy::Dynamic::NoIndirect>>
X<CPAN; C<indirect>>

Il modulo CPAN C<Perl::Critic::Policy::Dynamic::NoIndirect> (che è un plugin di
C<Perl::Critic>) può identificare le invocazioni indirette durante le revisioni del codice. Il
modulo CPAN C<indirect> può identificare e proibire il loro uso nei programmi in
esecuzione:

=begin programlisting

    # genera un warning in caso di invocazione indiretta
    no indirect;

    # solleva un'eccezione in caso di invocazione indiretta
    no indirect ':fatal';

=end programlisting
