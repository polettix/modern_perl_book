=head1 Idee Implicite

Z<implicit_ideas>

Il contesto è solo una delle abbreviazioni linguistiche in Perl. I programmatori che padroneggiano queste
abbreviazioni, dando appena un'occhiata al codice, possono capire immediatamente le sue caratteristiche più importanti.
Un'altra di tali importanti funzionalità linguistiche è l'equivalente Perl dei pronomi.

=head2 La Variabile Scalare di Default

Z<default_scalar_variable>

X<default variables; scalar>
X<default variables; C<$_>>
X<< variables; C<$_> >>
X<< C<$_>; default scalar variable >>

La I<variabile scalare di default> (detta anche I<variabile topic>), C<$_>, si nota
principalmente per la sua I<assenza>: molte delle operazioni native Perl lavorano sul
contenuto di C<$_> in assenza di una variabile esplicita. Potete usare C<$_> come qualunque altra variabile, ma spesso questo risulta superfluo.

X<builtins; C<chomp>>

Per esempio, la funzione nativa C<chomp> rimuove una sequenza finale di newline dalla
stringa dataN<Vedete C<perldoc -f chomp> e C<$/> per maggiori dettagli.>:

=begin programlisting

    my $zio = "Roberto\n";
    say "'$zio'";
    chomp $zio;
    say "'$zio'";

=end programlisting

Se non riceve esplicitamente una variabile, C<chomp> rimuove la sequenza finale di newline da C<$_>.
Queste due linee di codice sono equivalenti:

=begin programlisting

    chomp $_;
    chomp;

=end programlisting

C<$_> ha lo stesso ruolo in Perl del pronome I<it> (esso) in Inglese. Leggete la prima linea
come se dicesse "C<chomp> I<it>" e la seconda come "C<chomp>". Perl capisce a che cosa vi riferite
quando dite "C<chomp>", lo interpreta come chomp I<it>.

X<builtins; C<say>>
X<builtins; C<print>>

Analogamente, C<say> e C<print> operano su C<$_> in assenza di altri argomenti:

=begin programlisting

    print;  # stampa $_ sul filehandle corrente
    say;    # stampa $_ sul filehandle corrente
            # con un newline finale

=end programlisting

X<C<s///>; substitution operator>
X<C<m//>; match operator>
X<C<tr//>; transliteration operator>

Le funzionalità Perl per le espressioni regolari (L<regex>) per default usano C<$_> per i match,
le sostituzioni e le traslitterazioni:

=begin programlisting

    $_ = 'Mi chiamo Paquito';
    say if /Mi chiamo/;

    s/Paquito/Paquita/;

    tr/A-Z/a-z/;
    say;

=end programlisting

X<builtins; C<chr>>
X<builtins; C<ord>>
X<builtins; C<lc>>
X<builtins; C<length>>
X<builtins; C<reverse>>
X<builtins; C<uc>>

Molti degli operatori scalari del Perl (inclusi C<chr>, C<ord>, C<lc>, C<length>,
C<reverse> e C<uc>) lavorano sulla variabile scalare di default se non gli fornite
un'alternativa.

X<builtins; C<for>>

Le direttive di ciclo del Perl (L<looping_directives>) per default usano C<$_> come variabile
su cui iterare. Considerate un ciclo C<for> che itera su una lista:

=begin programlisting

    say "#B<$_>" for 1 .. 10;

    for (1 .. 10)
    {
        say "#B<$_>";
    }

=end programlisting

X<builtins; C<while>>

... oppure il C<while>:

=begin programlisting

    while (<STDIN>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

X<builtins; C<map>>

... oppure la trasformazione di una lista con C<map>:

=begin programlisting

    my @quadrati = map { B<$_> * B<$_> } 1 .. 10;
    say for @quadrati;

=end programlisting

X<builtins; C<grep>>

... o il filtraggio di una lista con C<grep>:

=begin programlisting

    say 'Colazione!'
        if grep { /fette biscottate/ } @dispensa;

=end programlisting

Come una frase in Italiano diventa confusa quando usate troppi pronomi e antecedenti, anche in Perl dovete
fare attenzione a mescolare usi impliciti o espliciti di C<$_>. Un incauto uso simultaneo
 di C<$_> può fare sì che un pezzo di codice sovrascriva tacitamente un valore scritto da un altro pezzo di codice.
Se scrivete una funzione che usa C<$_>, potreste
interferire con l'uso di C<$_> da parte del codice che chiama la funzione.

A partire dal Perl 5.10, potete dichiarare C<$_> come variabile lessicale (L<lexical_scope>)
per evitare queste interferenze:

=begin programlisting

    while (<STDIN>)
    {
        chomp;

        # ESEMPIO SBAGLIATO
        my $scombinato = calcola_valore( $_ );
        say "Valore originale: $_";
        say "Valore scombinato: $scombinato";
    }

=end programlisting

Se C<calcola_valore()> o qualche altra funzione modifica C<$_>, tale modifica persiste
per l'intera iterazione del ciclo. Aggiungendo una dichiarazione C<my> evita di
sporcare un'altra istanza di C<$_>:

=begin programlisting

    while (my $_ = <STDIN>)
    {
        ...
    }

=end programlisting

Naturalmente, usare un'altra variabile lessicale può essere altrettanto chiaro:

=begin programlisting

    while (my $linea = <STDIN>)
    {
        ...
    }

=end programlisting

Usate C<$_> come usereste il pronome "esso" in un documento formale: occasionalmente, in un contesto limitato e ben definito.

=begin tip The C<...> Operator

X<builtins; C<...>>

Perl 5.12 ha introdotto l'operatore triplo-punto (C<...>) come segnaposto per del codice che volete scrivere successivamente.
In fase di parsing, Perl lo tratta come un'istruzione completa, ma solleva un'eccezione
al vostro tentativo di eseguire del codice non implementato se tentate di eseguirlo. Vedete
C<perldoc perlop> per maggiori dettagli.

=end tip


=head2 Le Variabili Array di Default

Z<default_array_variables>

X<default variables; array>
X<default variables; C<@_>>
X<variables; C<@_>>
X<C<@_>>

Perl fornisce anche due variabili array implicite. Anzitutto, Perl passa gli argomenti alle
funzioni (L<functions>) in un array di nome C<@_>. Le operazioni di manipolazione di array
(L<arrays>) all'interno delle funzioni per default lavorano su questo array, per cui i due seguenti
frammenti di codice sono equivalenti:

=begin programlisting

    sub pippo
    {
        my $arg = shift;
        ...
    }

    sub pippo_con_argomenti_espliciti
    {
        my $arg = shift @_;
        ...
    }

=end programlisting

X<builtins; C<shift>>
X<builtins; C<pop>>

Come C<$_> corrisponde al pronome I<esso>, C<@_> corrisponde al pronome I<essi>.
I<Contrariamente> a C<$_>, Perl gestisce automaticamente diverse versioni locali di
C<@_> quando chiamate altre funzioni. Gli operatori nativi C<shift> e C<pop>
operano su C<@_> se non fornite altri operandi.

X<default variables; C<@ARGV>>
X<variables; C<@ARGV>>
X<C<@ARGV>>

Nel codice esterno alle funzioni, la variabile array di default C<@ARGV> contiene gli argomenti
passati al programma da linea di comando. Al di fuori delle funzioni, le operazioni sugli array del Perl (incluse
C<shift> e C<pop>) operano implicitamente su C<@ARGV>. Non è possibile usare C<@_> al posto di C<@ARGV>.

=begin tip C<readline>

X<builtins; C<readline>>
X<builtins; C<glob>>

L'operatore Perl C<< <$fh> >> è equivalente alla funzione nativa C<readline>.
C<readline $fh> ha lo stesso effetto di C<< <$fh> >>. A partire da Perl 5.10, la chiamata
C<readline> senza argomenti è equivalente a C<< <> >>, quindi ora potete usare C<readline>
dappertutto. Per ragioni storiche, l'uso di C<< <> >> è ancora il più diffuso, ma siete invitati a
prendere in considerazione l'uso di C<readline> per la sua maggiore leggibilità. Probabilmente preferite C<glob
'*.html'> a C<< <*.html> >>, giusto? Ecco, l'idea è la stessa.

=end tip

X<null filehandle>

C'è un caso speciale che riguarda C<ARGV>. Se leggete dal filehandle nullo C<< <> >>,
Perl tratterà ogni elemento di C<@ARGV> come se fosse il I<nome> di un file da aprire in lettura. (Se C<@ARGV> è vuoto, Perl leggerà da standard input.) Questo
uso implicito di C<@ARGV> è utile per scrivere programmi brevi, come questo filtro a
linea di comando che inverte il suo input:

=begin programlisting

    while (<>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

Perchè si usa C<scalar>? C<say> impone un contesto lista ai suoi operandi. C<reverse> propaga
il proprio contesto ai suoi operandi, trattandoli come lista in contesto lista e come
una stringa concatenata in contesto scalare. Se il comportamento di C<reverse> vi suona
confuso, non avete torto. Perl 5 avrebbe probabilmente dovuto separare
l'inversione di una stringa dall'inversione di una lista.

Se eseguite il codice sopra passando una lista di file:

=begin screen

    $ B<perl reverse_lines.pl encrypted/*.txt>

=end screen

... il risultato sarà un lungo testo in output.  Se non passate argomenti, potete
fornire il vostro standard input con una pipe da un altro programma o scrivendo direttamente sulla tastiera.
Ricordatevi comunque che il Perl è una buona scelta per fare molto di più che scrivere piccoli programmi a linea di comando....
