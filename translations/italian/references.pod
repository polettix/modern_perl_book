=head1 Riferimenti

Z<references>

Normalmente Perl fa ciò che vi aspettate, anche quando ci sono delle sottigliezze. Considerate
ciò che accade quando passate dei valori a una funzione:

=begin programlisting

    sub saluto_rovesciato
    {
        my $nome = reverse shift;
        return "Ciao, $nome!";
    }

    my $nome = 'Max';
    say saluto_rovesciato( $nome );
    say $nome;

=end programlisting

Al di fuori della funzione, C<$nome> contiene C<Max>, anche se il valore
passato alla funzione viene invertito in C<xaM>. Probabilmente è quello che vi
aspettavate. Il valore di C<$nome> al di fuori della funzione è separato dal C<$nome>
dentro alla funzione. Modificarne uno non ha effetti sull'altro.

Considerate l'alternativa. Se doveste fare delle copie di ogni valore prima che
qualcosa possa cambiarli senza il vostro consenso, dovreste scrivere
un sacco di codice extra.

Tuttavia alcune volte è utile che i valori possano essere modificati. Se volete passare a una funzione un hash
pieno di dati perchè vengano modificati, creare e restituire un nuovo hash per
ogni modifica è scomodo (per non dire nulla dell'efficienza).

X<riferimenti>

Perl 5 fornisce un meccanismo con cui potete riferirvi a un valore senza farne una copia.
Ogni modifica fatta a quel I<riferimento> ne aggiorna il valore in un modo visibile a
I<tutti> i riferimenti che lo possono raggiungere. Un riferimento è
un tipo di dato scalare first-class di Perl 5 che si riserisce ad un altro tipo di dato first-class.

=head2 Riferimenti a Scalari

Z<scalar_references>

X<operatori; C<\>>
X<riferimenti; operatore C<\>>

X<riferimenti; scalari>
X<scalari; riferimenti>

L'operatore di riferimento è il backslash (C<\>). In contesto scalare, crea un singolo
riferimento ad un altro valore. In contesto lista, crea una lista di
riferimenti. Per ottenere un riferimento a C<$name>:

=begin programlisting

    my $nome       = 'Larry';
    my $rif_a_nome = B<\>$nome;

=end programlisting

X<dereferenziazione>
X<riferimenti; dereferenziazione>

Dovete I<dereferenziare> un riferimento per accedere al valore cui si riferisce.
La dereferenziazione vi richiede di aggiungere un sigillo extra per ogni livello di
indirezione:

=begin programlisting

    sub inverti_sul_posto
    {
        my $rif_a_nome = shift;
        B<$$rif_a_nome>   = reverse B<$$rif_a_nome>;
    }

    my $nome = 'Chiacchierone';
    reverse_in_place( B<\>$nome );
    say $nome;

=end programlisting

Il sigillo scalare doppio (C<$$>) dereferenzia un riferimento a scalare.

X<riferimenti; alias>
X<alias>

Nell'array C<@_>, i parametri si comportano come I<alias> alle variabili del chiamanteN<Ricordate che i cicli C<for> producono un comportamento simile.>, quindi potete modificarli:

=begin programlisting

    sub inverti_sul_posto
    {
        $_[0] = reverse $_[0];
    }

    my $nome = 'ollirdoccoC';
    inverti_sul_posto( $name );
    say $name;

=end programlisting

Normalmente, non desiderate modificare dei valori in questo modo--e i chiamanti raramente se lo aspettano.
Assegnando i parametri a dei lessicali nelle vostre funzioni evita questo rischio.

=begin tip Risparmiare Memoria con i Riferimenti

Modificare direttamente un valore o restituire un riferimento a uno scalare può farvi risparmiare
memoria. Dato che gli assegnamenti in Perl copiano i valori, potreste ritrovarvi con
diverse copie di una stringa molo lunga. Passare dei riferimenti implica che il Perl
deve solo copiare tali riferimenti--un'operazione molto meno dispendiosa.

=end tip

Riferimenti complessi possono richiedere un blocco tra parentesi graffe per disambiguare parti
dell'espressione. Potete sempre usare questa sintassi, anche se non sempre rende il codice più chiaro:

=begin programlisting

    sub inverti_sul_posto
    {
        my $rif_a_nome   = shift;
        B<${ $rif_a_nome }> = reverse B<${ $rif_a_nome }>;
    }

=end programlisting

Se vi dimenticate di dereferenziare un riferimento a scalare, probabilmente Perl applicherà una coercizione
al riferimento. Il valore stringa sarà nella forma C<SCALAR(0x93339e8)> e il
valore numerico sarà la porzione C<0x93339e8>. Questo valore codifica il tipo di
riferimento (in questo caso, C<SCALAR>) e la locazione di memoria del riferimento.

=begin tip I Riferimenti Non Sono Puntatori

Perl non offre nativamente accesso alle locazioni di memoria. L'indirizzo di un
riferimento è un valore usato come identificatore. Diversamente dai puntatori in un linguaggio come
il C, non potete modificare questo indirizzo o comunque trattarlo come un indirizzo in memoria.
Questi indirizzi sono solo I<quasi> univoci dato che il Perl potrebbe riutilizzare le stesse locazioni
di memoria dopo avere reclamato della memoria inutilizzata.

=end tip

=head2 Riferimenti ad Array

Z<array_references>

X<array; riferimenti>
X<riferimenti; array>

I I<riferimenti ad array> sono utili in diverse circostanze:

=over 4

=item * Per passare e ricevere array dalle funzioni evitandone l'appiattimento

=item * Per creare strutture dati multi-dimensionali

=item * Per evitare di copiare inutilmente degli array

=item * Per permettervi di gestire strutture dati anonime

=back

Usate l'operatore di riferimento per creare un riferimento ad un array dichiarato in precedenza:

=begin programlisting

    my @carte       = qw( K Q J 10 9 8 7 6 5 4 3 2 A );
    my $rif_a_carte = B<\>@carte;

=end programlisting

Ogni modifica fatta attraverso C<$rif_a_carte> modificherà C<@carte> e viceversa.
Potete accedere all'intero array con il sigillo C<@>, sia per
appiattirlo in una lista che per contarne gli elementi:

=begin programlisting

    my $conteggio_carte = B<@$rif_a_carte>;
    my @copia_carte     = B<@$rif_a_carte>;

=end programlisting

X<<< C<< -E<gt> >>; freccia di dereferenziazione >>>
X<<< operatori; C<< -E<gt> >> >>>

Accedete a singoli elementi dell'array usando una freccia di dereferenziazione (C<< -> >>):

=begin programlisting

    my $prima_carta  = B<< $rif_a_carte->[0]  >>;
    my $ultima_carta = B<< $rif_a_carte->[-1] >>;

=end programlisting

La freccia è necessaria per distinguere tra uno scalare di nome C<$rif_a_carte> e
un array di nome C<@rif_a_carte>. Notate l'uso del sigillo scalare (L<sigils>) per
accedere a un singolo elemento.

=begin tip Raddoppiare i Sigilli

Una sintassi alternativa antepone il sigillo scalare al riferimento ad array. Anche
se meno elegante, C<< my $prima_carta = B<$$rif_a_carte[0]>; >> è più breve da scrivere.

=end tip

Usate le parentesi graffe per dereferenziare una slice (L<array_slices>) di un riferimento
ad array:

=begin programlisting

    my @carte_alte = B<@{ $rif_a_carte }>[0 .. 2, -1];

=end programlisting

È I<possibile> omettere le parentesi graffe, ma usarle come raggruppamenti spesso migliora la
leggibilità.

X<riferimenti; array anonimi>
X<array; anonimi>

Per creare un array anonimo--che non è stato dichiarato--racchiudete una lista
di valori tra parentesi quadre:

=begin programlisting

    my $rif_a_cose_varie = [qw( Scimmie Robot Dinosauri Formaggi )];

=end programlisting

Questo riferimento ad array è identico a un riferimento a un array con nome, eccetto che
le parentesi quadre dell'array anonimo creano I<sempre> un nuovo riferimento. Se chiedete diversi
riferimenti ad un array con nome essi si riferiscono sempre allo I<stesso> array all'interno di uno stesso
scope. Per esempio, se scrivete:

=begin programlisting

    my @piatti           = qw( zuppa panini pizza );
    my $rif_per_domenica = \@piatti;
    my $rif_per_lunedi   = \@piatti;

    push @piatti, 'coppa di gelato';

=end programlisting

...alla fine sia C<$rif_per_domenica> che C<$rif_per_lunedi> conterranno un dessert, mentre se scrivete:

=begin programlisting

    my @piatti           = qw( zuppa panini pizza );
    my $rif_per_domenica = [ @piatti ];
    my $rif_per_lunedi   = [ @piatti ];

    push @piatti, 'crostata di mirtilli';

=end programlisting

...nè C<$rif_per_domenica> nè C<$rif_per_lunedì> conterranno un dessert. All'interno delle
parentesi quadre usate per creare l'array anonimo, il contesto lista appiattisce l'array
C<@piatti> in una lista separata da C<@piatti>.

=head2 Riferimenti a Hash

Z<hash_references>

X<hash; riferimenti>
X<riferimenti; hash>

Usate l'operatore di riferimento su un hash per creare un I<riferimento a hash>:

=begin programlisting

    my %colori = (
        nero    => 'negro',
        blu     => 'azul',
        oro     => 'dorado',
        rosso   => 'rojo',
        giallo  => 'amarillo',
        porpora => 'morado',
    );

    my $rif_a_colori = B<\%>colori;

=end programlisting

Per accedere alle chiavi o ai valori dell'hash anteponete il sigillo di hash C<%>
al riferimento:

=begin programlisting

    my @colori_italiani = keys   B<%$rif_a_colori>;
    my @colori_spagnoli = values B<%$rif_a_colori>;

=end programlisting

Per accedere a singoli valori dell'hash (ovvero settarli, cancellarli, controllarne l'esistenza ed
estrarli) usate la freccia di dereferenziazione o un sigillo doppio:

=begin programlisting

    sub traduci_in_spagnolo
    {
        my $colore = shift;
        return B<< $rif_a_colori->{$colore} >>;
        # oppure return B<< $$rif_a_colori{$colore} >>;
    }

=end programlisting

Per le slice di riferimenti ad hash usate il sigillo array (C<@>) e le parentesi graffe per disambiguare:

=begin programlisting

    my @colori  = qw( rosso blu verde );
    my @colores = B<@{ $rif_a_colori }{@colori}>;

=end programlisting

Per creare hash anonimi usate le parentesi graffe:

=begin programlisting

    my $rif_a_cibo = B<{>
        'torta di compleanno' => 'la torta de cumpleaE<ntilde>os',
        dolci                 => 'dulces',
        biscotto              => 'bizcochito',
        gelato                => 'helado',
    B<}>;

=end programlisting

Come per gli array anonimi, ogni volta vengono creati dei nuovi hash anonimi.

=begin tip Attenzione alle Graffe!

Un errore comune per i principianti è quello di assegnare un hash anonimo ad un hash standard,
il che produce un warning relativo ad un numero dispari di elementi nell'hash. Usate le parentesi
tonde per assegnare a un hash standard e le parentesi graffe per creare un hash anonimo.

=end tip

=head2 Dereferenziazione Automatica

Z<automatic_dereferencing>

X<predefinite; funzioni; C<push>>

A partire dalla versione 5.14, il Perl può dereferenziare automaticamente alcuni riferimenti al posto
vostro. Dato un riferimento ad array in C<$rif_a_array>, potete scrivere:

=begin programlisting

    push $rif_a_array, qw( lista di valori );

=end programlisting

Potete fare la stessa cosa con un'espressione che restituisce un riferimento ad array:

=begin programlisting

    push $case{$luogo}[$armadi], \@scarpe_nuove;

=end programlisting

X<predefinite; funzioni; C<push>>
X<predefinite; funzioni; C<pop>>
X<predefinite; funzioni; C<shift>>
X<predefinite; funzioni; C<unshift>>
X<predefinite; funzioni; C<splice>>
X<predefinite; funzioni; C<keys>>
X<predefinite; funzioni; C<values>>
X<predefinite; funzioni; C<each>>

Lo stesso vale per gli operatori su array C<pop>, C<shift>, C<unshift>, C<splice>,
C<keys>, C<values> e C<each> e gli operatori su hash C<keys>, C<values> e
C<each>.

Se il riferimento usato non è del tipo opportuno--ovvero se non può essere dereferenziato
correttamente--Perl solleverà un'eccezione. Questo potrebbe sembrare più pericoloso di
dereferenziare esplicitamente i riferimenti, ma è invece la stessa cosa:

=begin programlisting

    my $rif = sub { ... };

    # lancia un'eccezione
    push  $rif, qw( lista di valori );

    # anche questo lancia un'eccezione
    push @$rif, qw( lista di valori );

=end programlisting

=head2 Riferimenti a Funzioni

Z<function_references>

X<funzioni; riferimenti>
X<riferimenti; funzioni>
X<funzioni; first-class>

Perl 5 supporta le I<funzioni first-class>, ovvero la funzione è un tipo di dati esattamente come
lo sono l'array e l'hash. Questo fatto è reso particolarmente evidente dai I<riferimenti a funzione>, e
rende possibili molte funzionalità avanzate (L<closures>). Per creare un riferimento a funzione
usate l'operatore di riferimento sul nome della funzione:

=begin programlisting

    sub cuoci_torta { say 'Sto cuocendo un\'ottima torta!' };

    my $rif_a_torta = B<\&>cuoci_torta;

=end programlisting

X<funzioni; sigillo>
X<sigilli; C<&>>
X<C<&>; sigillo>

Se non usate il I<sigillo funzione> (C<&>), otterrete un riferimento al
valore o ai valori di ritorno della funzione.

Per creare delle funzioni anonime usate la keyword C<sub> senza nome:

=begin programlisting

    my $rif_a_dolce = B<sub { say 'Sto facendo una torta deliziosa!' }>;

=end programlisting

X<predefinite; direttive; C<sub>>

L'uso di C<sub> I<senza> un nome compila la funzione normalmente,
ma non la installa nel namespace corrente. L'unico modo per
accedere a tale funzione è attraverso il riferimento restituito da C<sub>. Invocate il
riferimento a funzione con la freccia di dereferenziazione:

=begin programlisting

    $rif_a_torta->();
    $rif_a_dolce->();

=end programlisting

=begin tip Chiamate di Funzione in Perl 4

Un modo alternativo per invocare riferimenti a funzione è quello di usare il sigillo funzione
(C<&>) invece della freccia di dereferenziazione. Evitate questa sintassi, dato che ha alcune
sottili implicazioni per il parsing e per il passaggio degli argomenti.

=end tip

Pensate alle parentesi vuote come a un'operazione che indica la dereferenziazione di un'invocazione
così come le parentesi quadre indicano un accesso per indice ad un array e
le parentesi graffe indicano un accesso a un hash. Passate gli argomenti alla funzione dentro le
parentesi:

=begin programlisting

    $rif_a_cuoci_qualcosa->( 'biscotti' );

=end programlisting

Potete anche usare i riferimenti a funzione come metodi di oggetti (L<moose>). Questo
può essere utile quando avete dovute fare il lookup del metodo stesso (L<reflection>):

=begin programlisting

    my $pulisci = $colf_robotica->can( 'pulisci' );
    $colf_robotica->$pulisci( $cucina );

=end programlisting

=head2 Riferimenti a Filehandle

Z<lexical_filehandles>

X<filehandle; riferimenti>
X<riferimenti; filehandle>
X<C<IO::File>>
X<C<IO::Handle>>

Quando usate la forma di C<open> (e C<opendir>) con filehandle lessicale, vi trovate ad
avere a che fare con riferimenti a filehandle. Internamente, questi filehandle sono oggetti C<IO::File>.
Potete chiamare direttamente dei metodi su di essi. A partire da Perl 5.14, potete farlo semplicemente
scrivendo:

=begin programlisting

    open my $out_fh, '>', 'file_di_output.txt';
    $out_fh->say( 'Ecco un p\'o di testo!' );

=end programlisting

Per attivare questa funzionalità, in Perl 5.12 dovete fare la C<use IO::File;> in Perl 5.10
e versioni precedenti dovete fare la C<use IO::Handle;>. Anche il codice meno recente può
creare dei riferimenti a typeglob:

=begin programlisting

    local *FH;
    open FH, "> $file" or die "Non posso scrivere su '$file': $!";
    my $fh = B<\*FH>;

=end programlisting

Questo idioma è antecedente alla comparsa dei filehandle lessicali (avvenuta con Perl 5.6.0 nel
Marzo del 2000). Potete ancora usare l'operatore di riferimento a typeglob per ottenere
riferimenti ai filehandle globali del package come C<STDIN>, C<STDOUT>,
C<STDERR> e C<DATA>--ma questi nomi sono comunque globali.

Dovunque è possibile, è preferibile usare i filehandle lessicali. Con tutti i benefici di uno scope esplicito,
i filehandle lessicali vi permettono di gestire la durata della vita di un filehandle come
una funzionalità della gestione della memoria di Perl 5.

=head2 Reference Count

Z<reference_counts>
X<riferimenti; reference counting>

Perl 5 usa una tecnica di gestione della memoria nota come I<reference counting>.
Ogni valore Perl ha un contatore associato. Perl incrementa tale contatore ogni volta
che viene richiesto un riferimento al valore, sia implicito che esplicito.
Analogamente, Perl decrementa tale contatore ogni volta che un riferimento scompare. Quando il contatore
arriva a zero, Perl può riciclare il valore in modo sicuro.

X<lessicali; ciclo di vita>

Come fa il Perl a sapere quando può rilasciare la memoria associata a una variabile senza causare problemi? Come
fa il Perl a sapere quando è sicuro chiudere il file aperto nello scope più interno del codice:

=begin programlisting

    say 'file non aperto';

    {
        open my $fh, '>', 'scope_interno.txt';
        $fh->say( 'qui il file e` aperto' );
    }

    say 'qui il file e` chiuso';

=end programlisting

Nel blocco interno dell'esempio, c'è un unico C<$fh>. (diverse linee del codice sorgente
si riferiscono ad esso, usando però sempre la stessa variabile: C<$fh>.)
Lo scope di C<$fh> è il blocco interno. Il suo valore non può superare i limiti di tale blocco. Perciò, quando
l'esecuzione raggiunge la fine del blocco, Perl ricicla la variabile C<$fh> e
decrementa il reference count del filehandle che essa contiene. Il reference count del filehandle
 arriva a zero e Perl può riciclarlo reclamandone la memoria associata e chiamando
C<close()> implicitamente.

Non è necessario che comprendiate tutti i dettagli di questo meccanismo. Dovete però
capire che le vostre azioni di creazione di riferimenti e passaggio degli stessi ad altre parti del codice
hanno un impatto sulla gestione della memoria del Perl (vedete L<circular_references>).

=head2 Riferimenti e Funzioni

Quando usate dei riferimenti come argomenti di funzioni, documentate attentamente le vostre
intenzioni. Modificare i valori di un riferimento all'interno di una funzione potrebbe
sorprendere il codice chiamante, se esso si aspetta che nessun altro modifichi i suoi dati.
Per modificare il contenuto di un riferimento senza effetti per il riferimento
stesso, copiate i suoi valori in una nuova variabile:

=begin programlisting

    my @nuovo_array = @{ $array_ref };
    my %nuovo_hash  = %{ $hash_ref  };

=end programlisting

X<C<Storable>>
X<C<dclone()>>

Fare questo è necessario solo in qualche caso, ma la duplicazione esplicita aiuta ad evitare spiacevoli
sorprese per il chiamante. Se usate strutture dati annidate o altri riferimenti
complessi, considerate l'uso del modulo core C<Storable> e la sua funzione
C<dclone> (I<deep cloning>).
