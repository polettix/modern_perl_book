=head1 Moduli

Z<modules>

X<moduli>

Molte persone considerano CPAN (L<cpan>) come il principale punto di forza di Perl 5.
Essenzialmente CPAN è un sistema per trovare e installare moduli. Un
I<modulo> è un package contenuto in un proprio file caricabile con C<use> o
C<require>. Ogni modulo deve contenere codice Perl 5 valido e deve terminare con un'espressione
che valuta ad un valore vero, in modo che il parser Perl 5 possa sapere se il caricamento
e la compilazione del modulo hanno avuto successo. Non ci sono altri requisiti, ma solo
delle convenzioni molto consolidate.

X<C<::>; separatore di nome di package>

Quando caricate un modulo, Perl spezza il nome del package in componenti separati da doppi due punti (C<::>)
e li usa per ricavare un path di file. In pratica,
l'istruzione C<use StranaBestia;> fa sì che Perl cerchi un file di nome
F<StranaBestia.pm> in ogni directory elencata in C<@INC>, nell'ordine, fino a che lo trova
oppure esaurisce la lista.

Analogamente, C<use StranaBestia::Persistenza;> fa sì che Perl cerchi un file
di nome C<Persistenza.pm> in ogni directory di nome F<StranaBestia/> presente in
una qualunque directory elencata in C<@INC>. C<use StrangeMonkey::UI::SmartPhone;> fa sì che
Perl cerchi un path relativo di file F<StranaBestia/UI/SmartPhone.pm> in
ogni directory in C<@INC>, e così via.

Il file risultante può contenere o meno una dichiarazione di package corrispondente al suo
nome--non vi è un I<requisito> tecnico in questo senso--ma ovvie considerazioni di manutenibilità
raccomandano di seguire tale convenzione.

=begin tip Trucchi con C<perldoc>

X<C<perldoc>; C<-l>>
X<C<perldoc>; C<-m>>
X<C<perldoc>; C<-lm>>

C<perldoc -l Nome::Modulo> visualizza il path completo del file F<.pm> corrispondente,
purché tale file contenga della I<documentazione> per il modulo.
C<perldoc -lm Nome::Modulo> visualizza il path completo del file F<.pm>,
indipendentemente dall'esistenza di un file F<.pod> corrispondente. C<perldoc -m
Nome::Modulo> visualizza il contenuto del file F<.pm>.

=end tip

=head2 Uso e Importazione

Z<import>

X<predefinite; funzioni; C<use>>
X<C<import()>>
X<C<CGI>>
X<direttiva C<feature>>
X<direttive; C<feature>>

Quando caricate un modulo con C<use>, Perl lo carica dal disco e poi chiama il suo metodo
C<import()>, passandogli gli eventuali argomenti che avete specificato. Per convenzione, il metodo
C<import()> di un modulo riceve una lista di nomi e esporta funzioni e
altri simboli nel namespace chiamante. Si noti che questa è meramente una convenzione; un modulo
potrebbe non fornire C<import()> oppure il suo C<import()> potrebbe avere un comportamento
diverso. Le direttive (L<pragmas>) come C<strict> usano gli argomenti per modificare il
comportamento dello scope lessicale chimante anziché per esportare simboli:

=begin programlisting

    use strict;
    # ... chiama strict->import()

    use CGI ':standard';
    # ... chiama CGI->import( ':standard' )

    use feature qw( say switch );
    # ... chiama feature->import( qw( say switch ) )

=end programlisting

X<predefinite; funzioni; C<no>>
X<annullare l'importazione>

L'istruzione predefinita C<no> chiama il metodo C<unimport()> di un modulo, se esiste, e gli passa
gli eventuali argomenti. Viene usata solitamente con le direttive che modificano qualche comportamento
con C<import()>:

=begin programlisting

    use strict;
    # riferimenti simbolici e bareword non ammessi
    # richiesta la dichiarazione delle variabili

    {
        no strict 'refs';
        # riferimenti simbolici ammessi
        # strict 'subs' e 'vars' ancora attive
    }

=end programlisting

Sia C<use> che C<no> hanno effetto durante la compilazione, per cui:

=begin programlisting

    use Nome::Modulo qw( lista di argomenti );

=end programlisting

... equivale a:

=begin programlisting

    BEGIN
    {
        require 'Nome/Modulo.pm';
        Nome::Modulo->import( qw( lista di argomenti ) );
    }

=end programlisting

Analogamente:

=begin programlisting

    no Nome::Modulo qw( lista di argomenti );

=end programlisting

... equivale a:

=begin programlisting

    BEGIN
    {
        require 'Nome/Modulo.pm';
        Nome::Modulo->unimport(qw( lista di argomenti ));
    }

=end programlisting

... inclusa la C<require> del modulo.

=begin tip Nessun Problema di Metodi Mancanti

Se C<import()> o C<unimport()> non esistono nel modulo, Perl non
genera un messaggio di errore. Questi metodi sono realmente opzionali.

=end tip

Se volete, I<potete> chiamare direttamente C<import()> e C<unimport()>, sebbene abbia poco senso
farlo al di fuori di un blocco C<BEGIN>; dopo il termine della compilazione,
C<import()> e C<unimport()> potrebbero non avere alcun effetto.

X<moduli; distinzione tra maiuscole e minuscole>
X<distinzione tra maiuscole e minuscole>

Le istruzioni C<use> e C<require> di Perl 5 distinguono tra maiuscole e minuscole, ma il fatto che Perl sappia
distinguere tra C<strict> e C<Strict> non significa che lo stesso valga per la vostra combinazione di sistema
operativo e file system. Se scrivete C<use Strict;>, Perl non
troverà F<strict.pm> su un filesystem che distingue tra maiuscole e minuscole. Se invece il filesystem
non distingue tra maiuscole e minuscole, Perl non avrà obiezioni a caricare F<Strict.pm>, ma quando verrà
invocato C<< Strict->import() >> non accadrà nulla (F<strict.pm> dichiara un package
di nome C<strict>).

I programmi portabili sono restrittivi sulla distinzione tra maiuscole e minuscole anche quando non è necessario.

=head2 Esportazione

Z<exporting>
X<esportazione>

Un modulo può rendere alcuni simboli globali disponibili ad altri package attraverso un
processo noto come I<esportazione>--un processo avviato chiamando C<import()>
implicitamente o direttamente.

X<C<Exporter>>
X<C<Exporter>; C<@EXPORT_OK>>
X<C<Exporter>; C<@EXPORT>>

Il modulo C<Exporter> distribuito con Perl fornisce un meccanismo standard per esportare simboli
da un modulo. C<Exporter> dipende dalla presenza di variabili globali di package
--in particolare C<@EXPORT_OK> e C<@EXPORT>--che contengono una lista di
simboli da esportare su richiesta.

Considerate un modulo C<StranaBestia::Servizi> che fornisce svariate funzioni indipendenti le une dalle altre e
utilizzabili in tutto il sistema:

=begin programlisting

    package StranaBestia::Servizi;

    use Exporter 'import';

    our @EXPORT_OK = qw( gira traduci gratta );

    ...

=end programlisting

Ogni pezzo di codice può ora usare questo modulo e, facoltativamente, importare alcune o tutte le
tre funzioni esportate. Potete anche esportare variabili:

=begin programlisting

    push @EXPORT_OK, qw( $ragno $scimmia $scoiattolo );

=end programlisting

I simboli esportati per default vanno elencati in C<@EXPORT> anziché in
C<@EXPORT_OK>:

=begin programlisting

    our @EXPORT = qw( danza_bestiale sonno_bestiale );

=end programlisting

... in modo che C<use StranaBestia::Servizi;> importi entrambe le funzioni.
Ricordate che, se specificate dei simboli da importare, i simboli di default I<non> verranno importati;
in tale caso, otterrete solo ciò che chiedete. Per caricare un modulo senza importare alcun simbolo
fornite esplicitamente una lista vuota:

=begin programlisting

    # rendi il modulo disponibile, ma non import()are simboli
    use StranaBestia::Servizi ();

=end programlisting

Indipendentemente dalle liste di importazione, potete sempre chiamare le funzioni in un altro
package con i loro nomi qualificati:

=begin programlisting

    StranaBestia::Servizi::gratta();

=end programlisting

=begin tip Esportazione Semplificata

X<CPAN; C<Sub::Exporter>>

Il modulo CPAN C<Sub::Exporter> fornisce un'interfaccia migliore per esportare funzioni
senza usare variabili globali di package. Esso offre anche opzioni più potenti.  Tuttavia,
mentre C<Exporter> può esportare variabili, C<Sub::Exporter> può esportare solo
funzioni.

=end tip

=head2 Organizzare il Codice con i Moduli

Perl 5 non vi richiede di usare i moduli, né i package, né i namespace. Potete
scrivere tutto il vostro codice in un unico file F<.pl> o in svariati file F<.pl> di cui
fare la C<require> dove necessario.  Avete a disposizione abbastanza flessibilità per gestire il vostro
codice nel modo più appropriato a seconda del vostro stile di programmazione, del livello di formalità,
rischio e valore del progetto, della vostra esperienza e della vostra dimestichezza con la distribuzione del
software in Perl 5.

Tuttavia, un progetto con più di un paio di centinaia di linee di codice può avvantaggiarsi
in molti modi di un'organizzazione a moduli:

=over 4

=item * I moduli aiutano a garantire la separazione logica tra entità distinte nel
sistema.

=item * I moduli forniscono delle barriere tramite le API, che siano procedurali oppure OO.

=item * I moduli suggeriscono un modo naturale di organizzare il vostro codice sorgente.

=item * Nell'ecosistema di Perl 5 ci sono molti strumenti dedicati alla creazione, manutenzione,
organizzazione e distribuzione di moduli.

=item * I moduli forniscono un meccanismo di riutilizzo del codice.

=back

Anche se non adottate un approccio orientato agli oggetti, modellare ogni
entità e responsabilità distinta del vostro sistema con il proprio modulo tiene insieme le parti di codice
legate tra di loro e le separa dalle altre.
