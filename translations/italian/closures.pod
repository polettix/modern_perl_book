=head1 Chiusure

Z<closures>
X<funzioni; di ordine superiore>
X<funzioni di ordine superiore>

Ogni volta che il controllo di flusso entra in una funzione, tale funzione riceve anche un nuovo ambiente
che rappresenta lo scope lessicale di quella particolare chiamata (L<scope>). Questo vale anche per
le funzioni anonime (L<anonymous_functions>). Le implicazioni sono
importanti. Nell'informatica di base, il termine I<funzioni di ordine superiore> si riferisce a
funzioni che manipolano altre funzioni. Le chiusure consentono di sfruttare pienamente
le potenzialità di tali funzioni.

=head2 Creazione di Chiusure

X<chiusure>
X<funzioni; chiusure>

Una I<chiusura> è una funzione che usa le variabili lessicali di uno scope esterno.
Probabilmente avete già creato e utilizzato delle chiusure senza rendervene conto:

=begin programlisting

    package Chiusura::Invisibile;

    my $nomefile = shift @ARGV;

    sub dammi_il_nomefile { return $nomefile }

=end programlisting

Se questo codice vi sembra ovvio, è un buon inizio! I<Naturalmente> la funzione
C<dammi_il_nomefile()> può vedere il lessicale C<$nomefile>. È propio il modo in cui
funziona lo scope!

Immaginate di voler iterare su una lista di elementi senza dover gestire voi stessi
l'iteratore.  Potete creare una funzione che restituisce una funzione che, quando viene
invocata, restituisce il prossimo elemento dell'iterazione:

=begin programlisting

    sub crea_iteratore
    {
        my @elementi = @_;
        my $cont     = 0;

        return sub
        {
            return if $cont == @elementi;
            return $elementi[ $cont++ ];
        }
    }

    my $cugini = crea_iteratore(
        qw( Riccardo Ale Carlo Enrico Camilla Maria Cristina )
    );

    say $cugini->() for 1 .. 5;

=end programlisting

Sebbene C<crea_iteratore()> sia terminata, la funzione anonima memorizzata in
C<$cugini> ha fatto una chiusura sui valori delle due variabili così come essi si presentavano
all'interno dell'invocazione di C<crea_iteratore()>. Tali valori, dunque, persistono
(L<reference_counts>).

Poichè ogni invocazione di C<crea_iteratore()> crea un nuovo ambiente
lessicale, ogni sub anonima che viene creata e restituita fa una chiusura su un proprio ambiente
lessicale unico:

=begin programlisting

    my $zie = crea_iteratore(
        qw( Carolina Filomena Viviana Silvia Monica Lara )
    );

    say $cugini->();
    say $zie->();

=end programlisting

Dato che C<crea_iteratore()> non restituisce questi lessicali nè per valore, nè per riferimento,
nessun'altra parte del codice Perl può accedervi, eccetto la chiusura. Essi risultano
incapsulati allo stesso modo degli altri lessicali, e quindi solo
il codice che condivide con essi un ambiente lessicale può accedervi. Questo idioma
fornisce un incapsulamento migliore di quello che fornirebbe invece una variabile globale di file
o di package:

=begin programlisting

    {
        my $variabile_privata;

        sub imposta_privata { $variabile_privata = shift }
        sub leggi_privata { $variabile_privata }
    }

=end programlisting

Ricordate che non potete I<annidare> le funzioni con nome. Le funzioni con nome hanno uno scope
globale al package. La condivisione di ogni variabile lessicale condivisa tra funzioni annidate viene
perduta quando la funzione più esterna distrugge il suo primo ambiente lessicaleN<Se
questo vi sembra comlicato, immaginate come dev'essere implementarlo.>.

=begin tip Invasione della Privacy

X<CPAN; C<PadWalker>>

Il modulo CPAN C<PadWalker> vi permette di violare l'incapsulamento lessicale, ma chiunque
lo usi introducendo dei bug nel vostro codice si guadagna di diritto l'onore di risolvere tali bug
senza il vostro aiuto.

=end tip

=head2 Uso delle Chiusure

Iterare su una lista di dimensione fissata con una chiusura è interessante, ma le chiusure
possono fare molto altro, come iterare su una lista che è troppo costosa da calcolare
o troppo grande da tenere in memoria tutta in una volta. Considerate una funzione
per creare la serie di Fibonacci man mano che avete bisogno dei suoi elementi. Invece di
ricalcolare la serie ricorsivamente, usate una cache e siate pigri, creando gli elementi
solo quando vi servono:

=begin programlisting

    sub gen_fib
    {
        my @seriefib = (0, 1);

        return sub
        {
            my $elem = shift;

            if ($elem >= @seriefib)
            {
                for my $calc (@seriefib .. $elem)
                {
                    $seriefib[$calc] = $seriefib[$calc - 2]
                                     + $seriefib[$calc - 1];
                }
            }
            return $seriefib[$elem];
        }
    }

=end programlisting

Ogni chiamata alla funzione restituita da C<gen_fib()> riceve un argomento, l'indice dell'I<n>-esimo
elemento della serie di Fibonacci.  La funzione genera tutti i valori
precedenti necessari della serie, li memorizza in cache e restituisce l'elemento
richiesto--ritardando le computazioni fino a quando non sono assolutamente necessarie. C'è un pattern
specifico di caching intrecciato con la serie numerica. Che cosa succede
se estraete il codice specifico di caching (inizializzazione della cache, escuzione di codice 
dedicato al popolamento dei elementi arbitrari della cache e restituzione di un valore calcolato o estratto dalla cache)
in una funzione C<genera_chiusura_cache()>?

=begin programlisting

    sub genera_chiusura_cache
    {
        my ($calcola_elem, @cache) = @_;

        return sub
        {
            my $elem = shift;

            $calcola_elem->($elem, \@cache)
                unless $elem < @cache;

            return $cache[$elem];
        };
    }

=end programlisting

=begin tip Riordina, Applica e Filtra

Le funzioni native C<map>, C<grep> e C<sort> sono anch'esse delle
funzioni di ordine superiore.

=end tip

Ora C<gen_fib()> diventa:

=begin programlisting

    sub gen_fib
    {
        my @seriefib = (0, 1, 1);

        return genera_chiusura_cache(
            sub
            {
                my ($elem, $seriefib) = @_;

                for my $calc ((@$seriefib - 1) .. $elem)
                {
                    $seriefib->[$calc] = $seriefib->[$calc - 2]
                                       + $seriefib->[$calc - 1];
                }
            },
            @seriefib
        );
    }

=end programlisting

Il programma funziona come prima, ma l'uso di riferimenti a funzione e chiusure
separa il codice di inizializzazione della cache dal calcolo del prossimo
numero della serie di Fibonacci. Personalizzare il comportamento del codice--in
questo caso, di C<genera_chiusura_cache()>--passando una funzione vi mette a disposizione
una enorme flessibilità.

=head2 Chiusure e Applicazione Parziale

Z<partial_application>

Le chiusure possono anche I<limitare> la generalità indesiderata di una funzione. Considerate una funzione
che riceve molti parametri:

=begin programlisting

    sub prepara_coppa
    {
        my %argomenti = @_;

        my $gelato   = dammi_gelato( $argomenti{gelato} );
        my $banana   = dammi_banana( $argomenti{banana} );
        my $sciroppo = dammi_sciroppo( $argomenti{sciroppo} );
        ...
    }

=end programlisting

Avere un'enorme quantità di personalizzazioni possibili può essere giusto per una elegante gelateria
in centro città, ma per un venditore ambulante che serve solo gelato alla vaniglia su banane di
qualità Cavendish, ogni chiamata a C<prepara_coppa()> passa
alcuni argometi che non cambiano mai.

X<applicazione parziale>

Una tecnica detta I<applicazione parziale> vi permette di specificare I<alcuni> degli
argumenti a una funzione e di fornire i restanti in un momento successivo. Racchiudete la
chiamata alla funzione in una chiusura e passatele i parametri che volete fissare.

Considerate il venditore ambulante che serve solo gelato alla vaniglia su banane di
qualità Cavendish:

=begin programlisting

    my $prepara_coppa_ambulante = sub
    {
        return prepara_coppa( @_,
            gelato => 'Vaniglia',
            banana => 'Cavendish',
        );
    };

=end programlisting

X<CPAN; C<Sub::Install>>

Invece di chiamare direttamente C<prepara_coppa()>, invocate il riferimento a funzione
C<$prepara_coppa_ambulante> e passate soltanto gli argomenti interessanti, senza dovervi preoccupare
di dimenticare o di non passare correttamente quelli fissiN<Potete anche usare
il modulo CPAN C<Sub::Install> per importare questa funzione direttamente in un altro
namespace.>.

X<I<Higher Order Perl>>

Questo è solo un assaggio di quello che potete fare con le funzioni di ordine superiore. Il libro
I<Higher Order Perl> di Mark Jason Dominus è il riferimento bibliografico canonico per trattare
funzioni e chiusure come oggetti di prima classe. Potete leggerlo online all'URL
U<http://hop.perl.plover.com/>.
