=head1 Riflessione

Z<reflection>

X<riflessione>
X<introspezione>

La I<riflessione> (o I<introspezione>) è il processo di interrogare un programma a proposito di sé stesso mentre viene eseguito. Trattando il codice come un dato, è possibile gestirlo nello stesso modo in cui si gestiscono i dati; questo principio E<egrave> alla base della generazione di codice (L<code_generation>).

X<CPAN; C<Class::MOP>>

La classe Moose C<Class::MOP> (L<class_mop>) semplifica molti casi di utilizzo della riflessione nei sistemi ad oggetti. Se usate Moose, il suo sistema di metaprogrammazione vi sarà di aiuto; altrimenti molti altri idiomi del Perl 5 base vi aiuteranno a ispezionare e manipolare i programmi in esecuzione.

=head2 Verificare se un Modulo è stato Caricato

X<C<%INC>>

Se conoscete il nome di un modulo, potete verificare se Perl ritiene di averlo
caricato ispezionando l'hash C<%INC>. Infatti, quando Perl 5 carica del codice con
C<use> o C<require>, memorizza un elemento in C<%INC> la cui chiave è il path
del file contenente il modulo da caricare e il cui valore è il path completo su disco di tale
modulo. In altre parole, il caricamento di C<Modern::Perl> ha il seguente effetto:

=begin programlisting

    $INC{'Modern/Perl.pm'} =
        '.../lib/site_perl/5.12.1/Modern/Perl.pm';

=end programlisting

Ovviamente, i dettagli del path completo variano in base alla propria installazione. Per verificare che
Perl sia riuscito a caricare un modulo, occorre convertire il nome del modulo in un nome di file in forma canonica e controllare l'esistenza di tale chiave in C<%INC>:

=begin programlisting

    sub modulo_caricato
    {
        (my $nomemod = shift) =~ s!::!/!g;
        return exists $INC{ $nomemod . '.pm' };
    }

=end programlisting

X<C<@INC>>
X<CPAN; C<Test::MockObject>>
X<CPAN; C<Test::MockModule>>

Come C<@INC>, anche C<%INC> può essere manipolato in qualunque parte del codice. Alcuni moduli (come C<Test::MockObject> o C<Test::MockModule>) manipolano C<%INC> per validi motivi ma, a seconda del vostro livello di paranoia, potreste anche decidere di controllare voi stessi che il path e i contenuti del package siano quelli attesi.

X<CPAN; C<Class::Load>>

La funzione C<is_class_loaded()> del modulo CPAN C<Class::Load> incapsula questo controllo di C<%INC>.

=head2 Verificare l'Esistenza di un Package

Per controllare se un package esiste nel vostro programma -- ovvero se, da qualche parte, del codice ha eseguito una direttiva C<package> con un certo nome -- controllate che il package erediti da C<UNIVERSAL>. Tutto ciò che estende C<UNIVERSAL> deve in qualche modo fornire il metodo C<can()>. Se il package non esiste, Perl solleverà un'eccezione di chiamante non valido, quindi ponete la chiamata all'interno di un blocco C<eval>:

  say "$pkg esiste" if eval { $pkg->can( 'can' ) };

In alternativa, potete consultare le tabelle dei simboli del Perl.

=head2 Verificare l'Esistenza di una Classe

Dato che Perl 5 non fa una vera distinzione tra package e classi, il meglio che si possa fare senza  Moose è controllare se esiste un package con il nome di una data classe. È possibile controllare con C<can()> che il package fornisca C<new()>, ma non vi è alcuna garanzia che gli eventuali C<new()> trovati siano dei metodi e tanto meno dei costruttori.

=head2 Verificare il Numero di Versione di un Modulo

I moduli non devono fornire necessariamente un numero di versione, ma ogni package eredita
il metodo C<VERSION()> dalla superclasse universale C<UNIVERSAL> (L<universal>):

=begin programlisting

    my $ver_mod = $modulo->VERSION();

=end programlisting

C<VERSION()> restituisce il numero di versione del modulo, se è definito; altrimenti
restituisce C<undef>. Il metodo restituisce C<undef> anche nel caso in cui il modulo non esista.

=head2 Verificare l'Esistenza di una Funzione

Per controllare se una funzione esiste in un package, chiamate C<can()> come metodo di classe sul nome del package:

  say "$funz() esiste" if $pkg->can( $funz );

Perl solleverE<agrave> un'eccezione a meno che C<$pkg> sia un invocante valido; se avete dubbi sulla sua validitE<agrave>, ponete la chiamata in un blocco C<eval>.
Attenzione che una funzione implementata in termini di C<AUTOLOAD()> (L<autoload>) potrebbe dare una risposta errata se il suo package non ha predichiarato la funzione oppure non ha sovrascritto C<can()> in modo corretto. In questo caso, significa che tale package ha un bug.

Per determinare se la C<import()> di un modulo ha importato una funzione nel namespace corrente, usate la seguente tecnica:

=begin programlisting

    say "$funz() importata!" if __PACKAGE__->can( $funz );

=end programlisting

Come per l'esistenza di un package, potete I<anche> esaminare voi stessi la tabella dei simboli, se avete abbastanza pazienza per farlo.

=head2 Verificare l'Esistenza di un Metodo

Non esistono tecniche di riflessione infallibili per distinguere tra una funzione e un metodo.

=head2 Consultare le Tabelle dei Simboli

X<tabella dei simboli>
X<typeglob>

Una tabella dei simboli di Perl 5 E<egrave> uno speciale tipo di hash, in cui le chiavi sono i nomi dei simboli globali di un package e i valori sono typeglob. Un I<typeglob> E<egrave> una struttura dati interna che puE<ograve> contenere uno o piE<ugrave> dei seguenti valori: uno scalare, un array, un hash, un filehandle e una funzione.

Potete accedere a una tabella dei simboli come hash aggiungendo due volte "due punti" al nome del
package. Per esempio, la tabella dei simboli per il package C<TritaScimmie> E<egrave> accessibile come C<%TritaScimmie::>.

Tramite l'operatore C<exists> è I<possibile> verificare l'esistenza di specifici nomi di simboli all'interno di una tabella dei simboli (o anche manipolare la tabella I<aggiungendo> o I<rimuovendo> simboli). Attenzione però che alcuni cambiamenti interni nel Perl 5 hanno variato i dettagli di che cosa viene memorizzato nei typeglob, quando e perché.

X<CPAN; C<Package::Stash>>

Per maggiori dettagli potete vedere la sezione "Symbol Tables" in C<perldoc perlmod>, ma utilizzate preferibilmente le altre tecniche di riflessione descritte in questa sezione. Se davvero siete costretti a manipolare le tabelle dei simboli e i typeglob, considerate piuttosto di usare il modulo CPAN C<Package::Stash>.
